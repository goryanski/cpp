Задание 1. Вывести на экран один куплет любимого стихотворения или песни, 
с указанием автора или исполнителя. Используйте escape-последовательности 
для форматирования.


#include<iostream> 
using namespace std; 
void main() {
	setlocale(LC_ALL, "rus");
	cout << "\t  ***Ёлочка***\n"
		"\tВ лесу родилась елочка,\n"
		"\tВ лесу она росла,\n"
		"\tЗимой и летом стройная,\n"
		"\tЗеленая была.\n\n"

		"\tМетель ей пела песенку:\n"
		"\t\"Спи, елочка, бай-бай!\"\n"
		"\tМороз снежком укутывал,\n"
		"\t\"Смотри, не замерзай!\"\n"
		"\tМороз снежком укутывал,\n"
		"\t\"Смотри, не замерзай!\"\n\n"

		"\tТеперь она нарядная\n"
		"\tНа праздник к нам пришла\n"
		"\tИ много, много радости\n"
		"\tДетишкам принесла.\n"
		"\tИ много, много радости\n"
		"\tДетишкам принесла.\n"
		"\t\t\t\/\/cлова - Раиса Кудашева,\n"
		"\t\t\tмузыка — Леонид Бекман.\/\/";
} 



Задание 2. Вывести на экран стих «Every hunter wants…» таким образом,
чтобы каждый «цвет» начинался с новой строки и соответствующим 
количеством табуляций. 


#include<iostream> 
using namespace std; 
void main() {
	setlocale(LC_ALL, "rus");
	cout << "\t\tКаждый\n \t\tОхотник\n \t\tЖелает\n \t\tЗнать\n"
		"\t\tГде\n \t\tСидит\n \t\tФазан";
} 



Задание 3. Напишите объявление о продаже чего-нибудь и выведите его на  
экран, в том виде как оно должно было бы быть напечатано.


#include<iostream> 
using namespace std; 
void main() {
	setlocale(LC_ALL, "rus");
	cout << "\t\tПродам носки\n\n"
		"\tCoстояние:\t почти новые\n"
		"\tМатериал:\t шерсть\n\n"
		"\t\tИли\n\n"
		"\tСдам в аренду:\t -посуточно\n \t\t\t -на неделю\n"
		"\t\t\t (Стирка с Вас)\n\n"
		"\tЦена договорная, торг уместен\n"
		"\t\tтел.: 0937676767\n\n"
		"\t 093\t 093\t 093\t 093\n"
		"\t 76\t 76\t 76\t 76\n"
		"\t 76\t 76\t 76\t 76\n"
		"\t 767\t 767\t 767\t 767";
} 


Задание 1. Заданы три сопротивлении R1, R2, R3. Вычислить значение сопротивления R0 по формуле: 1/R0 =
1/R1+1/R2+1/R3.
Контрольный пример: R1=2, R2=4, R3=8, R0=1.142857.


#include<iostream> 
using namespace std;
int main() {
	setlocale(LC_ALL, "rus");
	float R1, R2, R3;
	cout << " Введите сопротивление R1 -> "; cin >> R1;
	cout << " Введите сопротивление R2 -> "; cin >> R2;
	cout << " Введите сопротивление R3 -> "; cin >> R3;
	cout << " R0 = " << 1 / ((1 / R1) + (1 / R2) + (1 / R3)) <<
		" Oм\n";
}


Задание 2. По заданной длине окружности найти площадь круга по формуле S = pi*R2, радиус вычислить из
формулы длины окружности: L=2*pi *R.
Примечание: pi = 3.14.


#include<iostream> 
using namespace std;
int main() {
	setlocale(LC_ALL, "rus");
	float S, R, L;
	cout << " Введите длину окружности L (см) -> "; cin >> L;
	R = L / (2 * 3.14);
	S = 3.14 * R * R;
	cout << " Площадь круга S = " << S << " см.кв.\n";
}



Задание 3. Вычислить пройденное расстояние при прямолинейном равноускоренном движении по формуле S =
v*t + (a*t2) / 2, где v — скорость, t — время, а — ускорение.


#include<iostream> 
using namespace std;
int main() {
	setlocale(LC_ALL, "rus");
	float v, t, a;
	cout << " Введите скорость v -> "; cin >> v;
	cout << " Введите время t -> "; cin >> t;
	cout << " Введите ускорение а -> "; cin >> a;
	cout << " Расстояние S = " << v * t + ((a * t * t) / 2);
}


Задание 1. Пользователь вводит с клавиатуры время
в секундах. Необходимо написать программу, которая
переведет введенные пользователем секунды в часы,
минуты, секунды и выводит их на экран.


#include<iostream> 
using namespace std;
int main() {
	setlocale(LC_ALL, "rus");
	int seconds;
	cout << " Введите время в секундах -> "; cin >> seconds;
	cout << " " << seconds / 60 / 60 << " часов, " <<  seconds / 60 % 60 << " минут, " << seconds % 60 << " секунд\n";
}




Задание 2. Написать программу, которая преобразует
введенное с клавиатуры дробное число в денежный формат. Например, число 12,5 должно быть преобразовано
к виду 12 грн 50 коп.


#include<iostream> 
using namespace std;
int main() {
	setlocale(LC_ALL, "rus");
	float summa;
	cout << " Введите сумму -> "; cin >> summa;
	cout << (int)summa << " грн " << (summa - (int)summa) * 100 << " коп.\n";
}


Задание 3. Написать программу, вычисляющую, с какой
скоростью бегун пробежал дистанцию. Рекомендуемый
вид экрана во время выполнения программы приведен
ниже:
■ Вычисление скорости бега.
■ Введите длину дистанции (метров) = 1000.
■ Введите время (мин.сек) = 3.25.
■ Дистанция: 1000 м.
■ Время: 3 мин 25 сек = 205 сек.
■ Вы бежали со скоростью: 17.56 км/ч.


#include<iostream> 
using namespace std;
int main() {
	setlocale(LC_ALL, "rus");
	float length, time, seconds;
	cout << " " << (char)176 << " Вычисление скорости бега.\n";
	cout << " " << (char)176 << " Введите длину дистанции (метров) = "; cin >> length;
	cout << " " << (char)176 << " Введите время (мин.сек) = "; cin >> time;
	cout << " " << (char)176 << " Дистанция: " << length << " м.\n";
	seconds = (int)time * 60 + (time - (int)time) * 100;
	cout << " " << (char)176 <<
		" Время: " << (int)time << " мин " << (time - (int)time) * 100 << " сек = " << 
		seconds << " сек.\n";
	cout << " " << (char)176 << " Вы бежали со скоростью: " << (length / 1000)/(seconds / 3600) << " км/ч\n";
}



Задание 4. Пользователь указывает цену одой минуты
исходящего звонка с одного мобильного оператора другому, а также продолжительность разговора в минутах
и секундах. Необходимо вычислить денежную сумму на
которую был произведен звонок.


#include<iostream> 
using namespace std;
int main() {
	setlocale(LC_ALL, "rus");
	float one_minutes, time, sum;
	cout << " Введите цену одной минуты (грн.коп): "; cin >> one_minutes;
	cout << " Продолжительность разговора (мин.сек): "; cin >> time;
	sum = one_minutes * time;
	cout << " Стоимость звонка: " << (int)sum << " грн " << (sum - (int)sum) * 100 << " коп.\n";
}


Задание 5. Написать программу, которая преобразует
введенное пользователем количество дней в количество
полных недель и оставшихся дней. Например, пользователь ввел 17 дней, программа должна вывести на экран
2 недели и 3 дня.


#include<iostream> 
using namespace std;
int main() {
	setlocale(LC_ALL, "rus");
	int days;
	cout << " Введите кол-во дней: "; cin >> days;
	cout << " " << days / 7 << " недели и " << days % 7 << " дня.\n";
}




Задание 1. Создать приложение, которое выводит информацию о книге, в следующем формате:
Name : “The war and the peace”
Avtor : L.N. Tolstoj
Izdatelstvo: Piter
Pages : 500.


#include<iostream> 
using namespace std;
void main() {
	cout << " Name \t\t\b\b\b\b: \"The war and the peace\"\n"
		" Avtor \t\t\b\b\b\b: L.N.Tolstoj\n"
		" Izdatelstvo: Piter\n"
		" Pages \t\t\b\b\b\b: 500.";
}



Задание 2. Создать приложение, которое выводит на
консоль фразу:
“U lukomor’a dub zelenij,
Zlataya zep na dupe tom,
I dnem i nochju kot uchenij
vse hodit po cepi krugom”
Сопроводить каждую новую строчку тройным звуковым сигналом.


#include<iostream> 
using namespace std;
void main() {
	/*чтобы сигнал срабатывал трижды на каждой стоке, нужно после каждой
	строки вызвать принудительно паузу и новая строка будет появляться
	только после нажатия любой клавиши. тогда будет сигнал срабатывть по три
	раза на каждой строке, иначе если без паузы оставить просто по три \а вначале
	строк, сигнал сработает трижды только на первой строке, а на последующих
	сигнала не будет*/
	cout << " \a\a\a\"U lukomor\'a dub zelenij,\n";
	system("pause");
	cout << " \a\a\aZlataya zep na dupe tom,\n";
	system("pause");
	cout << " \a\a\aI dnem i nochju kot uchenij\n";
	system("pause");
	cout << " \a\a\avse hodit po cepi krugom\"\n";
}



Задание 3. Создать приложение, которое выводит на
экран следующую таблицу:
╔════════════════════════════════════════════╗
║ Vremena goda ║
╠═════════╦═══════════╦═══════════╦══════════╣
║ Zima ║ Vesna ║ Leto ║ Osen ║
╚═════════╩═══════════╩═══════════╩══════════╝


#include<iostream> 
using namespace std;
void main() {
	cout << "\n\t"
		<< (char)201 << (char)205 << (char)205 << (char)205 << (char)205 << (char)205
		<< (char)205 << (char)205 << (char)205 << (char)205 << (char)205 << (char)205
		<< (char)205 << (char)205 << (char)205 << (char)205 << (char)205 << (char)205
		<< (char)205 << (char)205 << (char)205 << (char)205 << (char)205 << (char)205
		<< (char)205 << (char)205 << (char)205 << (char)205 << (char)205 << (char)205
		<< (char)205 << (char)205 << (char)205 << (char)205 << (char)205 << (char)205
		<< (char)205 << (char)205 << (char)205 << (char)205 << (char)205 << (char)205
		<< (char)205 << (char)205 << (char)205 << (char)205 << (char)205 << (char)205
		<< (char)205 << (char)205 << (char)205 << (char)205 << (char)205 << (char)205
		<< (char)205 << (char)205 << (char)205 << (char)205 << (char)205 << (char)187;
	cout << "\n\n\t"
		<< (char)186 << "\t\t\tVremena goda \t\t\t   " << (char)186;
	cout << "\n\n\t"
		<< (char)204 << (char)205 << (char)205 << (char)205 << (char)205 << (char)205
		<< (char)205 << (char)205 << (char)205 << (char)205 << (char)205 << (char)205
		<< (char)205 << (char)205 << (char)203 << (char)205 << (char)205 << (char)205
		<< (char)205 << (char)205 << (char)205 << (char)205 << (char)205 << (char)205
		<< (char)205 << (char)205 << (char)205 << (char)205 << (char)205 << (char)203
		<< (char)205 << (char)205 << (char)205 << (char)205 << (char)205 << (char)205
		<< (char)205 << (char)205 << (char)205 << (char)205 << (char)205 << (char)205
		<< (char)205 << (char)205 << (char)205 << (char)203 << (char)205 << (char)205
		<< (char)205 << (char)205 << (char)205 << (char)205 << (char)205 << (char)205
		<< (char)205 << (char)205 << (char)205 << (char)205 << (char)205 << (char)185;
	cout << "\n\n\t"
		<< (char)186 << "\t\b\bZima\t\b\b" << (char)186 << "\t   Vesna\t\b\b\b" << (char)186 <<
		"\t    Leto\t\b\b\b" << (char)186 << "\t   Osen\t   " << (char)186;
	cout << "\n\n\t"
		<< (char)200 << (char)205 << (char)205 << (char)205 << (char)205 << (char)205
		<< (char)205 << (char)205 << (char)205 << (char)205 << (char)205 << (char)205
		<< (char)205 << (char)205 << (char)202 << (char)205 << (char)205 << (char)205
		<< (char)205 << (char)205 << (char)205 << (char)205 << (char)205 << (char)205
		<< (char)205 << (char)205 << (char)205 << (char)205 << (char)205 << (char)202
		<< (char)205 << (char)205 << (char)205 << (char)205 << (char)205 << (char)205
		<< (char)205 << (char)205 << (char)205 << (char)205 << (char)205 << (char)205
		<< (char)205 << (char)205 << (char)205 << (char)202 << (char)205 << (char)205
		<< (char)205 << (char)205 << (char)205 << (char)205 << (char)205 << (char)205
		<< (char)205 << (char)205 << (char)205 << (char)205 << (char)205 << (char)188;
}


Задание 1. Пользователь вводит год. Необходимо написать программу, которая выведет количество дней в этом
году. При написании программы использовать линейный
алгоритм (конструкции условного выбора не использовать). Например, пользователь ввел год 2004, программа
сообщает, что в этом году 366 дней в следующей форме:
In 2004 year = 366 days


#include<iostream> 
using namespace std;
int main() {
	int year;
	cout << " input year here: ";
	cin >> year;
	cout << " In " << year << " year = " << 365 + !(year % 4 || !(year % 100 || !year % 400)) << " days\n";
}



Задание 2. Пользователь вводит с клавиатуры денежную
сумму в гривнах и копейках (гривны и копейки вводятся
в разные переменные). Сумма может быть введена как
правильно (например 19 грн. 90 коп), так и неправильно
(например 22 грн. 978 коп). Написать программу, которая,
используя только линейный алгоритм, осуществит корректировку введенной денежной суммы в правильную форму.
Например, если пользователь ввел 11 грн. 150 коп,
программа должна вывести на экран сумму 12 грн. 50 коп.


#include<iostream> 
using namespace std;
int main() {
	int grivni, kopejki;
	cout << " Vvedite kol-vo griven: ";
	cin >> grivni;
	cout << " Vvedite kol-vo kopeek: ";
	cin >> kopejki;
	cout << " Summa: " << grivni + kopejki / 100 << " grn. " << kopejki % 100 << " kop.\n";
}


Задание 3. Написать программу вычисления объема параллелепипеда. 
Ниже приведен рекомендуемый вид экрана во время выполнения программы.
Вычисление объема параллелепипеда.
Введите исходные данные:
Длина (см) -> 9;
Ширина (см) -> 7.5;
Высота (см) -> 5;
Объем: 337.50 куб. см.


#include<iostream> 
using namespace std;
int main() {
	setlocale(LC_ALL, "rus");
	float dlina, shirina, visota;
	cout <<
		" Вычисление объема параллелепипеда.\n"
		" Введите исходные данные:\n";
		cout << " Длина(см) -> "; cin >> dlina;
		cout << " Ширина(см) -> "; cin >> shirina;
		cout << " Высота(см) -> "; cin >> visota;
		cout << " Объем: " << shirina * visota * dlina << " куб.см.\n";
}


Задание 4. Написать программу вычисления расстояния
между населенными пунктами, изображенными на карте. Ниже приведен рекомендуемый вид экрана во время
выполнения программы.
Вычисление расстояния между населенными пунктами
Введите исходные данные:
Масштаб карты (количество километров в одном
сантиметре) -> 120.
Расстояние между точками, изображающими
населенные пункты (см) -> 3.5.
Расстояние между населенными пунктами 420 км.


#include<iostream> 
using namespace std;
int main() {
	setlocale(LC_ALL, "rus");
	float masshtab, rasstoyanie;
	cout <<
		" Вычисление расстояния между населенными пунктами\n"
		" Введите исходные данные:\n";
		cout << "\tМасштаб карты (количество километров в одном\n"
			"\tсантиметре) -> "; cin >> masshtab;
		cout << "\tРасстояние между точками, изображающими\n"
			"\tнаселенные пункты(см)  -> "; cin >> rasstoyanie;
		cout << "\tРасстояние между населенными пунктами " << masshtab * rasstoyanie << " км.\n";
}



Задание 5. Напишите программу, которая вычисляем
объём шара


#include<iostream> 
using namespace std;
int main() {
	setlocale(LC_ALL, "rus");
	float radius;
	cout <<
		" Вычисление объема шара.\n";
	cout << " Введите радиус(см) -> "; cin >> radius;
	cout << " Объем шара: " << (4.0/3) * 3.14 * radius * radius * radius << " куб.см.\n";
}




Задание 1. Пользователь вводит с клавиатуры расстояние
до аэропорта и время, за которое нужно доехать. Вычислить скорость, с которой ему нужно ехать.


#include<iostream>
using namespace std;
int main()
{
	setlocale(LC_ALL, "rus");
	float rasstoyanie, time;
	cout << " Введите расстояние до аэропорта -> "; cin >> rasstoyanie;
	cout << " Введите время, за которое нужно доехать -> "; cin >> time;
	cout << " Cкорость, с которой ему нужно ехать: " << rasstoyanie / time << " км/ч.\n\n";
	system("pause");
}



Задание 2. Пользователь вводит с клавиатуры время начала и время завершения телефонного разговора (часы,
минуты и секунды). Посчитать стоимость разговора, если
стоимость минуты — 30 копеек.



#include<iostream>
using namespace std;
int main()
{
	setlocale(LC_ALL, "rus");
	int start_hours, start_minutes, start_seconds, end_hours, end_minutes, end_seconds;
	cout << " Введите время начала разговора (часы, минуты и секунды через пробел) -> ";
	cin >> start_hours >> start_minutes >> start_seconds;
	cout << " Введите время завершения разговора (часы, минуты и секунды через пробел) -> ";
	cin >> end_hours >> end_minutes >> end_seconds;
	int start_in_seconds = (start_hours * 3600) + (start_minutes * 60) + start_seconds;
	int end_in_seconds = (end_hours * 3600) + (end_minutes * 60) + end_seconds;
	int difference = end_in_seconds - start_in_seconds;
	int hours = difference / 3600;
	int minutes = difference % 3600 / 60;
	int seconds = bool(difference % 60);
	int min_and_sec = minutes + seconds;
	int result = (hours * 60 + min_and_sec) * 30;
	cout << " Стоимость разговора: " << result / 100 << " грн " << result % 60 << " коп.\n\n"; 
	system("pause");
}



Задание 3. Пользователь вводит с клавиатуры расстояние,
расход бензина на 100 км и стоимость трех видов бензина.
Вывести на экран сравнительную таблицу со стоимостью
поездки на разных видах бензина.



#include<iostream>
using namespace std;
int main()
{
	setlocale(LC_ALL, "rus");
	float rasstoyanie, rashod, benz1, benz2, benz3;
	cout << " Введите расстояние -> "; cin >> rasstoyanie;
	cout << " Расход бензина на 100 км -> "; cin >> rashod;
	cout << " Стоимость бензина А-92 -> "; cin >> benz1;
	cout << " Стоимость бензина А-95 -> "; cin >> benz2;
	cout << " Стоимость бензина А-95+ -> "; cin >> benz3;
	float benz1_cena = (benz1 * rashod) / (100 / rasstoyanie);
	float benz2_cena = (benz2 * rashod) / (100 / rasstoyanie);
	float benz3_cena = (benz3 * rashod) / (100 / rasstoyanie);
	cout << " Cравнительная таблица со стоимостью: \n\n" 
		<< "\t" << "На бензине А-92\t\t" << int(benz1_cena) << " грн " << int((benz1_cena - int(benz1_cena)) * 100) << " коп\n\n"
		<< "\t" << "На бензине А-95\t\t" << int(benz2_cena) << " грн " << int((benz2_cena - int(benz2_cena)) * 100) << " коп\n\n"
		<< "\t" << "На бензине А-95+\t" << int(benz3_cena) << " грн " << int((benz3_cena - int(benz3_cena)) * 100) << " коп\n\n";
	system("pause");
}





Задание 1. Пользователь вводит с клавиатуры время
в секундах, прошедшее с начала дня. Вывести на экран
текущее время в часах, минутах и секундах. Посчитать,
сколько часов, минут и секунд осталось до полуночи.



#include<iostream>
using namespace std;
int main() 
{
	setlocale(LC_ALL, "rus");
	int time;
	cout << " Расчет оставшегося времени до полуночи:\n";
	cout << " Введите время в секундах, прошедшее с начала дня -> "; cin >> time;
	cout << " Текущее время: " << time / 3600 << " часов " << time % 3600 / 60 << " минут " << time % 60 << " секунд.\n";
	int ostatok = (3600 * 24) - time;
	cout << " До полуночи осталось: "  << ostatok / 3600 << " часов " << ostatok % 3600 / 60 << " минут " << ostatok % 60 << " секунд.\n\n";
	system("pause");
}



Задание 2. Пользователь вводит с клавиатуры время
в секундах, прошедшее с начала рабочего дня. Посчитать,
сколько целых часов ему осталось сидеть на работе, если
рабочий день — 8 часов.





#include<iostream>
using namespace std;
int main()
{
	setlocale(LC_ALL, "rus");
	int time;
	cout << " Введите время в секундах, прошедшее с начала рабочего дня -> "; cin >> time;
	int rab_day = 8 * 3600;
	cout << " Осталось сидеть: " << (rab_day - time) / 3600 << " целых часов.\n\n";
	system("pause");
}



Задание 1. Пользователь вводит с клавиатуры время
в секундах, прошедшее с начала дня. Вывести на экран
текущее время в часах, минутах и секундах. Посчитать,
сколько часов, минут и секунд осталось до полуночи.


#include<iostream>
using namespace std;
int main() 
{
	setlocale(LC_ALL, "rus");
	int time;
	cout << " Расчет оставшегося времени до полуночи:\n";
	cout << " Введите время в секундах, прошедшее с начала дня -> "; cin >> time;
	cout << " Текущее время: " << time / 3600 << " часов " << time % 3600 / 60 << " минут " << time % 60 << " секунд.\n";
	int ostatok = (3600 * 24) - time;
	cout << " До полуночи осталось: "  << ostatok / 3600 << " часов " << ostatok % 3600 / 60 << " минут " << ostatok % 60 << " секунд.\n\n";
	system("pause");
}



Задание 2. Пользователь вводит с клавиатуры диаметр
окружности. Посчитать площадь и периметр окружности.





#include<iostream>
using namespace std;
int main() 
{
	setlocale(LC_ALL, "rus");
	float diameter;
	cout << " Введите диаметр окружности -> "; cin >> diameter;
	cout << " Площадь окружности: " << (3.14 * diameter * diameter) / 4 << " см.кв.\n";
	cout << " Периметр окружности: " << 3.14 * diameter << " см\n\n";
	system("pause");
}



Задание 1. Пользователь вводит с клавиатуры два числа.
Посчитать их сумму, произведение и среднее арифметическое.



#include<iostream>
using namespace std;
int main() 
{
	setlocale(LC_ALL, "rus");
	float a, b;
	cout << " Введите первое число -> "; cin >> a;
	cout << " Введите второе число -> "; cin >> b;
	cout << " Сумма: " << a + b << " \n";
	cout << " Произведение : " << a * b << " \n";
	cout << " Среднее арифметическое: " << (a + b) / 2 << " \n\n";
	system("pause");
}




Задание 2. Пользователь вводит с клавиатуры три числа.
Посчитать их сумму, произведение и среднее арифметическое.


#include<iostream>
using namespace std;
int main() 
{
	setlocale(LC_ALL, "rus");
	float a, b, c;
	cout << " Введите первое число -> "; cin >> a;
	cout << " Введите второе число -> "; cin >> b;
	cout << " Введите третее число -> "; cin >> c;
	cout << " Сумма: " << a + b + c << " \n";
	cout << " Произведение : " << a * b * c << " \n";
	cout << " Среднее арифметическое: " << (a + b + c) / 3 << " \n\n";
	system("pause");
}



Задание 3. Пользователь вводит с клавиатуры стоимость
одного ноутбука, их количество и процент скидки. Посчитать общую сумму заказа.



#include<iostream>
using namespace std;
int main() 
{
	setlocale(LC_ALL, "rus");
	float laptop$, laptop_sht, procent;
	cout << " Введите стоимость одного ноутбука -> "; cin >> laptop$;
	cout << " Введите кол-во ноутбуков -> "; cin >> laptop_sht;
	cout << " Введите процент скидки -> "; cin >> procent;
	float skidka = laptop$ * (procent / 100);
	cout << " Общая сумма заказа: " << (laptop$ - skidka) * laptop_sht << " грн.\n\n";
	system("pause");
}



Задание 4. Зарплата менеджера — 100$ + 5% от продаж.
Пользователь вводит с клавиатуры общую сумму сделок
менеджера за месяц. Посчитать итоговую зарплату менеджера.



#include<iostream>
using namespace std;
int main() 
{
	setlocale(LC_ALL, "rus");
	float summa;
	cout << " Введите общую сумму сделок -> "; cin >> summa;
	cout << " Итоговая зарплата менеджера: " << (summa * 0.05) + 100 << " дол.\n\n";
	system("pause");
}




Задание 5. Пользователь вводит с клавиатуры объем
одного фильма в гигабайтах. Посчитать, сколько дискет
понадобится пользователю для переноса фильма от друга
к себе домой.




#include<iostream>
using namespace std;
int main() 
{
	setlocale(LC_ALL, "rus");
	float one_film;
	cout << " Введите объем одного фильма в гигабайтах -> "; cin >> one_film;
	int kol_vo_disket = (one_film * 1024*1024) / 1440;
	cout << " Понадобится дискет: " << kol_vo_disket + bool(int(one_film * 1024 * 1024)%1440) << " шт.\n\n";
	system("pause");
}



Задание 6. Пользователь вводит с клавиатуры размер одного фильма в гигабайтах и скорость интернет-соединения в 
битах в секунду. Посчитать, за сколько часов, минут и секунд скачается фильм.



#include<iostream>
using namespace std;
int main()
{
	setlocale(LC_ALL, "rus");
	float one_film, speed;
	float film_bits = 8590e+6;
	cout << " Введите размер одного фильма в гигабайтах -> "; cin >> one_film;
	cout << " Введите скорость интернет-соединения в битах в секунду -> "; cin >> speed;
	int time = one_film / speed * film_bits;
	cout << " Фильм скачается через: " << time / 3600 << " часов " << time % 3600 / 60 << " минут " << time % 60 << " секунд.\n\n";
	system("pause");
}




1.	Написать программу вычисления площади прямоугольника. Ниже приведен рекомендуемый 
вид экрана во время выполнения программы Введите исходные данные:
Длина (см) -> 9
Ширина (см) -> 7.5
Площадь параллелограмма: 67.50 кв.см.


#include<iostream>
using namespace std;
int main() {
	setlocale(LC_ALL, "rus");
	float a, b;
	cout << "Вычисление площади прямоугольника.\n";
	cout << "Введите длину прямоугольника (см) -> "; cin >> a;
	cout << "Введите ширину прямоугольника (см) -> "; cin >> b;
	cout << "Площадь прямоугольника: " << a * b << " кв.см.\n\n";
	system("pause");
}





2.Написать программу вычисления объема параллелепипеда. Ниже приведен рекомендуемый 
вид экрана во время выполнения программы Введите исходные данные:
Длина (см) -> 9
Ширина (см) -> 7.5
Высота (см) -> 5
Объем: 337.50 куб.см.




#include<iostream>
using namespace std;
int main() {
	setlocale(LC_ALL, "rus");
	float a, b, h;
	cout << "Вычисление объема прямоугольного паралелипипеда.\n";
	cout << "Введите длину паралелипипеда (см) -> "; cin >> a;
	cout << "Введите ширину паралелипипеда (см) -> "; cin >> b;
	cout << "Введите высоту паралелипипеда (см) -> "; cin >> h;
	cout << "Объем паралелипипеда: " << a * b * h << " куб.см.\n\n";
	system("pause");
}



3.Написать программу вычисления площади поверхности параллелепипеда. Ниже приведен
 рекомендуемый вид экрана во время выполнения программы 
Введите исходные данные:
Длина (см) -> 9
Ширина (см) -> 7.5
Высота (см) -> 5
Площадь поверхности: 90.00 кв.см.


#include<iostream>
using namespace std;
int main() {
	setlocale(LC_ALL, "rus");
	float a, b, h;
	cout << "Вычисление площади поверхности параллелепипеда.\n";
	cout << "Введите длину параллелепипеда -> "; cin >> a;
	cout << "Введите ширину параллелепипеда -> "; cin >> b;
	cout << "Введите высоту параллелепипеда -> "; cin >> h;
	cout << "площади поверхности параллелепипеда: " << 2 * (h*b + b*a + h*a) << " кв.см.\n\n";
	system("pause");
}




4.Написать программу вычисления объема куба. Ниже приведен рекомендуемый
 вид экрана во время выполнения программы
Введите длину ребра (см) и нажмите клавиигу <Enter>
-> 9.5
Объем куба: 857.38 куб.см.



#include<iostream>
using namespace std;
int main() {
	setlocale(LC_ALL, "rus");
	float a;
	cout << "Вычисление объема куба.\n";
	cout << "Введите длину ребра (см) и нажмите клавишу Enter -> "; cin >> a;
	cout << "Oбъем куба: " << a * a * a << " куб.см.\n\n";
	system("pause");
}




5.Написать программу вычисления объема цилиндра. Ниже приведен рекомендуемый вид экрана во время выполнения программы
Введите исходные данные:
радиус основания (см) -> 5
высота иллиндра (см) -> 10
Объем цилиндра 1570.80 см. куб.



#include<iostream>
using namespace std;
int main() {
	setlocale(LC_ALL, "rus");
	float r, h;
	cout << "Введите исходные данные:\n";
	cout << "Радиус основания (см) -> "; cin >> r;
	cout << "Высота цилиндра (см) -> "; cin >> h;
	cout << "Объем цилиндра: " << 3.14 * r * r * h << " куб.см.\n\n";
	system("pause");
}




6.Написать программу вычисления стоимости покупки, состоящей из нескольких тетрадей и карандашей. Ниже приведен рекомендуемый вид экрана во время выполнения программы 
Введите исходные данные:
Цена тетради (руб.) -> 2.75
Количество тетрадей -> 5
Цена карандаша (руб.) -> 0.85
Количество карандашей -> 2
Стоимость покупки: 15.45 руб.



#include<iostream>
using namespace std;
int main() {
	setlocale(LC_ALL, "rus");
	float tetr, tetr$, pencil, pencil$;
	cout << "Введите исходные данные:\n";
	cout << "Цена тетради (руб.) -> "; cin >> tetr$;
	cout << "Количество тетрадей -> "; cin >> tetr;
	cout << "Цена карандаша (руб.) -> "; cin >> pencil$;
	cout << "Количество карандашей -> "; cin >> pencil;
	cout << "Стоимость покупки:  " << (tetr$ * tetr) + (pencil$ * pencil) << " руб.\n\n";
	system("pause");
}




7.Написать программу вычисления стоимости покупки, состоящей из нескольких тетрадей и такого
 же количества обложек к ним. Ниже приведен рекомендуемый вид экрана во время выполнения программы 
Введите исходные данные:
Цена тетради (руб.) -> 2.75
Цена обложки (руб.) -> 0.5
Количество комплектов (шт.) -> 7
Стоимость покупки: 22.75 руб.




#include<iostream>
using namespace std;
int main() {
	setlocale(LC_ALL, "rus");
	float tetr$, tetr_obl, full;
	cout << "Введите исходные данные:\n";
	cout << "Цена тетради (руб.) -> "; cin >> tetr$;
	cout << "Цена обложки (руб.)  -> "; cin >> tetr_obl;
	cout << "Количество комплектов (шт.) -> "; cin >> full;
	cout << "Стоимость покупки:  " << (tetr$ + tetr_obl) * full << " руб.\n\n";
	system("pause");
}




8.Написать программу вычисления стоимости некоторого количества (по весу) яблок. Ниже приведен 
рекомендуемый вид экрана во время выполнения программы 
Введите исходные данные:
Цена одного килограмма яблок (руб.) -> 8.5
Вес яблок (кг) -> 2.3
Стоимость покупки: 19.55 руб.




#include<iostream>
using namespace std;
int main() {
	setlocale(LC_ALL, "rus");
	float apple_kg, apple$;
	cout << "Введите исходные данные:\n";
	cout << "Цена одного килограмма яблок (руб.) -> "; cin >> apple$;
	cout << "Вес яблок (кг) -> "; cin >> apple_kg;
	cout << "Стоимость покупки:  " << apple_kg * apple$ << " руб.\n\n";
	system("pause");
}



9.Написать программу вычисления площади треугольника, если известна длина основания и высоты. Ниже 
приведен рекомендуемый вид экрана во время выполнения программы 
Введите исходные данные:
Основание (см) -> 8.5
Высота (см) -> 10
Площадь треугольника 42.50 кв.см.




#include<iostream>
using namespace std;
int main() {
	setlocale(LC_ALL, "rus");
	float a, h;
	cout << "Введите исходные данные:\n";
	cout << "Основание (см) -> "; cin >> a;
	cout << "Высота (см) -> "; cin >> h;
	cout << "Площадь треугольника:  " << (a * h) / 2 << " кв.см.\n\n";
	system("pause");
}





10.Написать программу вычисления расстояния между населенными пунктами, изображенными на карте. Ниже 
приведен рекомендуемый вид экрана во время выполнения программы 
Введите исходные данные:
Масштаб карты (количество километров в одном сантиметре) -> 120
Расстояние между точками, изображающР1ми населенные пункты
(см) -> 3.5
Расстояние между населенными пунктами 420 км.




#include<iostream>
using namespace std;
int main() {
	setlocale(LC_ALL, "rus");
	float masshtab, rasstoyanie;
	cout << "Введите исходные данные:\n";
	cout << "Масштаб карты (количество километров в одном сантиметре) -> "; cin >> masshtab;
	cout << "Расстояние между точками, изображающbми населенные пункты "
		"(см) -> "; cin >> rasstoyanie;
	cout << "Расстояние между населенными пунктами:  " << masshtab * rasstoyanie << " км\n\n";
	system("pause");
}




11.Написать программу вычисления объема цилиндра. Ниже приведен рекомендуемый вид экрана во время
 выполнения программы Введите исходные данные:
Радиус основания (см) -> 5.5
Высота цилиндра (см) -> 7
Объем цилиндра 665.23 см.куб.



#include<iostream>
using namespace std;
int main() {
	setlocale(LC_ALL, "rus");
	float r, h;
	cout << "Введите исходные данные:\n";
	cout << "Радиус основания (см) -> "; cin >> r;
	cout << "Высота цилиндра (см) -> "; cin >> h;
	cout << "Объем цилиндра: " << 3.14 * r * r * h << " куб.см.\n\n";
	system("pause");
}



12.Написать программу вычисления площади поверхности цилиндра. Ниже приведен рекомендуемый вид 
экрана во время выполнения программы Введите исходные данные:
Радиус основания (см) ~> 5.5
Высота цилиндра (см) -> 7
Площадь поверхности цилиндра: 431.97 кв.см.




#include<iostream>
using namespace std;
int main() {
	setlocale(LC_ALL, "rus");
	float r, h;
	cout << "Введите исходные данные:\n";
	cout << "Радиус основания (см) -> "; cin >> r;
	cout << "Высота цилиндра (см) -> "; cin >> h;
	cout << "Площадь поверхности цилиндра: " << (2 * 3.14 * r * h) + (2 * 3.14 * r * r) << " кв.см.\n\n";
	system("pause");
}




13.Написать программу вычисления объема параллелепипеда. Ниже приведен рекомендуемый вид экрана во время 
выполнения программы 
Введите в одной строке длину, ширину и высоту параллелепипеда
(в сантиметрах).
Числа разделяйте пробелами.
После ввода последнего числа нажмите <Enter>.
-> 7.5 2.5 3
Объем параллелепипеда 56.25 см.куб.




#include<iostream>
using namespace std;
int main() {
	setlocale(LC_ALL, "rus");
	float a, b, h;
	cout << "Введите в одной строке длину, ширину и высоту параллелепипеда (в сантиметрах).\n" 
		"Числа разделяйте пробелами.После ввода последнего числа\n"
		"нажмите <Enter>. -> "; cin >> a; cin >> b; cin >> h;
	cout << "Объем параллелепипеда: " << a * b * h << " см.куб.\n\n";
	system("pause");
}




14.Написать программу пересчета расстояния из верст в километры (1 верста — это 1066,8 м). Ниже приведен 
рекомендуемый вид экрана во время выполнения программы 
Введите расстояние в верстах -> 100
100 верст — это 106.68 км





#include<iostream>
using namespace std;
int main() {
	setlocale(LC_ALL, "rus");
	float v;
	cout << "Введите исходные данные:\n";
	cout << "Введите расстояние в верстах -> "; cin >> v;
	cout << v << " верст - это " << v * 1.0668 << " км\n\n";
	system("pause");
}




15.Написать программу пересчета веса из фунтов в килограммы (1 фунт — это 405,9 грамма). Ниже приведен
 рекомендуемый вид экрана во время выполнения программы 
Введите вес в фунтах -> 5
5 фунтов — это 2.05 кг




#include<iostream>
using namespace std;
int main() {
	setlocale(LC_ALL, "rus");
	float f;
	cout << "Введите исходные данные:\n";
	cout << "Введите вес в фунтах -> "; cin >> f;
	cout << f << " фунтов - это " << f * 409.5 / 1000 << " кг\n\n";
	system("pause");
}



16.Написать программу вычисления величины дохода по вкладу. Процентная ставка (% годовых) и время хранения
 (дней) задаются во время работы программы. Ниже приведен рекомендуемый вид экрана во время выполнения 
программы 
Введите исходные данные:
Величина вклада (руб.) -> 2500
Срок вклада (дней) -> 30
Процентная ставка (годовых) -> 20
Доход: 41.10 руб.
Сумма по окончании срока вклада: 2541.10 руб.



#include<iostream>
using namespace std;
int main() {
	setlocale(LC_ALL, "rus");
	float day, rub, procent;
	cout << "Введите исходные данные:\n";
	cout << "Величина вклада (руб.) -> "; cin >> rub;
	cout << "Срок вклада (дней) -> "; cin >> day;
	cout << "Процентная ставка (годовых) -> "; cin >> procent;
	float result = ((procent / 100 * rub) / 365) * day;
	cout << "Доход: " << result << " руб.\n";
	cout << "Сумма по окончании срока вклада: " << rub + result << " руб.\n\n";
	system("pause");
}




Задание 1. Пользователь вводит с клавиатуры целое шестизначное число. Написать программу, которая определяет,
является ли введенное число — счастливым (Счастливым
считается шестизначное число, у которого сумма первых
3 цифр равна сумме вторых трех цифр). Если пользователь
ввел не шестизначное число — сообщение об ошибке. 



#include<iostream>
using namespace std;
int main()
{
	setlocale(LC_ALL, "rus");
	int happy_number;
	cout << " Введите целое шестизначное число -> "; cin >> happy_number;
	int first = happy_number / 100000;
	int second = happy_number / 10000 % 10;
	int third = happy_number / 1000 % 10;
	int fourth = happy_number / 100 % 10;
	int fifth = happy_number / 10 % 10;
	int sixth = happy_number % 10;
	if (happy_number <= 99999 || happy_number > 999999)
	{
		cout << " Ошибка, число не 6-значное\n";
	}
	else if (first + second + third == fourth + fifth + sixth)
	{
		cout << " Bведенное число — СЧАСТЛИВОЕ\n";
	}
	else
	{
		cout << " Bведенное число — не счастливое\n";
	}
	system("pause");
}



Задание 2. Пользователь вводит четырехзначное число.
Необходимо поменять в этом числе 1 и 2 цифры, а также
3 и 4 цифры. Если пользователь вводит не четырехзначное
число — вывести сообщение об ошибке



#include<iostream>
using namespace std;
int main()
{
	setlocale(LC_ALL, "rus");
	int number;
	cout << " Введите 4-значное число -> "; cin >> number;
	int first = number / 1000;
	int second = number / 100 % 10;
	int third = number / 10 % 10;
	int fourth = number % 10;
	if (number <= 999 || number > 9999)
	{
		cout << " Ошибка, число не 4-значное\n";
	}
	else
	{
		cout << " " << second << first << fourth << third << "\n";
	}
	system("pause");
}




Задание 3. Пользователь вводит с клавиатуры 7 целых
чисел. Напишите программу, которая определяет максимальное из этих 7 чисел (Подсказка — решение должно
быть простым).



#include<iostream>
using namespace std;
int main()
{
	setlocale(LC_ALL, "rus");
	int one, two, three, four, five, six, seven;
	cout << " Введите через пробел 7 целых чисел и нажмите энтер -> ";
	cin >> one >> two >> three >> four >> five >> six >> seven;
	if (one >= two && one >= three && one >= four && one >= five && one >= six && one >= seven)
	{
		cout << " Число " << one << " максимальное из этих чисел\n";
	}
	else if (two >= three && two >= four && two >= five && two >= six && two >= seven)
	{
		cout << " Число " << two << " максимальное из этих чисел\n";
	}
	else if (three >= four && three >= five && three >= six && three >= seven)
	{
		cout << " Число " << three << " максимальное из этих чисел\n";
	}
	else if (four >= five && four >= six && four >= seven)
	{
		cout << " Число " << four << " максимальное из этих чисел\n";
	}
	else if (five >= six && five >= seven)
	{
		cout << " Число " << five << " максимальное из этих чисел\n";
	}
	else if (six >= seven)
	{
		cout << " Число " << six << " максимальное из этих чисел\n";
	}
	else
	{
		cout << " Число " << seven << " максимальное из этих чисел\n";
	}
	system("pause");
}



Задание 4. Грузовой самолет должен пролететь с грузом
из пункта А в пункт С через пункт В. Емкость бака для
топлива у самолета — 300 литров. Потребление топлива
на 1 км в зависимости от веса груза у самолета следующее:
■ до 500 кг — 1 литров/км;
■ до 1000 кг — 4 литров/км;
■ до 1500 кг — 7 литров/км;
■ до 2000 кг — 9 литров/км;
■ более 2000 кг — самолет не поднимает.
Пользователь вводит расстояние между пунктами
А и В, и расстояние между пунктами В и С, а также вес
груза. Программа должна рассчитать какое минимальное
количество топлива необходимо для дозаправки самолету
в пункте В, чтобы долететь из пункта А в пункт С. В случае невозможности преодолеть любое из расстояний —
программа должна вывести сообщение о невозможности
полета по введенному маршруту.



#include<iostream>
using namespace std;
int main()
{
	setlocale(LC_ALL, "rus");
	float a_b, b_c, kg;
	int bak = 300;
	cout << " Введите расстояние между пунктами А и В (км) -> "; cin >> a_b; 
	cout << " Введите расстояние между пунктами В и С (км) -> "; cin >> b_c; 
	cout << " Введите вес груза (кг) -> "; cin >> kg;
	if (kg < 500 && a_b <= bak && b_c <= bak)
	{
		if (bak - a_b >= b_c)
		{
			cout << " Нет необходимости дозаправляться\n";
		}
		else
		{
			cout << " Необходимо дозаправиться минимум на " << b_c - (bak - a_b) << " литров\n";
		}

	}
	else if (kg < 1000 && a_b <= bak / 4 && b_c <= bak / 4)
	{
		if ((bak - (a_b * 4)) >= (b_c * 4))
		{
			cout << " Нет необходимости дозаправляться\n";
		}
		else
		{
			cout << " Необходимо дозаправиться минимум на " << (b_c * 4) - (bak - (a_b * 4)) << " литров\n";
		}

	}
	else if (kg < 1500 && a_b <= bak / 7 && b_c <= bak / 7)
	{
		if ((bak - (a_b * 7)) >= (b_c * 7))
		{
			cout << " Нет необходимости дозаправляться\n";
		}
		else
		{
			cout << " Необходимо дозаправиться минимум на " << (b_c * 7) - (bak - (a_b * 7)) << " литров\n";
		}
	}
	else if (kg <= 2000 && a_b <= bak / 9 && b_c <= bak / 9)
	{
		if ((bak - (a_b * 9)) >= (b_c * 9))
		{
			cout << " Нет необходимости дозаправляться\n";
		}
		else
		{
			cout << " Необходимо дозаправиться минимум на " << (b_c * 9) - (bak - (a_b * 9)) << " литров\n";
		}
	}
	else
	{
		cout << " Невозможность полета\n";
	}
	system("pause");
}





Задание 1. Пользователь вводит две даты (день, месяц,
год в виде целых чисел). Необходимо определить и вывести количество дней между этими двумя датами. Для
расчетов учитывать високосные года, а также корректное
число дней в месяцах (март — 31, сентябрь — 30, февраль
невисокосного года — 28 и т.д.).




#include<iostream>
using namespace std;
int main()
{
	setlocale(LC_ALL, "rus");
	int days_1, months_1, yaer_1, days_2, months_2, yaer_2, days_in_months1, days_in_months2;
	cout << " Введите первую дату через пробел (день, месяц, год) -> "; 
	cin >> days_1 >> months_1 >> yaer_1;
	cout << " Введите вторую дату через пробел (день, месяц, год) -> "; 
	cin >> days_2 >> months_2 >> yaer_2;
	int days_in_years1 = (yaer_1 - 1) * 365 + (yaer_1 - 1) / 4 - (yaer_1 - 1) / 100 + (yaer_1 - 1) / 400;
	int days_in_years2 = (yaer_2 - 1) * 365 + (yaer_2 - 1) / 4 - (yaer_2 - 1) / 100 + (yaer_2 - 1) / 400;
	int on_31 = 31; //jan, mar, may, jul, aug, oct, dec
	int on_30 = 30; //apr, jun, sep, nov
	if (months_1 == 1)
	{
		days_in_months1 = days_1;
	}
	else if (months_1 == 2)
	{
		days_in_months1 = on_31 + days_1;
	}
	else if (months_1 == 3)
	{
		days_in_months1 = on_31 + 28 + days_1;
	}
	else if (months_1 == 4)
	{
		days_in_months1 = on_31 * 2 + 28 + days_1;
	}
	else if (months_1 == 5)
	{
		days_in_months1 = on_31 * 2 + 28 + on_30 + days_1;
	}
	else if (months_1 == 6)
	{
		days_in_months1 = on_31 * 3 + 28 + on_30 + days_1;
	}
	else if (months_1 == 7)
	{
		days_in_months1 = on_31 * 3 + 28 + on_30 * 2 + days_1;
	}
	else if (months_1 == 8)
	{
		days_in_months1 = on_31 * 4 + 28 + on_30 * 2 + days_1;
	}
	else if (months_1 == 9)
	{
		days_in_months1 = on_31 * 5 + 28 + on_30 * 2 + days_1;
	}
	else if (months_1 == 10)
	{
		days_in_months1 = on_31 * 5 + 28 + on_30 * 3 + days_1;
	}
	else if (months_1 == 11)
	{
		days_in_months1 = on_31 * 6 + 28 + on_30 * 3 + days_1;
	}
	else if (months_1 == 12)
	{
		days_in_months1 = on_31 * 6 + 28 + on_30 * 4 + days_1;
	}
	// месяца для второй даты
	if (months_2 == 1)
	{
		days_in_months2 = days_2;
	}
	else if (months_2 == 2)
	{
		days_in_months2 = on_31 + days_2;
	}
	else if (months_2 == 3)
	{
		days_in_months2 = on_31 + 28 + days_2;
	}
	else if (months_2 == 4)
	{
		days_in_months2 = on_31 * 2 + 28 + days_2;
	}
	else if (months_2 == 5)
	{
		days_in_months2 = on_31 * 2 + 28 + on_30 + days_2;
	}
	else if (months_2 == 6)
	{
		days_in_months2 = on_31 * 3 + 28 + on_30 + days_2;
	}
	else if (months_2 == 7)
	{
		days_in_months2 = on_31 * 3 + 28 + on_30 * 2 + days_2;
	}
	else if (months_2 == 8)
	{
		days_in_months2 = on_31 * 4 + 28 + on_30 * 2 + days_2;
	}
	else if (months_2 == 9)
	{
		days_in_months2 = on_31 * 5 + 28 + on_30 * 2 + days_2;
	}
	else if (months_2 == 10)
	{
		days_in_months2 = on_31 * 5 + 28 + on_30 * 3 + days_2;
	}
	else if (months_2 == 11)
	{
		days_in_months2 = on_31 * 6 + 28 + on_30 * 3 + days_2;
	}
	else if (months_2 == 12)
	{
		days_in_months2 = on_31 * 6 + 28 + on_30 * 4 + days_2;
	}
	int result = (days_in_months2 + days_in_years2) - (days_in_months1 + days_in_years1);
		if (result < 0)
		{
			result = -result;
		}
	cout << " Количество дней между двумя датами - " << result << "\n";
	system("pause");
}





Задание 2. Зарплата менеджера составляет 200$ + процент от продаж, продажи 
до 500$ — 3%, 
от 500 до 1000 — 5%,
свыше 1000 — 8%. 
Пользователь вводит с клавиатуры
уровень продаж для трех менеджеров. Определить их
зарплату, определить лучшего менеджера, начислить ему
премию 200$, вывести итоги на экран.



#include<iostream>
using namespace std;
int main()
{
	setlocale(LC_ALL, "rus");
	int summa_1, summa_2, summa_3, manager_1, manager_2, manager_3, procent_1, procent_2, procent_3;
	cout << " Введите сумму продаж первого менеджера -> "; cin >> summa_1;
	cout << " Введите сумму продаж второго менеджера -> "; cin >> summa_2;
	cout << " Введите сумму продаж третьего менеджера -> "; cin >> summa_3;
	if (summa_1 < 500)
	{
		procent_1 = summa_1 * 0.03;
	}
	else if (summa_1 >= 500 && summa_1 < 1000)
	{
		procent_1 = summa_1 * 0.05;
	}
	else if (summa_1 >= 1000)
	{
		procent_1 = summa_1 * 0.08;
	}
	manager_1 = 200 + procent_1;
	
	// manager 2
	if (summa_2 < 500)
	{
		procent_2 = summa_2 * 0.03;
	}
	else if (summa_2 >= 500 && summa_2 < 1000)
	{
		procent_2 = summa_2 * 0.05;
	}
	else if (summa_2 >= 1000)
	{
		procent_2 = summa_2 * 0.08;
	}
	manager_2 = 200 + procent_2;
	
	// manager 3
	if (summa_3 < 500)
	{
		procent_3 = summa_3 * 0.03;
	}
	else if (summa_3 >= 500 && summa_3 < 1000)
	{
		procent_3 = summa_3 * 0.05;
	}
	else if (summa_3 >= 1000)
	{
		procent_3 = summa_3 * 0.08;
	}
	manager_3 = 200 + procent_3;

	// best of the best
	if (manager_1 > manager_2 && manager_1 > manager_3)
	{
		manager_1 += 200;
		cout << " Менеджер №1 - лучший менеджер и ему начисленна премия 200$. В итоге его "
			"зарплата составила: " << manager_1 << "$\n менеджер №2 получил " << manager_2 <<
			"$, менеджер №3 - " << manager_3 << "$\n";
	}
	else if (manager_2 > manager_1 && manager_2 > manager_3)
	{
		manager_2 += 200;
		cout << " Менеджер №2 - лучший менеджер и ему начисленна премия 200$. В итоге его "
			"зарплата составила: " << manager_2 << "$\n менеджер №1 получил " << manager_1 <<
			"$, менеджер №3 - " << manager_3 << "$\n";
	}
	else if (manager_3 > manager_1 && manager_3 > manager_2)
	{
		manager_3 += 200;
		cout << " Менеджер №3 - лучший менеджер и ему начисленна премия 200$. В итоге его "
			"зарплата составила: " << manager_3 << "$\n менеджер №1 получил " << manager_1 <<
			"$, менеджер №2 - " << manager_2 << "$\n";
	}
	else {
		cout << " Премию не получил никто. Менеджер №1 получил " << manager_1 << "$, менеджер №2 получил " 
			<< manager_2 << "$, менеджер №3 - " << manager_3 << "$\n"; 
	}
	system("pause");
}


Задание 1. Пользователь вводит число. Определить, является ли оно четным.



#include<iostream>
using namespace std;
int main()
{
	setlocale(LC_ALL, "rus");
	int number;
	cout << " Введите число -> "; cin >> number;
	if (number % 2 == 0) 
	{
		cout << " Число " << number << " четное\n";
	}
	else
	{
		cout << " Число " << number << " не четное\n";
	}
	system("pause");
}



Задание 2. Пользователь вводит два числа. Вывести на
экран меньшее из этих чисел. 



#include<iostream>
using namespace std;
int main()
{
	setlocale(LC_ALL, "rus");
	int number1, number2;
	cout << " Введите первое число -> "; cin >> number1;
	cout << " Введите второе число -> "; cin >> number2;
	if (number1 > number2)
	{
		cout << " Число " << number2 << " меньше\n";
	}
	else
	{
		cout << " Число " << number1 << " меньше\n";
	}
	system("pause");
}



Задание 3. Пользователь вводит число. Определить, положительное это число, отрицательное или равно нулю



#include<iostream>
using namespace std;
int main()
{
	setlocale(LC_ALL, "rus");
	int number;
	cout << " Введите число -> "; cin >> number;
	if (number > 0)
	{
		cout << " Число " << number << " больше нуля\n";
	}
	if (number < 0)
	{
		cout << " Число " << number << " меньше нуля\n";
	}
	if (number == 0)
	{
		cout << " Число " << number << " равно нулю\n";
	}
	system("pause");
}



Задание 4. Пользователь вводит два числа. Определить,
равны ли эти числа, и если нет, вывести их на экран в порядке возрастания.




#include<iostream>
using namespace std;
int main()
{
	setlocale(LC_ALL, "rus");
	int number1, number2;
	cout << " Введите первое число -> "; cin >> number1;
	cout << " Введите второе число -> "; cin >> number2;
	if (number1 == number2)
	{
		cout << " Числа равны\n";
	}
	if (number1 > number2)
	{
		cout << " " << number2 << ", " << number1 << "\n";
	}
	if (number1 < number2)
	{
		cout << " " << number1 << ", " << number2 << "\n";
	}
	system("pause");
}



Задание 1. Пользователь с клавиатуры вводит 5 оценок
студента. Определить, допущен ли студент к экзамену.
Студент получает допуск, если его средний балл 4 балла
и выше.


#include<iostream>
using namespace std;
int main()
{
	setlocale(LC_ALL, "rus");
	int Mark1, Mark2, Mark3, Mark4, Mark5;
	cout << " Введите пять оценок через пробел и нажмите энтер -> "; 
	cin >> Mark1 >> Mark2 >> Mark3 >> Mark4 >> Mark5;
	int average = (Mark1 + Mark2 + Mark3 + Mark4 + Mark5) / 5;
	if (average >= 4)
	{
		cout << " Студент допущен к экзамену\n";
	}
	else
	{
		cout << " Студент не допущен к экзамену\n";
	}
	system("pause");
}




Задание 2. Пользователь вводит с клавиатуры число. Если
оно четное, умножить его на три, иначе — поделить на
два. Результат вывести на экран.



#include<iostream>
using namespace std;
int main()
{
	setlocale(LC_ALL, "rus");
	int number;
	cout << " Введите число -> "; cin >> number;
	if (number % 2 == 0)
	{
		cout << " " << number * 3 << "\n";
	}
	else
	{
		cout << " " << number / 2.0 << "\n";
	}
	system("pause");
}



Задание 3. Написать программу-калькулятор. Пользователь
вводит два числа и выбирает арифметическое действие.
Вывести на экран результат.


#include<iostream>
using namespace std;
int main()
{
	setlocale(LC_ALL, "rus");
	float number1, number2;
	char operation;
	cout << " Введите первое число -> "; cin >> number1;
	cout << " Введите второе число -> "; cin >> number2;
	cout << " Выберите действие, которое необходимо выполнить с числами:\n"
		" 1) Что бы сложить числа введите букву q\n"
		" 2) Что бы вычесть от первого второе введите букву w\n"
		" 3) Что бы перемножить числа введите букву f\n"
		" 4) Что бы разделить первое на второе введите букву z\n ";
	cin >> operation;
	if (operation == 'q')
	{
		cout << " Ответ: " << number1 + number2 << "\n";
	}
	else if (operation == 'w')
	{
		cout << " Ответ: " << number1 - number2 << "\n";
	}
	else if (operation == 'f')
	{
		cout << " Ответ: " << number1 * number2 << "\n";
	}
	else if (operation == 'z')
	{
		cout << " Ответ: " << number1 / number2 << "\n";
	}
	else
	{
		cout << " Опаньки, похоже Вы не верно ввели букву\n";
	}
	system("pause");
}

7) Вы ввели трехзначное число. Затем ввели любую цифру. Составьте программу, определяющую, есть ли в этом числе данная цифра. (3балла) 


#include<iostream>
using namespace std;
int main()
{
	setlocale(LC_ALL, "rus");
	int number, any;
	cout << " Введите трехзначное число -> "; cin >> number;
	cout << " Введите любую цифру -> "; cin >> any;
	int first = number / 100;
	int second = number / 10 % 10;
	int third = number % 10;
	if (first == any || second == any || third == any)
	{
		cout << "Эта цифра есть в числе\n";
	}
	else
	{
		cout << "Этой цифры нет в числе\n";
	}
	system("pause");
}


18) Составьте программу, которая по введенному вами K – числу грибов печатает фразу «Мы нашли в лесу 
K грибов», причем согласовывает окончание слова «гриб» с числом K. Количество грибов может быть
 любым целым числом: 1, 3, 34, 127 и т.д. Окончание фразы определяется значением последней цифры. (2балла) 


#include<iostream>
using namespace std;
int main()
{
	setlocale(LC_ALL, "rus");
	int number, any;
	cout << " Введите число грибов -> "; cin >> number;
	/*cout << " Введите любую цифру -> "; cin >> any;
	int first = number / 100;
	int second = number / 10 % 10;
	int third = number % 10;*/
	if (number % 10 == 1 && number / 10 % 10 != 1)
	{
		cout << "Мы нашли в лесу " << number << " гриб\n";
	}
	else if ((number % 10 == 2 || number % 10 == 3 || number % 10 == 4) && number / 10 % 10 != 1)
	{
		cout << "Мы нашли в лесу " << number << " гриба\n";
	}
	else 
	{
		cout << "Мы нашли в лесу " << number << " грибов\n";
	}
	system("pause");
}


19) Составьте программу, которая для числа K (от 1 до 99), введенного вами, напечатает фразу «Мне K лет»,
 где K – введенное число, при этом в нужных случаях слово «лет» заменяя на «год» или «года». Например, при K=70 «Мне 70 лет», 
при K=15 «Мне 15 лет», при K=23 «Мне 23 года», при K=31 «Мне 31 год». (2балла) 



#include<iostream>
using namespace std;
int main()
{
	setlocale(LC_ALL, "rus");
	int number, any;
	cout << " Введите число от 1 до 99 -> "; cin >> number;
	/*cout << " Введите любую цифру -> "; cin >> any;
	int first = number / 100;
	int second = number / 10 % 10;
	int third = number % 10;*/
	if (number % 10 == 1 && number / 10 % 10 != 1)
	{
		cout << " Мне " << number << " год\n";
	}
	else if ((number % 10 == 2 || number % 10 == 3 || number % 10 == 4) && number / 10 % 10 != 1)
	{
		cout << "Мне " << number << " года\n";
	}
	else 
	{
		cout << "Мне " << number << " лет\n";
	}
	system("pause");
}


Задание 1. Пользователь вводит с клавиатуры символ.
Определить, какой это символ: Буква, цифра, знак препинания или другое.


#include<iostream>
using namespace std;
int main()
{
	setlocale(LC_ALL, "rus");
	char symbol;
	cout << " Введите символ -> "; cin >> symbol;
	if (symbol >= 48 && symbol <= 57)
	{
		cout << " Ваш символ - цифра\n";
	}
	else if ((symbol >= 65 && symbol <= 90) || (symbol >= 97 && symbol <= 122)
		|| (symbol >= char(128) && symbol <= char(175)) || (symbol >= char(224) && symbol <= char(245)))
	{
		cout << " Ваш символ - буква\n";
	}
	else if (symbol == 33 || symbol == 44 || symbol == 46 || symbol == 58 || symbol == 59 || symbol == 63)
	{
		cout << " Ваш символ - знак препинания\n";
	}
	else if (symbol == 42 || symbol == 43 || symbol == 45 || symbol == 47 || symbol == 60 
		|| symbol == 61 || symbol == 62)
	{
		cout << " Ваш символ - математический оператор\n";
	}
	else
	{
		cout << " Ваш символ - один из наиболее редко используемых символов\n";
	}
	system("pause");



Задание 2. Написать программу подсчета стоимости разговора для разных мобильных операторов. Пользователь
вводит стоимость разговора и выбирает с какого на какой
оператор он звонит. Вывести стоимость на экран.



#include<iostream>
using namespace std;
int main()
{
	setlocale(LC_ALL, "rus");
	int minutes, my_network, your_network;
	cout << " Введите колличество минут -> "; cin >> minutes;
	cout << " Выберите с какого оператора Вы звоните:\n"
			" Лайф - нажмите 1; Водафон - нажмите 2; Киевстар - нажмите 3;\n ";
			cin >> my_network;
	cout << " Выберите на какой оператор Вы звоните:\n"
			" Лайф - нажмите 1; Водафон - нажмите 2; Киевстар - нажмите 3;\n ";
			cin >> your_network;
	if ((my_network == 1 && your_network == 1) || (my_network == 2 && your_network == 2)
				|| (my_network == 3 && your_network == 3))
	{
		cout << " Стоимость вашего разговора: 0 грн 0 коп\n";
	}
	//Лайф = 10 коп/мин
	//Водафон = 12 коп/мин
	//Киевстар = 15 коп/мин
	else if ((my_network == 1 && your_network == 2) || (my_network == 1 && your_network == 3))
	{
		cout << " Стоимость вашего разговора: " << (minutes * 10) / 60 << " грн " << (minutes * 10) % 60 << " коп\n";
	}
	else if ((my_network == 2 && your_network == 1) || (my_network == 2 && your_network == 3))
	{
		cout << " Стоимость вашего разговора: " << (minutes * 12) / 60 << " грн " << (minutes * 12) % 60 << " коп\n";
	}
	else if ((my_network == 3 && your_network == 1) || (my_network == 3 && your_network == 2))
	{
		cout << " Стоимость вашего разговора: " << (minutes * 15) / 60 << " грн " << (minutes * 15) % 60 << " коп\n";
	}
	else
	{
		cout << " Информация введена некорректно\n";
	}
	system("pause");
}



Задание 3. Вася работает программистом и получает 50$
за каждые 100 строк кода. За каждое третье опоздание
Васю штрафуют на 20$. Реализовать меню:
■ пользователь вводит желаемый доход Васи и количество опозданий, посчитать, сколько строк кода ему
надо написать;


#include<iostream>
using namespace std;
int main()
{
	setlocale(LC_ALL, "rus");
	int salary, delay, fine, result;
	cout << " Введите желаемый доход Васи -> "; cin >> salary;
	cout << " Введите количество опозданий Васи -> "; cin >> delay;
	fine = (delay / 3) * 20;//сумма штрафа
	result = ((salary + fine) / 50) + bool((salary + fine) % 50);
	cout << " Васе необходимо набрать " << result * 100 << " строк кода\n";
	system("pause");
}



Задание 3. Вася работает программистом и получает 50$
за каждые 100 строк кода. За каждое третье опоздание
Васю штрафуют на 20$. Реализовать меню:
■ пользователь вводит количество строк кода, написанное Васей и желаемый объем зарплаты. Посчитать,
сколько раз Вася может опоздать;



#include<iostream>
using namespace std;
int main()
{
	setlocale(LC_ALL, "rus");
	int quantity_str, salary, must_have_str, excess, excess_money, delay;
	cout << " Введите количество строк кода, написанное Васей -> "; cin >> quantity_str;
	cout << " Введите желаемый доход Васи -> "; cin >> salary;
	must_have_str = salary / 50 * 100;
	excess = quantity_str - must_have_str;// кол-во строк кода которые он набрал лишние
	excess_money = excess / 100 * 50;//кол-во денег за лишние строки кода
	delay = excess_money / 20 * 3;// кол-во возможных опозданий 
	(delay > 0) ? delay += 2 : delay = 0;
	if (quantity_str < must_have_str)
	{
		cout << " Недостаточно строк кода для желаемой зарплаты\n";
	}
	else if (quantity_str == must_have_str || delay == 0)
	{
		cout << " Васе нельзя опоздать ни разу\n";
	}
	else if (quantity_str >= must_have_str)
	{

		cout << " Вася может опоздать " << delay << " раз\n";
	}
	else
	{
		cout << " Данные введены некорректно\n";
	}
	system("pause");
}




Задание 3. Вася работает программистом и получает 50$
за каждые 100 строк кода. За каждое третье опоздание
Васю штрафуют на 20$. Реализовать меню:
■ пользователь вводит количество строк кода и количество опозданий, определить, сколько денег заплатят
Васе и заплатят ли вообще.



#include<iostream>
using namespace std;
int main()
{
	setlocale(LC_ALL, "rus");
	int quantity_str, delay, money, fine;
	cout << " Введите количество строк кода, написанное Васей -> "; cin >> quantity_str;
	cout << " Введите количество опозданий Васи -> "; cin >> delay;
	money = quantity_str * 50 / 100;// колво денег за строки
	fine = (delay / 3) * 20;//сумма штрафа
	if (quantity_str < 100 || money < 50 || money - fine <= 0)
	{
		cout << " Денег не заплатят\n";
	}
	else
	{
		cout << " Васе заплатят " << (money / 50 * 50) - fine << "$\n";

	}
	system("pause");
}


Задание 1. Написать программу, которая по выбору пользователя меняет цвет 
консольного приложения. Пользователь может выбрать цвет шрифта и цвет фона.



#include<iostream>
using namespace std;
int main()
{
	setlocale(LC_ALL, "rus");
	int color;
	cout << " Выберите цвет консольного приложения:\n"
		" 1) Цвет фона желтый и цвет текста светло-синий - нажмите 1\n"
		" 2) Цвет фона лиловый и цвет текста ярко-белый - нажмите 2\n"
		" 3) Цвет фона голубой и цвет текста светло-желтый - нажмите 3\n"
		" 4) Цвет фона белый  и цвет текста светло-красный - нажмите 4\n"
		" "; cin >> color;
	switch (color)
	{
	case 1: system("color 69");
		break;
	case 2: system("color 5F");
		break;
	case 3: system("color 3E");
		break;
	case 4: system("color 7C");
		break;
	default: cout << " Некорректно выбран цвет.\n";
		break;
	}
	system("pause");
}



Задание 2. Написать программу, которая по выбору пользователя возводит введенное 
им число в степень от нулевой до седьмой включительно.



#include<iostream>
using namespace std;
int main()
{
	setlocale(LC_ALL, "rus");
	int number, POW;
	cout << " Введите число -> "; cin >> number;
	cout << " Выберете, в какую степень возвести это число от 0 до 7 -> "; cin >> POW;
	switch (POW)
	{
	case 0: cout << " Ответ: 1\n";
		break;
	case 1: cout << " Ответ: " << number << "\n";
		break;
	case 2: cout << " Ответ: " << pow(number, 2) << "\n";
		break;
	case 3: cout << " Ответ: " << pow(number, 3) << "\n";
		break;
	case 4: cout << " Ответ: " << pow(number, 4) << "\n";
		break;
	case 5: cout << " Ответ: " << pow(number, 5) << "\n";
		break;
	case 6: cout << " Ответ: " << pow(number, 6) << "\n";
		break;
	case 7: cout << " Ответ: " << pow(number, 7) << "\n";
		break;
	default: cout << " Некорректно выбранa степень.\n";
		break;
	}
	system("pause");
}





12. Напишите программу, которая по дате определяет день недели, на который эта 
дата приходится. для вычисления дня недели воспользуйтесь формулой. 

#include<iostream>
using namespace std;
int main()
{
	setlocale(LC_ALL, "rus");
	int d, month, m, year, Y, c;
	cout << " Введите дату через пробел (в формате 11 04 2020) -> ";
	cin >> d >> month >> year;
	m = month - 2;
	if (m <= 0)
	{
		year--;
		m = m + 12;
	}
	Y = year % 100;
	c = year / 100;
	int result = (d + ((1/5) * (13 * m - 1)) + Y + (Y / 4) + (c / 4) - 2 * c + 777) % 7;
	switch (result) 
	{
	case 1: cout << " Дата выпадет на понедельник\n";
		break;
	case 2: cout << " Дата выпадет на вторник\n";
		break;
	case 3: cout << " Дата выпадет на среду\n";
		break;
	case 4: cout << " Дата выпадет на четверг\n";
		break;
	case 5: cout << " Дата выпадет на пятницу\n";
		break;
	case 6: cout << " Дата выпадет на субботу\n";
		break;
	case 0: cout << " Дата выпадет на воскресение\n";
		break;
	}
	system("pause");
}




11.  Написать программу, которая вычисляет дату следующего дня. 


#include<iostream>
using namespace std;
int main()
{
	setlocale(LC_ALL, "rus");
	int day, month, year;
	cout << " Введите дату через пробел (в формате 11 04 2020) -> ";
	cin >> day >> month >> year;
	if (day == 31 && month == 12)
	{
		year++;
		cout << " 01 01 " << year << "\n";
	}
	//on 31; //jan, mar, may, jul, aug, oct, dec
	//on 30; //apr, jun, sep, nov
	else if ((day == 31 && month == 1) || (day == 31 && month == 3) || (day == 30 && month == 4)
		|| (day == 31 && month == 5) || (day == 30 && month == 6) || (day == 31 && month == 7) ||
		(day == 31 && month == 8) || (day == 30 && month == 9) || (day == 31 && month == 10)
		|| (day == 30 && month == 11))
	{
		month++;
		if (month < 10)
		{
			cout << " 01 0" << month << " " << year << "\n";
		}
		else
		{
			cout << " 01 " << month << " " << year << "\n";
		}
	}
	else if (day == 28 && month == 2)
	{
		if ((1 - bool(year % 4)) * bool(year % 100) + (1 - bool(year % 400)))
		{
			day++;
			cout << day << " 0" << month << " " << year << "\n";
		}
		else
		{
			month++;
			cout << " 01 0" << month << " " << year << "\n";
		}
	}
	else if (day == 29 && month == 2)
	{
		if ((1 - bool(year % 4)) * bool(year % 100) + (1 - bool(year % 400)))
		{
			month++;
			cout << " 01 0" << month << " " << year << "\n";
		}
		else
		{
			cout << " Такого дня в этом году нет, поскольку год не высокосный.\n";
		}
	}
	else
	{
		day++;
		if (day < 10 && month < 10)
		{
			cout << " 0" << day << " 0" << month << " " << year << "\n";
		}
		else if(day < 10 && month >= 10)
		{
			cout << " 0" << day << " " << month << " " << year << "\n";
		}
		else if (day >= 10 && month < 10)
		{
			cout << day << " 0" << month << " " << year << "\n";
		}
		else
		{
			cout << day << " " << month << " " << year << "\n";
		}
	}
	system("pause");
}




Задание 1. Напишите программу, которая вычисляет
сумму целых чисел от а до 500 (значение a вводится с клавиатуры).


#include <iostream>
using namespace std;
int main()
{
	setlocale(LC_ALL, "rus");
	int a = 0, i;
	cout << " Введите число -> "; cin >> i;
	if (i <= 500)
	{
		while (i <= 500)
		{
			a += i;
			i++;
		}
	}
	else
	{
		while (i > 500)
		{
			a += i;
			i--;
		}
	}
	
	cout << " " << a;
}




Задание 2. Напишите программу, которая запрашивает
два целых числа x и y, после чего вычисляет и выводит
значение x в степени y.



#include <iostream>
using namespace std;
int main()
{
	setlocale(LC_ALL, "rus");
	int x, y;
	do
	{
		cout << " Введите два целых числа через пробел и нажмите энтер -> ";
		cin >> x >> y;
		cout << " " << pow(x, y) << "\n";
	} 
	while (1);
}




Задание 3. Найти среднее арифметическое всех целых
чисел от 1 до 1000




#include <iostream>
using namespace std;
int main()
{
	setlocale(LC_ALL, "rus");
	int a = 0, i = 1;
		while (i <= 1000)
		{
			a += i;
			i++;
		}
	cout << " " << a / 1000;
}



Задание 4. Найти произведение всех целых чисел от a до
20 (значение a вводится с клавиатуры: 1 <=a <= 20).


#include <iostream>
using namespace std;
int main()
{
	setlocale(LC_ALL, "rus");
	unsigned long long a = 1, i;
	cout << " Введите целое число от 1 до 20 -> "; cin >> i;
	if (i < 0 || i > 20)
	{
		cout << " Число введено не корректно";
	}
	else
	{
		while (i <= 20)
		{
			a *= i;
			i++;
		}
		cout << " Произведение чисел от введенного до 20 = " << a;
	}
}




Задание 5. Написать программу, которая выводит на
экран таблицу умножения на k, где k — номер варианта.
Например, для 7-го варианта:
7 x 2 = 14;
7 x 3 = 21.




#include <iostream>
using namespace std;
int main()
{
	setlocale(LC_ALL, "rus");
	int k;
	cout << " Введите цифру, на которую хотите получить таблицу умножения (от 1 до 10) -> ";
	cin >> k;
	int i = 1;
	while (i <= 9)
	{
		cout << " " << k << " x " << i << " = " << k * i << ";\n";
		i++;
	}
	cout << " " << k << " x " << 10 << " = " << k * 10 << ".";
}



Задание 1. Подсчитать количество целых чисел в диапазоне от 100 до 999 у которых есть две одинаковые цифры



#include <iostream>
using namespace std;
int main()
{
	setlocale(LC_ALL, "rus");
	int i = 100, num1, num2, num3, double_num = 0;
	while (i <= 999)
	{
		num1 = i / 100;
		num2 = i / 10 % 10;
		num3 = i % 10;
		if (num1 == num2 || num1 == num3 || num2 == num3)
		{
			double_num += 1;
		}
		i++;
	}
	cout << " Количество чисел с двумя одинаковыми цифрами - " << double_num << "\n";
}



Задание 2. Подсчитать количество целых чисел в диапазоне от 100 до 999 у которых все цифры разные



#include <iostream>
using namespace std;
int main()
{
	setlocale(LC_ALL, "rus");
	int i = 100, num1, num2, num3, different_num = 0;
	while (i <= 999)
	{
		num1 = i / 100;
		num2 = i / 10 % 10;
		num3 = i % 10;
		if (num1 != num2 && num1 != num3 && num2 != num3)
		{
			different_num += 1;
		}
		i++;
	}
	cout << " Количество чисел у которых все цифры разные - " << different_num << "\n";
}




Задание 3. Пользователь вводит любое целое число. Необходимо из этого целого числа удалить все цифры 3 и 6
и вывести обратно на экран.



#include <iostream>
using namespace std;
int main()
{
	setlocale(LC_ALL, "rus");
	int num, bag = 0;
	cout << " Введите любое число, из которого необходимо удалить все 3 и 6 -> ";
	cin >> num;
	int tmp = 1;
	while (num != 0)
	{
		if (num % 10 != 3 && num % 10 != 6)
		{
			bag = bag + num % 10 * tmp;
			tmp = tmp * 10;
		}
		num = num / 10;
	} 
	cout << bag;
}




Задание 4. Пользователь вводит любое целое число А.
Необходимо вывести все целые числа В, для которых А
делиться без остатка на В*В и не делиться без остатка
на В*В*В.


#include <iostream>
using namespace std;
int main()
{
	setlocale(LC_ALL, "rus");
	int A, B, C=0;
	cout << " Введите любое целое число -> "; cin >> A;
	B = 1;
	while (B <= A)
	{
		if (A % (B * B) == 0 && A % (B * B * B) != 0)
		{
			cout << " " << B;
			C = 1;
		}
		B++;
	}
	if (C == 0)
	{
		cout << " Таких чисел B нет\n";
	}
}




Задание 5. Пользователь вводит целое число А. Программа должна определить, что куб суммы цифр этого числа
равен А*А.




#include <iostream>
using namespace std;
int main()
{
	setlocale(LC_ALL, "rus");
	int A, bag=0, B;
	cout << " Введите число -> "; cin >> A;
	B = A;//копируем А в переменную В
	while (A != 0)
	{
		bag = bag + A % 10;
		A = A / 10;
	}
	if (bag * bag * bag == B * B)
	{
		cout << " Kуб суммы цифр этого числа равен А*А\n";
	}
	else
	{
		cout << " Kуб суммы цифр этого числа не равен А*А\n";
	}
}






Задание 6. Пользователь вводит целое число. Необходимо вывести все целые числа, на которое заданное число
делиться без остатка.



#include <iostream>
using namespace std;
int main()
{
	setlocale(LC_ALL, "rus");
	int num, res;
	cout << " Введите любое целое число -> "; cin >> num;
	res = 1;
	while (res <= num)
	{
		if (num % res == 0)
		{
			cout << " " << res;
		}
		res++;
	}
}




Задание 7. Пользователь вводит два целых числа. Необходимо вывести все целые числа, на которые оба введенных
числа делятся без остатка. 




#include <iostream>
using namespace std;
int main()
{
	setlocale(LC_ALL, "rus");
	int num1, num2, res, min, max;
	cout << " Введите первое число -> "; cin >> num1;
	cout << " Введите второе число -> "; cin >> num2;
	res = 1;
	if (num1 <= num2)
	{
		min = num1, max = num2;
	}
	else
	{
		min = num2, max = num1;
	}
	while (res <= min)
	{
		if (min % res == 0 && max % res == 0)
		{
			cout << " " << res;
		}
		res++;
	}
}

Задание 1. Вывести на экран все числа от нуля до введенного пользователем числа. 


#include <iostream>
using namespace std;
int main()
{
	setlocale(LC_ALL, "rus");
	int num;
	cout << " Введите число -> "; cin >> num;
	int i = 0;
	while (i <= num)
	{
		cout << " " << i;
		i++;
	}
}



Задание 2. Пользователь вводит две границы диапазона,
вывести на экран все числа из этого диапазона. Предусмотреть, чтобы пользователь мог вводить 
границы диапазона в произвольном порядке.
■ вывести все четные числа из диапазона.
■ вывести все нечетные числа из диапазона.
■ вывести все числа, кратные семи.




#include <iostream>
using namespace std;
int main()
{
	setlocale(LC_ALL, "rus");
	int left, right, middle;
	cout << " Введите левую границу диапазона -> "; cin >> left;
	cout << " Введите левую правую диапазона -> "; cin >> right;
	cout << "\n 1. Выводим на экран все числа из этого диапазона:\n";
	if (right < left)
	{
		middle = left, left = right, right = middle;
	}
	int i = left;
	while (i <= right)
	{
		cout << " " << i;
		i++;
	}		
	cout << "\n\n 2. Выводим на экран четные числа диапазона:\n";
	i = left;
	while (i <= right)
	{
		if (i % 2 == 0)
		{
			cout << " " << i;
		}
		else if (left == right)
		{
			cout << " Четных цифр нет\n";
		}
		i++;
	}
	cout << "\n\n 3. Выводим на экран нечетные числа диапазона:\n";
	i = left;
	while (i <= right)
	{
		if (i % 2 != 0)
		{
			cout << " " << i;
		}
		else if (left == right)
		{
			cout << " Нечетных цифр нет\n";
		}
		i++;
	}
	cout << "\n\n 4. Выводим на экран все числа, кратные семи:\n";
	int x = 0;
	i = left;
	while (i <= right)
	{
		if (i % 7 == 0)
		{
			cout << " " << i;
			x = 1;
		}
		i++;
	}
	if (x == 0)
	{
		cout << " Нет чисел, кратных семи\n";
	}
}




Задание 3. Пользователь вводит две границы диапазона.
Посчитать сумму всех чисел диапазона.




#include <iostream>
using namespace std;
int main()
{
	setlocale(LC_ALL, "rus");
	int left, right, middle, bag=0;
	cout << " Введите левую границу диапазона -> "; cin >> left;
	cout << " Введите левую правую диапазона -> "; cin >> right;
	if (right < left)
	{
		middle = left, left = right, right = middle;
	}
	int i = left;
	while (i <= right)
	{
		bag = bag + i;
		i++;
	}
	cout << " Сумма всех чисел диапазона: " << bag << "\n";
}





Задание 4. Пользователь с клавиатуры вводит числа.
Посчитать их сумму и вывести на экран, как только пользователь введет ноль



#include <iostream>
using namespace std;
int main()
{
	setlocale(LC_ALL, "rus");
	int num, num2, bag;
	cout << " Вводите числа и нажимайте энтер, а что бы"
			" увидеть сумму этих чисел нажмите 0\n";
	cout << " Введите число -> "; cin >> num;
	bag = num;
	int i = 0;
	while (1)
	{
		cout << " Введите еще одно число -> "; cin >> num2;
		bag = bag + num2;
		if (num2 == 0)
		{
			cout << " Сумма: " << bag << "\n";
		}
		i++;
	}
}




Задание 1. Написать игру «Угадай число». Программа
загадывает число в диапазоне от 1 до 500. Пользователь
пытается его угадать. После каждой попытки программа
выдает подсказки, больше или меньше его число загаданного. 
В конце программа выдает статистику: за сколько
попыток угадано число, сколько времени это заняло.
Предусмотреть выход по 0, в случае, если пользователю
надоело угадывать число.




#include <iostream>
#include <ctime>
using namespace std;
int main()
{
	setlocale(LC_ALL, "rus");
	int num, secret_num;
	cout << " \t<<<! Игра \"Угадай число\" !>>>\n"
			" Я, робот Иван, загадал число от 1 до 500. Отгадай его и будет тебе счастье\n"
			" Если хочешь выйти из игры - нажимай 0\n";
	cout << " Введите число -> "; cin >> num;
	unsigned int start_time = clock(); // начальное время
	if (num == 0)
	{
		cout << " Игра окончена\n";
	}
	else if (num > 500 || num < 0)
	{
		cout << " Такие числа в игре не участвуют\n";
	}
	else
	{
		if (num <= 20)
		{
			secret_num = (num + 117) / 2 * 3;
		}
		else if (num >= 480)
		{
			secret_num = (num - 113) / 4 * 3;
		}
		else if (num > 20 && num <= 400)
		{
			secret_num = ((num + 68) / 3) + 7;
		}
		else
		{
			secret_num = num - 399;
		}
		int some_num;
		some_num = num;
		int bag1 = 0, bag2 = 0;
		int x = 0;
		int i = 1;
		while (some_num != secret_num && x == 0)
		{
			if (some_num == 0)
			{
				x = 1;
			}
			 else if (some_num < secret_num )
			{
				cout << " Загаданное число больше Вашего, попробуйте еще раз -> ";
				cin >> some_num;
				bag1 = bag1 + 1;
			}
			else if (some_num > secret_num )
			{
				cout << " Загаданное число меньше Вашего, попробуйте еще раз -> ";
				cin >> some_num;
				bag2 = bag2 + 1;
			}
			i++;
		}
		unsigned int end_time = clock(); // конечное время
		unsigned int search_time = end_time - start_time; // искомое время
		if (some_num == secret_num)
		{
			cout << " Вы угадали, загаданное число - " << some_num << "\n"
					" Число угадано с " << bag1 + bag2 + 1 << " попыток\n"//+1 попытка самая первая
					" Вы угадали за " << (search_time / 1000) / 60 << " мин "  
					<< (search_time / 1000) % 60 << " сек.\n";
		}
		else if (some_num == 0) {
			cout << " Игра окончена\n";
		}
	}
}




Задание 2. Написать программу-конвертер валют. Реализовать общение с пользователем через меню.



#include <iostream>
using namespace std;
int main()
{
	setlocale(LC_ALL, "rus");
	int sum, currency, convert;
	float result;
	do
	{
		cout << "\n Введите сумму денег, которую хотите поменять -> "; cin >> sum;
		cout << " Ваша валюта:\n"
				" Гривна - нажмите 1\n"
				" Доллар  - нажмите 2\n"
				" Евро  - нажмите 3\n "; cin >> currency;
		cout << " В какую валюту конвеpтировать?\n"
				" Гривна - нажмите 1\n"
				" Доллар  - нажмите 2\n"
				" Евро  - нажмите 3\n "; cin >> convert;
		if (currency < 0 || currency > 3 || convert < 0 || convert > 3)
		{
			cout << " Информация введена не корректно\n";
		}
		switch (convert)
		{
			case 1: if (currency == 1)
					{
						cout << " Результат: " << sum << " грн\n";
					}
					else if (currency == 2)
					{
						result = sum * 24.06;
						cout << " Результат: " << result << " грн\n";
					}
					else if (currency == 3)
					{
						result = sum * 26.60;
						cout << " Результат: " << result << " грн\n";
					}
			break;
			case 2: if (currency == 1)
					{
						result = sum / 24.06;
						cout << " Результат: " << result << " USD\n";
					}
					else if (currency == 2)
					{
						cout << " Результат: " << sum << " USD\n";
					}
					else if (currency == 3)
					{
						result = sum * 1.09;
						cout << " Результат: " << result << " USD\n";
					}
			break;
			case 3: if (currency == 1)
					{
						result = sum / 26.60;
						cout << " Результат: " << result << " EUR\n";
					}
					else if (currency == 2)
					{
						result = sum * 0.88;
						cout << " Результат: " << result << " EUR\n";
					
					}
					else if (currency == 3)
					{
						cout << " Результат: " << sum << " EUR\n";
					}
			break;
		}
	} while (1);
}


Задание 1. Пользователь вводит с клавиатуры две границы диапазона и число. 
Если число не попадает в диапазон, программа просит пользователя повторно 
ввести число, и так до тех пор, пока он не введет число правильно.



#include<iostream>
using namespace std;
int main()
{
	int left, right, num, min, max;
	cout << " Enter left limit -> "; cin >> left;
	cout << " Enter right limit -> "; cin >> right;
	cout << " Enter your number -> "; cin >> num;
	if (left <= right)
	{
		min = left, max = right;
	}
	else
	{
		min = right, max = left;
	}
	for (int i = 1; ; i++)
	{
		if (num >= min && num <= max)
		{
			cout << " Your number is in the limit\n";
			break;
		}
		else if (num < min)
		{
			cout << " Enter a number that is bigger -> ";
			cin >> num;
		}
		else if (num > max)
		{
			cout << " Enter a number that is smaller -> ";
			cin >> num;
		}
	}
}



Задание 2. Написать программу, которая проверяет пользователя на знание таблицы умножения. 
Программа выводит на экран два числа, пользователь должен ввести их произведение. 
Разработать несколько уровней сложности (отличаются сложностью и количеством вопросов). 
Вывести пользователю оценку его знаний.





#include<iostream>
#include<time.h>
using namespace std;
int main()
{
	setlocale(LC_ALL, "rus");
	int level, Exit=1;
	cout << " Welcome to the game \"Expert of multiply\"\n"
		" К сожалению, у Вас не лицензионная версия игры, по этому игра только\n"
		" частично переведена на русский язык.\n"
		" Инструкция: Вам нужно выбрать уровень сложности, после чего на экране появятся две\n"
		" цифры из таблицы умножения, Вы должны вписать правильный ответ после знака = .\n"
		" Для выхода из игры нажмите 0.\n";
	for (int I = 1; Exit != 0; I++)
	{		
		cout << "\tChoose your level:\n"
		"\tEasy - press 1 \n"
		"\tMedium - press 2\n"
		"\tHard - press 3\n"
		"\tPRO - press 4\n\t";
		cin >> level;
		if (level > 4 || level < 1 && level != 0)
		{
			while (level > 4 || level < 1)
			{
				if (level == 0)
				{
					break;				
				}
				cout << "\tWrong level selected\n"
				"\tTry again - > "; cin >> level;
			}	
		}
		if (level == 0)
		{
			cout << " Game over\n";
			Exit = 0;
		}
		int a = 1, b = 10, rand_num_1, rand_num_2;
		int answer, count = 0, try_again;
		srand(time(0));
		switch (level)
		{
			case 1: for (int i = 1; i <= 12; i++)
					{
						do
						{
							rand_num_1 = a + rand() % (b - a + 1);
							rand_num_2 = a + rand() % (b - a + 1);
						} while (rand_num_1 == 3 || rand_num_1 == 6 || rand_num_1 == 7 ||
							rand_num_1 == 8 || rand_num_1 == 9 || rand_num_2 == 7 ||
							rand_num_2 == 8 || rand_num_2 == 9);
						cout << "\t" << rand_num_1 << " x " << rand_num_2 << " = "; cin >> answer;
						if (answer == rand_num_1 * rand_num_2)
						{
							count += 1;
						}
						else if (answer == 0)
						{
							cout << " Game over\n";
							break;
						}
					}
					if (count == 12)
					{
						cout << " You are win! Your result is perfect. Your mark is 12. Not bad for students of 1 classes\n" << "\n";
					}
					else if (count >= 9 && answer != 0)
					{
						cout << " You are win! Your mark is " << count << " of the 12 \n";
					}
					else if (count < 9 && answer != 0)
					{
						cout << " You are lose. Your mark is zero\n";
					}
					cout << "\tDo you want try again? Enter 1 to try again or another number to exit\n\t";
					cin >> try_again;
					if (try_again == 1)
					{
						break;
					}
					else
					{
						cout << " Game over\n";
						Exit = 0;
					}
					break;
			case 2: for (int i = 1; i <= 15; i++)
					{
						do
						{
						rand_num_1 = a + rand() % (b - a + 1);
						rand_num_2 = a + rand() % (b - a + 1);
						} while (rand_num_1 == 1 || rand_num_1 == 7 || rand_num_1 == 9 || rand_num_1 == 10
								|| rand_num_2 == 1 || rand_num_2 == 2 || rand_num_2 == 10);
						cout << "\t" << rand_num_1 << " x " << rand_num_2 << " = "; cin >> answer;
						if (answer == rand_num_1 * rand_num_2)
						{
							count += 1;
						}
						else if (answer == 0)
						{
							cout << " Game over\n";
							break;
						}
					}
					if (count == 15)
					{
						cout << " You are win! Your result is perfect. Your mark is 12. Not bad for students of 2 classes\n" << "\n";
					}
					else if (count >= 12 && answer != 0)
					{
						 cout << " You are win! Your mark is 10 of the 12\n";
					}
					else if (count < 12 && answer != 0)
					{
						cout << " You are lose. Your mark is zero\n";			 
					}
					cout << "\tDo you want try again? Enter 1 to try again or another number to exit\n\t";
					cin >> try_again;
					if (try_again == 1)
					{
						break;
					}
					else
					{
						cout << " Game over\n";
						Exit = 0;
					}
					break;
			case 3: for (int i = 1; i <= 18; i++)
					{
						do
						{
							rand_num_1 = a + rand() % (b - a + 1);
							rand_num_2 = a + rand() % (b - a + 1);
						} while (rand_num_1 == 1 || rand_num_1 == 2 || rand_num_1 == 5 || rand_num_1 == 10
							|| rand_num_2 == 1 || rand_num_2 == 2 || rand_num_2 == 5 || rand_num_2 == 10);
						cout << "\t" << rand_num_1 << " x " << rand_num_2 << " = "; cin >> answer;
						if (answer == rand_num_1 * rand_num_2)
						{
							count += 1;
						}
						else if (answer == 0)
						{
							cout << " Game over\n";
							break;
						}
					}
					if (count == 18)
					{
						 cout << " You are win! Your result is perfect. Your mark is 12. Not bad for students of 3 classes\n" << "\n";
					}
					else if (count >= 17 && answer != 0)
					{
						cout << " You are win! Your Your mark is 10 of the 12\n";
					}
					else if (count < 17 && answer != 0)
					{
						cout << " You are lose. Your mark is zero\n";
					}
					cout << "\tDo you want try again? Enter 1 to try again or another number to exit\n\t";
					cin >> try_again;
					if (try_again == 1)
					{
						break;
					}
					else
					{
						cout << " Game over\n";
						Exit = 0;
					}
					break;
			case 4: int t1, t2, time_game;
					t1 = time(0);
					for (int i = 1; i <= 18; i++)
					{						
						do
						{
							rand_num_1 = a + rand() % (b - a + 1);
							rand_num_2 = a + rand() % (b - a + 1);
						} while (rand_num_1 == 1 || rand_num_1 == 2 || rand_num_1 == 5 || rand_num_1 == 10
							|| rand_num_2 == 1 || rand_num_2 == 2 || rand_num_2 == 5 || rand_num_2 == 10);
						cout << "\t" << rand_num_1 << " x " << rand_num_2 << " = "; cin >> answer;
						if (answer == rand_num_1 * rand_num_2)
						{
							count += 1;
						}
						else if (answer == 0)
						{
							cout << " Game over\n";
							break;
						}						
					}
					t2 = time(0);
					time_game = t2 - t1;
					if (count == 18 && time_game <= 50)
					{
						cout << " You are win! Your result is perfect. Your mark is 12. You are expert of multiply\n" << "\n";
					}
					else if (count < 18 && answer != 0)
					{
						cout << " You are lose. Your mark is zero\n";
					}
					else if (count == 18 && time_game > 50 && answer != 0)
					{
						cout << " You are lose. The answers are ok, but your game\n"
								" time is more than 50 seconds. Your mark is zero. Your time " << time_game << "\n";	
					}
					cout << "\tDo you want try again? Enter 1 to try again or another number to exit\n\t";
					cin >> try_again;
					if (try_again == 1)
					{
						break;
					}
					else
					{
						cout << " Game over\n";
						Exit = 0;
					}
					break;
		}
	}
}





Задание 3. Вывести на экран ромб из звездочек. Длина диагонали ромба вводится.



#include<iostream>
using namespace std;
int main()
{
	int num;
	cout << " Enter length diagonal of a rhombus -> "; cin >> num;
	for (int j = 1; j <= num; j++)
	{
		for (int i = 1; i <= num; i++)
		{
			if (i + j >= num / 2 + 2 && i + j <= (num / 2) * 3 + 2 && i - j <= num / 2 && j - i <= num / 2)
				cout << "*";
			else
				cout << " ";
		}
		cout << "\n";
	}
}




3) Найти все трехзначные числа, средняя цифра которых равна сумме первой и второй цифр. 


#include<iostream>
using namespace std;
int main()
{
	setlocale(LC_ALL, "rus");
	int num, a, b, c, middle_num;
	for (int i = 100; i <= 999; i++)
	{
		a = i / 100;
		b = i / 10 % 10;
		c = i % 10;
		middle_num = (a + b + c) / 3;
		if (middle_num == a + b)
		{
			cout << " " << i << "\n";
		}
	}
	system("pause");
}




1) Напишите программу печати таблицы перевода расстояний из дюймов в сантиметры для значений 
длин от 1 до 20 дюймов. 1 дюйм = 2,54 см. (1 балл) 


#include<iostream>
using namespace std;
int main()
{
	setlocale(LC_ALL, "rus");
	for (int inch = 1; inch <= 20; inch++)
	{
		cout << " " << inch << "\" = " << inch * 2.54 << " cm\n";
	}
	system("pause");
}




6) Составьте программу получения в порядке убывания всех делителей данного числа. (2 балла) 


#include<iostream>
using namespace std;
int main()
{
	setlocale(LC_ALL, "rus");
	int num;
	cout << " Введите число -> "; cin >> num;
	for (int i = num; i >= 1; i--)
	{
		if (num % i == 0)
		{
			cout << " " << i << "\n";
		}
	}
	system("pause");
}



7) Составьте программу определения наибольшего общего делителя двух натуральных чисел. (3 балла) 



#include<iostream>
using namespace std;
int main()
{
	setlocale(LC_ALL, "rus");
	int num1, num2, min;
	cout << " Введите первое число -> "; cin >> num1;
	cout << " Введите второе число -> "; cin >> num2;
	(num1 <= num2) ? min = num1 : min = num2;
	for (int i = min; i >= 1; i--)
	{
		if (num1 % i == 0 && num2 % i == 0)
		{
			cout << " " << i << "\n";
			break;
		}
	}
	system("pause");
}



8) Составьте программу определения наименьшего общего кратного двух натуральных чисел. (3 балла) 


#include<iostream>
using namespace std;
int main()
{
	setlocale(LC_ALL, "rus");
	int num1, num2, max;
	cout << " Введите первое число -> "; cin >> num1;
	cout << " Введите второе число -> "; cin >> num2;
	(num1 >= num2) ? max = num1 : max = num2;
	for (int i = max; ; i++)
	{
		if (i % num1 == 0 && i % num2 == 0)
		{
			cout << " " << i << "\n";
			break;
		}
	}
	system("pause");
}



9) Составьте программу, подсчитывающую количество цифр вводимого вами целого неотрицательного числа. Можно 
использовать операцию целочисленного деления. (3 балла) 



#include<iostream>
using namespace std;
int main()
{
	int num, bag = 0;
	cout << " Insert the number -> "; cin >> num;
	for (int i = num; i != 0; i /= 10)
	{
		bag += 1;	
	}
	cout << " Quantity numbers: " << bag << "\n";
}




10) Составьте программу, определяющую максимальное из всех вводимых вами чисел. 
Концом ввода чисел является введенное число 0. (2 балла) 




#include<iostream>
using namespace std;
int main()
{
	int num, biggest;
	cout << " Insert the number -> "; cin >> biggest;
	if (biggest == 0)
	{
		cout << " End.";
	}
	else
	{
		for (int i = 1; ; i++)
		{
			cout << " Insert the number -> "; cin >> num;
			if (num >= biggest && num != 0)
			{
				biggest = num;
			}
			else if (biggest == 0 || num == 0)
			{
				break;
			}
		}
		cout << " Biggest number: " << biggest << "\n";
	}
}



12) Вычислите сумму квадратов N четных натуральных чисел. (2 балла) 



#include<iostream>
using namespace std;
int main()
{
	int quantity, bag=0, count=0;
	cout << " Enter quantity even numbers -> "; cin >> quantity;
	for (int i = 2; ; i++)
	{
		if (i % 2 == 0)
		{
			bag += i * i;
			count += 1;
			if (count == quantity)
			{
				break;
			}
		}
	}
	cout << " Sum of square numbers: " << bag << "\n";
}



13) Вычислить: 1+2+4+8+…+256 (3 балла)



#include<iostream>
using namespace std;
int main()
{
	int bag=0;
	for (int i = 1; i <= 256; i *= 2)
	{
		bag += i;
	}
	cout << " " << bag << "\n";	
}




14) Вычислить: (1+2)*(1+2+3)*…*(1+2+…+10) (3 балла)  



#include<iostream>
using namespace std;
int main()
{
	int bag1 = 55;
	unsigned long long bag2 = 55;
	for (int j = 10; j >= 3; j--)
	{
		bag1 = bag1 - j;
		bag2 = bag2 * bag1;
	}
	cout << bag2 << "\n";
}



17) Билет называют «счастливым», если в его номере сумма первых трех цифр
 равна сумме последних трех. Подсчитать число тех «счастливых» билетов, у которых
 сумма трех цифр равна 13. Номер билета может быть от 000000 до 999999. (3 балла) 


#include<iostream>
using namespace std;
int main()
{
	int a, b, c, d, e, f, bag=0;
	for (int i = 0; i <= 999999; i++)
	{
		a = i / 100000;
		b = i / 10000 % 10;
		c = i / 1000 % 10;
		d = i / 100 % 10;
		e = i / 10 % 10;
		f = i % 10;
		if (a + b + c == 13 && d + e + f == 13)
		{
			bag += 1;
		}
	}
	cout << " " << bag;
}



22) Составьте программу, вычисляющую A*B, не пользуясь операцией умножения. 
А и B любое натуральное число. (2 балла) 


#include<iostream>
using namespace std;
int main()
{
	int A, B, res=0;
	cout << " input your first number -> "; cin >> A;
	cout << " input your second number -> "; cin >> B;
	for (int i = 1; i <= B; i++)
	{
		res += A;
	}
	cout << " " << A << " * " << B << " = " << res;
}





23) Для заданного числа N составьте программу вычисления суммы S=1+1/2+1/3+1/4+…+1/N, 
где N – натуральное число. (2 балла) 



#include<iostream>
using namespace std;
int main()
{
	float N, S=0;
	cout << " input your number -> "; cin >> N;
	for (int i = 2; i <= N; i++)
	{
		S += 1.0 / i;
	}
	cout << " " << S + 1 << "\n";
}



24) Каждая бактерия делится на две в течение одной минуты. В начальный момент имеется одна 
бактерия. Составьте программу, которая рассчитывает количество бактерий на заданное вами 
целое значение момента времени (15 минут, 7 минут и т.п.). (2 балла) 





#include<iostream>
using namespace std;
int main()
{
	int m, res=1;
	cout << " input quantity minutes -> "; cin >> m;
	for (int i = 1; i <= m; i++)
	{
		res *= 2;
	}
	cout << " " << res << "\n";
}



25) Составьте программу вывода на экран всех простых чисел, не превосходящих заданного N. 
Простым называется натуральное число больше единицы, имеющее только два делителя: единицу 
и само это число. (2 балла) 



#include<iostream>
using namespace std;
int main()
{
	int num;
	cout << " input your number -> "; cin >> num; 
	for (int i = 2; i <= num; i++)
	{
		int plain = 0;
		for (int j = 2; j < i; j++)
		{
			if (i % j == 0)
			{
				plain++;
				break;
			}
		}
		if (plain == 0)
		{
			cout << " " << i << "\t";
		}
	}
}




26) В 1202г. Итальянский математик Леонард Пизанский (Фибоначчи) предложил такую задачу: пара кроликов 
каждый месяц дает приплод – двух кроликов (самца и самку), от которых через два месяца уже получается 
новый приплод, Сколько кроликов будет через год, если в начале года имелась одна пара? Согласно условию 
задачи числа, соответствующие количеству кроликов, которые появляются через каждый месяц, составляют 
последовательность 1, 1, 2, 3, 5, 8, 13, 21, 37, … Составьте программу, позволяющую найти все числа 
Фибоначчи, меньшие заданного числа N. (5 баллов) 




#include<iostream>
using namespace std;
int main()
{
	int num, a = 0, b = 1;
	cout << " input your number -> "; cin >> num; 
	while (num != 0)
	{
		a = a + b;
		b = a - b;
		num = num - 1;
		if (a <= num)
		{
			cout << a << "\n";
		}
		else
		{
			break;
		}
	}
}




27) Составьте программу, которая выводит полную запись десятичного числа 42*4*, 
в которой пропущены две цифры (обозначены *), если известно, что данное число кратно 72. (4 балла) 




#include<iostream>
using namespace std;
int main()
{
	int i = 42949, a;
	while (i >= 42040)
	{
		a = i / 10 % 10;
		if (i % 72 == 0 && a == 4)
		{
			cout << i << "\n";
		}
		i--;
	}

}

Задание 1. Вывести на экран фигуры заполненные звездочками. 
Диалог с пользователем реализовать при помощи меню.



#include<iostream>
using namespace std;
int main()
{
	0:07 28.01.2020
	int num;
	cout << " Выберите, какую часть квадрата закрасить звездочками:\n"
		" С правого верхнего угла до середины - введите 1\n"
		" С левого нижнего угла до середины - введите 2\n"
		" Треугольник вверху - введите 3\n"
		" Треугольник внизу - введите 4\n"
		" Песочные часы - введите 5\n"
		" Пуревернутые песочные часы - введите 6\n"
		" Треугольник слева - введите 7\n"
		" Треугольник справа - введите 8\n"
		" С левого верхнего угла до середины - введите 9\n"
		" С правого нижнего угла до середины - введите 10\n ";
	cin >> num;
	if (num > 10 || num < 1)
	{
		while (num > 10 || num < 1)
		{
			cout << " Некорректно выбрана цифра, Попробуйте еще раз - > "; cin >> num;
		}
	}
	int a;
	switch (num)
	{
		case 1: cout << " Введите размер стороны квадрата -> "; cin >> a;
				for (int j = 1; j <= a; j++)
				{
					for (int i = 1; i <= a; i++)
					{
						if(i == 1 || i == a || j == 1 || j == a || j == i || j < i)
						{
							cout << "*";
						}
						else
						{
							cout << " ";
						}						
					}
					cout << "\n";
				}
				break;
		case 2: cout << " Введите размер стороны квадрата -> "; cin >> a;
				for (int j = 1; j <= a; j++)
				{
					for (int i = 1; i <= a; i++)
					{
						if (i == 1 || i == a || j == 1 || j == a || j == i || j > i)
						{
							cout << "*";
						}
						else
						{
							cout << " ";
						}
					}
					cout << "\n";
				}
				break;
		case 3: cout << " Введите размер стороны квадрата -> "; cin >> a;
				for (int j = 1; j <= a; j++)
				{
					for (int i = 1; i <= a; i++)
					{
						if (i == 1 || i == a || j == 1 || j == a || j <= i && i <=  a - j + 1)
						{
							cout << "*";
						}
						else
						{
							cout << " ";
						}
					}
					cout << "\n";
				}
				break;
		case 4: cout << " Введите размер стороны квадрата -> "; cin >> a;
				for (int j = 1; j <= a; j++)
				{
					for (int i = 1; i <= a; i++)
					{
						if (i == 1 || i == a || j == 1 || j == a || j >= i && i >= a - j + 1)
						{
							cout << "*";
						}
						else
						{
							cout << " ";
						}
					}
					cout << "\n";
				}
				break;
		case 5: cout << " Введите размер стороны квадрата -> "; cin >> a;
				for (int j = 1; j <= a; j++)
				{
					for (int i = 1; i <= a; i++)
					{
						if (i == 1 || i == a || j == 1 || j == a || j >= i && i >= a - j + 1 
							|| j <= i && i <= a - j + 1)
						{
							cout << "*";
						}
						else
						{
							cout << " ";
						}
					}
					cout << "\n";
				}
				break;
		case 6: cout << " Введите размер стороны квадрата -> "; cin >> a;
				for (int j = 1; j <= a; j++)
				{
					for (int i = 1; i <= a; i++)
					{
						if (i == 1 || i == a || j == 1 || j == a || j >= i && i <= a - j + 1
							|| j <= i && i >= a - j + 1)
						{
							cout << "*";
						}
						else
						{
							cout << " ";
						}
					}
					cout << "\n";
				}
				break;
		case 7: cout << " Введите размер стороны квадрата -> "; cin >> a;
				for (int j = 1; j <= a; j++)
				{
					for (int i = 1; i <= a; i++)
					{
						if (i == 1 || i == a || j == 1 || j == a || j >= i && i <= a - j + 1)
						{
							cout << "*";
						}
						else
						{
							cout << " ";
						}
					}
					cout << "\n";
				}
				break;
		case 8: cout << " Введите размер стороны квадрата -> "; cin >> a;
			for (int j = 1; j <= a; j++)
			{
				for (int i = 1; i <= a; i++)
				{
					if (i == 1 || i == a || j == 1 || j == a ||  j <= i && i >= a - j + 1)
					{
						cout << "*";
					}
					else
					{
						cout << " ";
					}
				}
				cout << "\n";
			}
			break;
		case 9: cout << " Введите размер стороны квадрата -> "; cin >> a;
				for (int j = 1; j <= a; j++)
				{
					for (int i = 1; i <= a; i++)
					{
						if (i == 1 || i == a || j == 1 || j == a || i <= a - j + 1)
						{
							cout << "*";
						}
						else
						{
							cout << " ";
						}
					}
					cout << "\n";
				}
				break;
		case 10: cout << " Введите размер стороны квадрата -> "; cin >> a;
			for (int j = 1; j <= a; j++)
			{
				for (int i = 1; i <= a; i++)
				{
					if (i == 1 || i == a || j == 1 || j == a || i >= a - j + 1)
					{
						cout << "*";
					}
					else
					{
						cout << " ";
					}
				}
				cout << "\n";
			}
			break;
	}
}




Задание 1. Пользователь вводит число. Определить количество цифр в этом числе, посчитать их сумму и среднее
арифметическое. Определить количество нулей в этом
числе. Общение с пользователем организовать через меню.



#include<iostream>
using namespace std;
int main()
{
	setlocale(LC_ALL, "rus");
	int num;
	cout << " Enter your number -> "; cin >> num;
	float count = 0, sum = 0, zero = 0;

	if (num == 0)
	{
		count = 1;
		zero = 1;
	}
	else
	{
		while (num != 0)
		{
			count += 1;
			sum += num % 10;
			zero = zero + bool(!(num % 10));
			num /= 10;
		}
	}
	cout << " Количество цифр в этом числе " << count << "\n"
		" Сумма цифр в этом числе " << sum << "\n"
		" Среднее арифметическое цифр в этом числе " << sum / (count - zero) << "\n"
		" Количество нулей в этом числе " << zero << "\n";
}



Задание 2. Написать программу, которая выводит на
экран шахматную доску с заданным размером клеточки.




#include<iostream>
using namespace std;
int main()
{
	int quantity, size;
	cout << " Enter quantity of cell -> "; cin >> quantity;
	cout << " Enter size of cell -> "; cin >> size;
	for (int j = 1; j <= quantity; j++)
	{
		for (int k = 1; k <= size; k++)
		{
			for (int i = 1; i <= quantity; i++)
			{
				for (int z = 1; z <= size; z++)
				{
					if (i % 2 == 1 && j % 2 == 1 || i % 2 == 0 && j % 2 == 0)
					{
						cout << "*";
					}
					else
					{
						cout << "-";
					}
				}			
			}
			cout << "\n";
		}			
	}	
}



 
Задачки на смекалку (каждая 10 баллов) 
2) Найти все трехзначные числа, сумма цифр которых равна данному целому числу. 

#include<iostream>
using namespace std;
int main()
{
	setlocale(LC_ALL, "rus");
	int a, b, c, num, flag=0, flag2=0;
	cout << " Введите число -> "; cin >> num;
	for (int i = 100; i <= 999; i++)
	{
		a = i / 100;
		b = i / 10 % 10;
		c = i % 10;
		if (a + b + c == num)
		{
			cout << " " << i << "\n";
			flag2 = 1;
		}
		else
		{
			flag = 1;
		}
	}
	if (flag == 1 && flag2 == 0)
	{
		cout << " Таких чисел нет\n";
	}
	system("pause");
}


4) Найти все трехзначные числа, которые можно представить разностью между квадратом числа,
 образованного первыми двумя цифрами и квадратом третьей цифры. 


#include<iostream>
using namespace std;
int main()
{
	setlocale(LC_ALL, "rus");
	int a, b;
	for (int i = 100; i <= 999; i++)
	{
		a = i / 10;
		b = i % 10;
		if (i == a * a - b * b)
		{
			cout << " " << i << "\t";
		}
	}
	system("pause");
}



5) Найти все двузначные числа, сумма квадратов цифр которых делится на 17. 



#include<iostream>
using namespace std;
int main()
{
	setlocale(LC_ALL, "rus");
	int a, b;
	for (int i = 10; i <= 99; i++)
	{
		a = i / 10;
		b = i % 10;
		if ((a * a + b * b) % 17 == 0)
		{
			cout << " " << i << "\n";
		}
	}
	system("pause");
}


7) Найти двузначное число, обладающее тем свойством, что куб суммы его цифр равен квадрату самого числа. 


#include<iostream>
using namespace std;
int main()
{
	setlocale(LC_ALL, "rus");
	int a, b;
	for (int i = 10; i <= 99; i++)
	{
		a = i / 10;
		b = i % 10;
		if (i * i == (a + b) * (a + b) * (a + b))
		{
			cout << " " << i << "\n";
		}
	}
	system("pause");
}


8) Найти двузначное число, равное утроенному произведению его цифр. 


#include<iostream>
using namespace std;
int main()
{
	setlocale(LC_ALL, "rus");
	int a, b;
	for (int i = 10; i <= 99; i++)
	{
		a = i / 10;
		b = i % 10;
		if (i == a * b * 3)
		{
			cout << " " << i << "\n";
		}
	}
	system("pause");
}



9) В каких двузначных числах удвоенная сумма цифр равна их произведению? 



#include<iostream>
using namespace std;
int main()
{
	setlocale(LC_ALL, "rus");
	int a, b;
	for (int i = 10; i <= 99; i++)
	{
		a = i / 10;
		b = i % 10;
		if ((a + b) * 2 == a * b)
		{
			cout << " " << i << "\n";
		}
	}
	system("pause");
}




1) Найти все двузначные числа, сумма цифр которых не меняется при умножении числа на 2,3,4,5,6,7,8,9. 



#include<iostream>
using namespace std;
int main()
{
	setlocale(LC_ALL, "rus");
	int a, b, num, a1, b1, c1, sum_num, result;
	for (int i = 10; i <= 99; i++)
	{
		a = i / 10;
		b = i % 10;
		result = 0;
		for (int j = 2; j <= 9; j++)
		{
			num = i * j;
			a1 = num / 100;
			b1 = num / 10 % 10;
			c1 = num % 10;
			sum_num = a1 + b1 + c1;
			if (a + b == sum_num)
			{
				result += 1;
			}
		}
		if (result == 8)
		{
			cout << " " << i << "\t";
		}
	}
	system("pause");
}




10) Можно ли заданное натуральное число М представить в виде суммы квадратов 
двух натуральных чисел? Написать программу решения этой задачи. 


#include<iostream>
using namespace std;
int main()
{
	setlocale(LC_ALL, "rus");
	int M, i, j, flag1 = 0, flag2 = 0;
	cout << " Введите натуральное число -> "; cin >> M;
	for (i = M; i >= 1; i--)
	{
		for (j = M; j >= 1; j--)
		{
			if (M == i * i + j * j)
			{
				cout << " " << i << " * " << i << " + " << j << " * " << j << "\n";
				flag1 = 1;
			}
			else
			{
				flag2 = 1;
			}
		}
	}
	if (flag2 == 1 && flag1 == 0)
	{
		cout << " Такое число нельзя представить в виде суммы квадратов двух натуральных чисел\n";
	}
	system("pause");
} 




6) Найти все трехзначные числа, представимые в виде сумм факториалов своих цифр. 



#include<iostream>
using namespace std;
int main()
{
	setlocale(LC_ALL, "rus");
	int a, b, c;
	for (int i = 100; i <= 999; i++)
	{
		int  bag1 = 1, bag2 = 1, bag3 = 1;
		a = i / 100;
		b = i / 10 % 10;
		c = i % 10;
		for (int j = a; j >= 1; j--)
		{
			bag1 = bag1 * j;
		}
		if (b == 0)
		{
			bag2 = 0;
		}
		else
		{
			for (int k = b; k >= 1; k--)
			{
				bag2 = bag2 * k;
			}
		}
		if (c == 0)
		{
			bag3 = 0;
		}
		else
		{
			for (int l = c; l >= 1; l--)
			{
				bag3 = bag3 * l;
			}
		}
		if (i == bag1 + bag2 + bag3)
		{
			cout << " " << i << "\n";
		}
	}
	system("pause");
}



Задание 1. Написать программу, которая выводит на
экран линию заданным символом, вертикальную или
горизонтальную, причем линия может выводиться быстро, нормально и медленно. Общение с пользователем
организовать через меню.


#include<iostream>
#include<Windows.h>
using namespace std;
int main()
{
	char symbol;
	int line, speed;
	cout << " Enter symbol -> "; cin >> symbol;
	cout << " Horizontal line - enter 1\n"
			" Vertical line - enter 2\n ";
	cin >> line;
	while (line < 1 || line > 2)
	{
		cout << " Enter correct number\n ";
		cin >> line;
	}
	cout << " Normal speed - enter 1\n"
			" Quick line - enter 2\n"
			" Slow line - enter 3\n ";
	cin >> speed;
	while (speed < 1 || speed > 3)
	{
		cout << " Enter correct speed\n ";
		cin >> speed;
	}
	for (int i = 1; i <= 40; i++)
	{
		if (line == 1)
		{
			switch (speed)
			{
				case 1: cout << symbol; Sleep(speed * 50);
					break;
				case 2: cout << symbol; Sleep(speed * 3);
					break;
				case 3: cout << symbol; Sleep(speed * 70);
					break;
			}
		}
		else if (line == 2)
		{
			switch (speed)
			{
				case 1: cout << "\t" << symbol << "\n"; Sleep(speed * 50);
					break;
				case 2: cout << "\t" << symbol << "\n"; Sleep(speed * 3);
					break;
				case 3: cout << "\t" << symbol << "\n"; Sleep(speed * 70);
					break;
			}
		}
	}
	cout << "\n";
	system("pause");
}




Задание 2. Написать игру «Кубики». Пользователь и компьютер по очереди бросают 2 кубика. Победитель — тот,
у кого по результатам 3х бросков сумма больше. Предусмотреть красивый интерфейс игры





#include<iostream>
#include<Windows.h>
#include<time.h>
using namespace std;
int main()
{
	setlocale(LC_ALL, "rus");
	srand(time(0));
	system("color 0a");
	int play, Exit = 0, gamer = 0, comp = 0;
	while (1)
	{
		cout << "\n\t The Game \"CUBES\"\n"
			" Правила игры: Вы и исккусственный интелект(ИИ) по очереди бросаете кубики.\n"
			" Побеждает тот, у кого по результатам 3х бросков сумма больше.\n"
			" Для выхода нажми 0\n";
		for (int i = 1; i <= 3; i++)
		{
			cout << "\n Что бы бросить кубики  - нажмите 7 >> "; cin >> play;
			if (play == 0)
			{
				cout << "\n GAME OVER:(\n";
				Exit = 1;
				break;
			}
			for (int i = 1; i <= 4; i++)
			{
				if (i == 3)
					cout << "\n Теперь бросает ИИ:\n";
				int R = rand() % 6 + 1;
				if (i == 1 || i == 2)
					gamer += R;
				else
					comp += R;
				switch (R)
				{
				case 1:
					Sleep(600);
					cout << "\n";
					cout << "\t.........\n";
					cout << "\t'       '\n";
					cout << "\t'   *   '\n";
					cout << "\t'       '\n";
					cout << "\t'''''''''\n";
					break;
				case 2:
					Sleep(600);
					cout << "\n";
					cout << "\t.........\n";
					cout << "\t'     * '\n";
					cout << "\t'       '\n";
					cout << "\t' *     '\n";
					cout << "\t'''''''''\n";
					break;
				case 3:
					Sleep(600);
					cout << "\n";
					cout << "\t.........\n";
					cout << "\t'     * '\n";
					cout << "\t'   *   '\n";
					cout << "\t' *     '\n";
					cout << "\t'''''''''\n";
					break;
				case 4:
					Sleep(600);
					cout << "\n";
					cout << "\t.........\n";
					cout << "\t' *   * '\n";
					cout << "\t'       '\n";
					cout << "\t' *   * '\n";
					cout << "\t'''''''''\n";
					break;
				case 5:
					Sleep(600);
					cout << "\n";
					cout << "\t.........\n";
					cout << "\t' *   * '\n";
					cout << "\t'   *   '\n";
					cout << "\t' *   * '\n";
					cout << "\t'''''''''\n";
					break;
				case 6:
					Sleep(600);
					cout << "\n";
					cout << "\t.........\n";
					cout << "\t' *   * '\n";
					cout << "\t' *   * '\n";
					cout << "\t' *   * '\n";
					cout << "\t'''''''''\n";
					break;
				}
			}
		}
		if (Exit == 1)
			break;
		if (gamer > comp)
			cout << "\n\tYOU ARE WIN!!!\n\n";
		else if (gamer == comp)
			cout << "\n\tУ вас ничья\n\n";
		else
			cout << "\n\tYOU LOSE...\n\n";
		cout << " Your score: " << gamer << ", ИИ: " << comp << "\n";
		cout << " Начать заново - нажмите 7, закончить - 0 -> "; cin >> play;
		if (play == 0)
			break;
	}
	system("pause");
}






Задание 1. В одномерном массиве, заполненном случайными числами, определить минимальный и максимальный элементы.




#include<iostream>
#include<time.h>
using namespace std;
int main()
{
	srand(time(0));
	const int n = 20;
	int mas[n];
	cout << " [";
	for (int i = 0; i < n; i++)
	{
		mas[i] = rand() % 50;
		(i != n - 1) ? cout << mas[i] << ", " : cout << mas[i];
	}
	cout << "]\n";
	int max = mas[0], min = mas[0];
	for (int i = 1; i < n; i++)
	{
		if (mas[i] < min)
			min = mas[i];
		if (mas[i] > max)
			max = mas[i];
	}
	cout << " Min element - " << min << ", Max element - " << max << "\n";
	system("pause");
}



Задание 2. Пользователь вводит прибыль фирмы за год
(12 месяцев). Затем пользователь вводит диапазон (например, 3 и 6 — поиск между 3-м и 6-м месяцем). Необходимо
определить месяц, в котором прибыль была максимальна
и месяц, в котором прибыль была минимальна с учетом
выбранного диапазона.

*** не правильно найдена позиция мин и мах ****


#include<iostream>
using namespace std;
int main()
{
	const int n = 12;
	int mas[n];
	for (int i = 0; i < n; i++)
	{
		cout << " Enter the amount of money of the " << i + 1 << "th month -> ";
		cin >> mas[i];
	}
	int left, right;
	cout << " Enter left border -> "; cin >> left;
	cout << " Enter right border -> "; cin >> right;
	int min, max, position_min, position_max;
	min = mas[left - 1]; max = mas[left - 1];//первый эл-т, который попадет в новую выборку 
	for (int i = 0; i < n; i++)
	{
		if (i >= left - 1 && i <= right - 1)
		{			
			if (mas[i] <= min)
			{
				min = mas[i];
				position_min = i;
			}
			if (mas[i] >= max)
			{
				max = mas[i];
				position_max = i;
			}
		}		
	}
	cout << " In this diapason max money in " << position_max + 1 << " month, and min money in "<< position_min + 1<< " month\n";
	system("pause");
}





Задание 3. В одномерном массиве, состоящем из N вещественных чисел вычислить:
■ Сумму отрицательных элементов.
■ Произведение элементов, находящихся между min
и max элементами.
■ Произведение элементов с четными номерами.
■ Сумму элементов, находящихся между первым и последним отрицательными элементами.




#include<iostream>
#include<time.h>
using namespace std;
int main()
{
	srand(time(0));
	const int n = 14;
	double mas[n];
	double left = -7, right = 7;
	cout << " [";
	for (int i = 0; i < n; i++)
	{
		mas[i] = (double)rand() / (double)RAND_MAX * (right - left) + left;
		(i != n - 1) ? cout << mas[i] << ", " : cout << mas[i];
	}
	cout << "]\n";
	//1
	double sum_negative=0;
	for (int i = 0; i < n; i++)
	{
		if (mas[i] < 0)
			sum_negative += mas[i];

	}
	//2
	double max = mas[0], min = mas[0];
	int position_min, position_max;
	for (int i = 0; i < n; i++)
	{
		if (mas[i] <= min)
		{
			min = mas[i];
			position_min = i;
		}	
		if (mas[i] >= max)
		{
			max = mas[i];
			position_max = i;
		}	
	}
	double multiply_min_max = 1;
	for (int i = 0; i < n; i++)
	{
		if (position_min < position_max)
		{
			if (i > position_min && i < position_max)
			{
				multiply_min_max *= mas[i];
			}
		}
		else
		{
			if (i > position_max && i < position_min)
			{
				multiply_min_max *= mas[i];
			}
		}
	}
	//3
	double even_multy = 1;
	for (int i = 0; i < n; i++)
	{
		int int_i = mas[i] / 1;
		if (int_i % 2 == 0 && int_i != 0)
		{
			even_multy *= mas[i];
		}
	}
	//4
	double first_negative, last_negative;
	int position_first_negative, position_last_negative;
	for (int i = n - 1; i >= 0; i--)
	{
		if (mas[i] < 0)
		{
			first_negative = mas[i];
			position_first_negative = i;
		}
	}
	for (int i = 0; i < n; i++)
	{
		if (mas[i] < 0)
		{
			last_negative = mas[i];
			position_last_negative = i;
		}
	}
	double sum_between_negative=0;
	for (int i = 0; i < n; i++)
	{
		if (i > position_first_negative && i < position_last_negative)
		{
			sum_between_negative += mas[i];
		}
	}
	cout << "\n 1. Sum negative numbers: "<<sum_negative<< "\n";
	cout << " 2. Multiply between min and max: " << multiply_min_max << "\n"; 
	cout << " 3. Multiply even numbers: " << even_multy << "\n";
	cout << " 4. Sum between first negative and last negative: " << sum_between_negative << "\n";
	system("pause");
}



Задание 1. Вывести на экран прямоугольник с заданными
сторонами заданным символом.


#include<iostream>
using namespace std;
int main()
{
	int first, second;
	char symbol;
	cout << " Enter size of first side -> "; cin >> first;
	cout << " Enter size of second side -> "; cin >> second;
	cout << " Enter symbol -> "; cin >> symbol;
	for (int j = 1; j <= first; j++)
	{
		cout << "\t";
		for (int i = 1; i <= second; i++)
		{
			cout << symbol;
		}
		cout << "\n";
	}
	system("pause");
}





Задание 2. Вывести на экран пустой прямоугольник
с заданными размерами заданным символом заданного
цвета.




#include<iostream>
using namespace std;
int main()
{
	int first, second, color;
	char symbol;
	cout << " Enter size of first side -> "; cin >> first;
	cout << " Enter size of second side -> "; cin >> second;
	cout << " Enter symbol -> "; cin >> symbol;
	cout << " What color do you like?\n"
			" Green - enter 1\n"
			" Blue - enter 2\n"
			" Yelloy - enter 3\n"
			" Red - enter 4\n ";
			cin >> color;
	while (color < 1 || color > 4)
	{
		cout << " Enter correct color\n ";
		cin >> color;
	}
	for (int j = 1; j <= first; j++)
	{
		cout << "\t";
		for (int i = 1; i <= second; i++)
		{
			if (i == 1 || j == 1 || i == second || j == first)
			{
				cout << symbol;
				switch (color)
				{
				case 1: system("color 02");
					break;
				case 2: system("color 03");
					break;
				case 3: system("color 06");
					break;
				case 4: system("color 04");
					break;
				}
			}
			else
			{
				cout << " ";
			}
		}
		cout << "\n";
	}
	system("pause");
}


Задание 1. Написать, программу, которая вычисляет прибыль фирмы за 6 месяцев. Пользователь вводит прибыль
фирмы за каждый месяц.




#include<iostream>
using namespace std;
int main()
{
	int count = 0;
	const int n = 6;
	int mas[n];
	for (int i = 0; i < n; i++)
	{
		cout << " Enter sum of " << i + 1 << " month -> "; 
		cin >> mas[i];
		count += mas[i];
	}
	cout << " Sum of all " << n << " month is " << count << "\n";
	system("pause");
}




Задание 2. Написать программу, которая выводит одномерный массив в обратном порядке.




#include<iostream>
using namespace std;
int main()
{
	int count = 0;
	const int n = 5;
	int mas[n];
	for (int i = 0; i < n; i++)
	{
		cout << " Enter mas[" << i << "]: ";
		cin >> mas[i];
	}
	cout << " Result: [";
	for (int i = n - 1; i >= 0; i--)
	{
		(i != 0) ? cout << mas[i] << ", " : cout << mas[i];
	}
	cout << "]\n";
	system("pause");
}



Задание 3. Пользователь вводит длину сторон пятиугольника, каждая сторона заноситься в массив, необходимо
вычислить периметр пятиугольника (периметр — сумма
всех сторон).


#include<iostream>
using namespace std;
int main()
{
	const int n = 5;
	int mas[n];
	for (int i = 0; i < n; i++)
	{
		cout << " Enter side " << i + 1 << " -> ";
		cin >> mas[i];
	}
	int sum = 0;
	for (int i = n - 1; i >= 0; i--)
	{
		sum += mas[i];
	}
	cout << " Perimetr is " << sum << "\n";
	system("pause");
}



Задание 4. Пользователь вводит прибыль фирмы за год
(12 месяцев). Необходимо определить месяц, в котором
прибыль была максимальна и месяц, в котором прибыль
была минимальна.


*** не правильно найдена позиция мин и мах ****


#include<iostream>
using namespace std;
int main()
{
	const int n = 12;
	int mas[n];
	for (int i = 0; i < n; i++)
	{
		cout << " Enter the amount of money of the " << i + 1 << "th month -> ";
		cin >> mas[i];
	}
	int min = mas[0], max = mas[0], position_min, position_max;
	for (int i = 0; i < n; i++)
	{
		if (mas[i] <= min)
		{
			min = mas[i];
			position_min = i;
		}
		else if (mas[i] >= max)
		{
			max = mas[i];
			position_max = i;
		}
	}
	cout << " Max money in " << position_max + 1 << " month, and min money in " << position_min + 1 << " month\n";
	system("pause");
}


143. Написать программу, которая вводит с клавиатуры одномерный массив из 5 целых чисел, после чего 
выводит количество ненулевых элементов. Перед вводом каждого элемента должна выводиться подсказка 
с номером элемента.

#include<iostream>
using namespace std;
int main()
{
	const int n = 5;
	int mas[n], count = 0;
	for (int j = 0; j < n; j++)
	{
		cout << " Enter mas[" << j << "]: "; cin >> mas[j];
	}
	for (int i = 0; i < n; i++)
	{
		if (mas[i] != 0)
		{
			count += 1;
		}
	}
	cout << " Quantity of elements that not a zero: " << count << "\n";
	system("pause");
}



144. Написать программу, которая выводит минимальный элемент введенного с клавиатуры массива целых чисел. 


#include<iostream>
using namespace std;
int main()
{
	const int n = 5;
	int mas[n];
	for (int j = 0; j < n; j++)
	{
		cout << " Enter mas[" << j << "]: "; cin >> mas[j];
	}
	int min = mas[0];
	int position;
	for (int i = 0; i < 5; i++)
	{
		if (mas[i] <= min)
		{
			min = mas[i];
			position = i;
		}
	}
	cout << " Minimum element is mas[" << position << "]\n";
	system("pause");
}



146. Написать программу, которая вычисляет среднее арифметическое ненулевых элементов 
введенного с клавиатуры массива целых чисел. 




#include<iostream>
using namespace std;
int main()
{
	const int n = 5;
	int mas[n];
	for (int j = 0; j < n; j++)
	{
		cout << " Enter mas[" << j << "]: "; cin >> mas[j];
	}
	float sum = 0, count = 0;
	for (int i = 0; i < 5; i++)
	{
		if (mas[i] != 0)
		{
			sum += mas[i];
			count += 1;
		}
	}
	cout << " Middle number of elements array is: " << sum / count << "\n";
	system("pause");
}




147. Написать программу, которая вычисляет среднее арифметическое элементов массива без учета 
минимального и максимального элементов массива. 





#include<iostream>
using namespace std;
int main()
{
	const int n = 5;
	int mas[n];
	for (int j = 0; j < n; j++)
	{
		cout << " Enter mas[" << j << "]: "; cin >> mas[j];
	}
	int min = mas[0], max = mas[0];
	for (int i = 1; i < n; i++)
	{
		if (mas[i] < min)
		{
			min = mas[i];
		}
	}
	for (int i = 1; i < n; i++)
	{
		if (mas[i] > max)
		{
			max = mas[i];
		}
	}
	float sum = 0, count = 0;
	for (int i = 0; i < n; i++)
	{
		if (mas[i] != min && mas[i] != max)
		{
			sum += mas[i];
			count += 1;		
		}
	}
	cout << " Middle number of elements array (without min and max) is: " << sum / count << "\n";
	system("pause");
}




150. Написать программу, которая проверяет, представляют ли элементы введенного с клавиатуры 
массива возрастающую последовательность.



#include<iostream>
using namespace std;
int main()
{
	const int n = 5;
	int mas[n];
	for (int i = 0; i < n; i++)
	{
		cout << " Enter mas[" << i << "]: "; cin >> mas[i];
	}
	int count = 0;
	for (int i = 1; i < n; i++)
	{
		if (mas[i] >= mas[i - 1])
			count += 1;
	}
	if (count == n - 1)
		cout << " Yes\n";
	else
		cout << " No\n";
	system("pause");
}



151. Написать программу, которая вычисляет, сколько раз введенное с клавиатуры число встречается в массиве.



#include<iostream>
using namespace std;
int main()
{
	const int n = 5;
	int mas[n];
	for (int i = 0; i < n; i++)
	{
		cout << " Enter mas[" << i << "]: "; cin >> mas[i];
	}
	int check, count = 0;
	cout << " Enter check number -> "; cin >> check;
	for (int i = 0; i < n; i++)
	{
		if (check == mas[i])
			count += 1;
	}
	cout << " The check number in the array is " << count << " times\n";
	system("pause");
}




152. Написать программу, которая проверяет, есть ли во введенном с клавиатуры массиве 
элементы с одинаковым значением.





#include<iostream>
using namespace std;
int main()
{
	const int n = 5;
	int mas[n];
	for (int i = 0; i < n; i++)
	{
		cout << " Enter mas[" << i << "]: "; cin >> mas[i];
	}
	int count = 0;
	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < n; j++)
		{
			if (mas[i] == mas[j])
				count += 1;
		}		
	}
	if (count > 5) // совпвдений должно быть не больше 5, т.к. в цикле mas[0] == mas[0] и так на каждой итерации будет минимум одно совпвдение
		cout << " Yes\n";
	else
		cout << " No\n";
	system("pause");
}


157. Написать программу, которая определяет количество учеников в классе, чей рост превышает средний.



#include<iostream>
#include<time.h>
using namespace std;
int main()
{
	srand(time(0));
	const int n = 30;
	double mas[n];
	double min = 1.45, max = 2.08, middle = 1.7;
	int count = 0;
	for (int i = 0; i < n; i++)
	{
		mas[i] = (double)rand() / (double)RAND_MAX * (max - min) + min;
		if (mas[i] >= middle)
			count += 1;
	}
	cout << " Quantity tall students " << count << "\n";
	system("pause");
}






Написать программу, которая для чисел в диапазоне
от A до B определяла количество их делителей. К примеру, A= 10, B = 15.
Делители для числа 10 — 1 2 5 10;
Делители для числа 11 — 1 11;



#include <iostream>
using namespace std;
int main()
{
    int left, right;
    cout << " Enter left -> "; cin >> left;
    cout << " Enter right -> "; cin >> right;
    for (int i = left; i <= right; i++)
    {
        int count = 0;
        for (int j = 1; j <= i; j++)
        {
            if (i % j == 0)
            {
                count += 1;
            }
        }
        cout << " for " << i << " quantity: " << count << "\n";
    }
    system("pause");
}






2. Создать программу, которая выводит на экран простые
числа в диапазоне от 2 до 1000. (Число называется простым, если оно делится только на 1 и на само себя без
остатка; причем числа 1 и 2 простыми не считаются).




#include <iostream>
using namespace std;
int main()
{
    cout << "2\n";
    for (int i = 3; i <= 1000; i++)
    {
        int count = 0;
        for (int j = 2; j < i; j++)
        {
            if (i % j == 0)
            {
                count += 1;
            }
        }
        if (count == 0)
            cout << i << "\n";
    }
    system("pause");
}




3. Написать программу, которая выводит на экран снежинку




#include <iostream>
using namespace std;
int main()
{
    int width;
    cout << " Enter left -> "; cin >> width;
    for (int i = 1; i <= width; i++)
    {
        for (int j = 1; j <= width; j++)
        {
            if (i == j || i + j == width + 1 || j == width / 2 + 1 || i == width / 2 + 1)
                cout << "*"; 
            else
                cout << " ";
        }
        cout << "\n";
    }
    system("pause");
}





4. На чемодане стоит трехзначный код. Он состоит из
цифр, которые не повторяются. Напишите программу,
которая выведет все возможные такие комбинации
цифр. А также определите сколько времени понадобится для открытия чемодана в худшем случае, если
на один такой набор уходит 3 секунды.





#include <iostream>
using namespace std;
int main()
{
    int count = 0;
    for (int i = 0; i < 10; i++)
    {
        for (int j = 0; j < 10; j++)
        {
            for (int k = 0; k < 10; k++)
            {
                if (i != j && i != k && j != k)
                {
                    cout << i << j << k << "\n";
                    count += 1;
                }
            
                
            }
        }
        
    }
    cout <<" Need time: " <<count * 3 / 60 <<" min\n";
    system("pause");
}




3. Дана температура воздуха за каждый день января.
Определить:
а) среднюю температуру за месяц;
б) сколько раз температура воздуха опускалась нижеуказанной метки.



#include <iostream>
#include <time.h>
using namespace std;
int main()
{
    srand(time(0));
    const int jan = 31;
    int arr[jan];
    int t1 = -10, t2 = 10, t_mark;
    float count = 0;
    int mark_count = 0;
    cout << " Enter the temperature that interests you from -10 to 10 -> "; cin >> t_mark;
    for (int i = 0; i < jan; i++)
    {
        int R = t1 + rand() % (t2 - t1 + 1);
        arr[i] = R;
        cout << arr[i] << "\n";
        count += arr[i];
        if (arr[i] < t_mark)
            mark_count += 1;
    }
    cout << " Average temperature of month: " << count / jan << "\n"
            " The temperature was below this mark " << mark_count << " times.\n";
    system("pause");
}




4. В массиве хранится информация о стоимости 10 марок
автомобилей. Определить сумму наиболее дорогого
автомобиля и узнать его номер. Если таких автомобилей несколько, определить:
а) номер первого такого автомобиля;
б) номер последнего такого автомобиля.



#include <iostream>
#include <time.h>
using namespace std;
int main()
{
    srand(time(0));
    const int n = 10;
    int arr[n];
    int a = 5000, b = 5010;
    for (int i = 0; i < n; i++)
    {
        int R = a + rand() % (b - a + 1);
        arr[i] = R;
        cout << arr[i] << "\n";
    }
    int last_max = arr[0], count = 0;
    int last_position_max;
    for (int i = 0; i < n; i++)
    {
        if (arr[i] >= last_max)
        {
            last_max = arr[i];
            last_position_max = i;
            count += 1;
        }      
    }
    int count_max = 0;
    for (int i = 0; i < n; i++)
    {
        if (last_max == arr[i])
            count_max += 1;
    }
    int first_position_max;
    if (count_max > 1)
    {
       int first_max = arr[0];
       for (int i = 0; i < n; i++)
       {
          if (arr[i] == last_max)
          {
             first_max = arr[i];
             first_position_max = i;
             break;
          }
       }
    }
    cout <<"\n The price of the most expensive car - " << last_max << "\n";
    cout <<" The position of the most expensive car - " << last_position_max + 1 << "\n";
    if (count_max > 1)
    {
        cout << " Number first of the most expensive car - " << first_position_max + 1 << "\n";
        cout << " Number last of the most expensive car - " << last_position_max + 1 << "\n";
    }
    system("pause");
}






12.  Нахождение позиции минимума и максимума массива



#include<iostream>
using namespace std;
int main()
{
	const int size = 5;
	int arr[size];
	for (int i = 0; i < size; i++)
	{
		cout << " Enter the amount of money of the " << i + 1 << "th month -> ";
		cin >> arr[i];
	}
	int min = arr[0], max = arr[0];
	int position_min = 0, position_max = 0;
	for (int i = 1; i < size; i++)
	{
		if (arr[i] < min)
		{
			min = arr[i];
			position_min = i;
		}
		if (arr[i] > max)
		{
			max = arr[i];
			position_max = i;
		}
	}
	cout << " Max money in " << position_max + 1 << " month, and min money in " << position_min + 1 << " month\n";
	system("pause");
}



Задание 2. Пользователь вводит прибыль фирмы за год
(12 месяцев). Затем пользователь вводит диапазон (например, 3 и 6 — поиск между 3-м и 6-м месяцем). Необходимо
определить месяц, в котором прибыль была максимальна
и месяц, в котором прибыль была минимальна с учетом
выбранного диапазона.




#include <iostream>
#include <time.h>
using namespace std;
int main()
{
	srand(time(0));
	const int n = 12;
	int mas[n];
	int a = 10, b = 40;
	for (int i = 0; i < n; i++)
	{
		int R = a + rand() % (b - a + 1);
		mas[i] = R;
		cout << i + 1 <<" : " << mas[i] << "\n";
	}
	int left, right;
	cout << "\n Enter left border -> "; cin >> left;
	cout << " Enter right border -> "; cin >> right;
	int max = mas[left], min = mas[left];
	int position_max = left, position_min = left;
	for (int i = left + 1; i <= right; i++)
	{
		if (mas[i] > max)
		{
			max = mas[i];
			position_max = i;
		}
		if (mas[i] < min)
		{
			min = mas[i];
			position_min = i;
		}
	}
	cout << " In this diapason max money in " << position_max + 1 << " month, and min money in " << position_min + 1 << " month\n";




********5. Написать программу, которая находит в массиве значения, повторяющиеся два и более раз, и показывает
их на экран


#include <iostream>
#include <time.h>
using namespace std;
int main()
{
    srand(time(0));
    const int n = 10;
    int arr[n];
    int a = 10, b = 40;
    for (int i = 0; i < n; i++)
    {
        int R = a + rand() % (b - a + 1);
        arr[i] = R;
        cout << arr[i] << "\n";
    }
    cout << "\n\n";
    for (int i = 0; i < n; i++)
    {
        int count = 0;
        for (int j = 0; j < n; j++)
        {
            if (arr[i] == arr[j])
            {
                count += 1;   
            }
        }
        if (count > 1)
        {
            cout << arr[i] << "\n";
        }
    }
	system("pause");
} 







6. Заполнить два целочисленных массива A[10] и B[10].
Сформировать третий массив X[20], элементы которого будут взяты из A и B в порядке:
а) чередования (a0, b0, a1, b1, a2, b2, …, a9, b9);
б) следования (a0, a1, a2,…, a9, b0, b1, b2,…, b9).



Задание 2. Написать имитацию кассового аппарата для
магазина, торгующего новогодними товарами. Кассир
должен выбрать товар из списка, ввести его количество,
затем выбрать следующий товар. По завершению ввода
вывести на экран всю сумму покупки. Предусмотреть
наличие скидки. В списке товаров должно быть не меньше
4-х товаров, должна отображаться их цена. Предусмотреть
неправильно вводимые данные.
■ Реализовать возможность обслуживания нескольких
клиентов подряд;
■ Хранение общей выручки магазина;
■ Ограничить количество товара в магазине.



Задание 1. Написать программу, копирующую последовательно элементы одного массива размером 10 элементов
в 2 массива размером 5 элементов каждый.


#include<iostream>
#include<time.h>
using namespace std;
int main()
{
	srand(time(0));
	const int size = 10;
	int arr[size];
	cout << "\n Array original:\n";
	for (int i = 0; i < size; i++)
	{
		arr[i] = rand() % 10;
		cout << arr[i] << "\t";
	}
	cout << "\n\n Array 2:\n";
	int arr2[size / 2];
	for (int i = 0; i < size / 2; i++)
	{
		arr2[i] = arr[i];
		cout << arr2[i] << "\t";
	}
	cout << "\n\n Array 3:\n";
	int arr3[size / 2];
	for (int i = size / 2, j = 0; j < size / 2; i++, j++)
	{
		arr3[j] = arr[i];
		cout << arr3[j] << "\t";
	}
	system("pause");
}




Задание 2. Напишите программу, которая выполняет
поэлементную сумму двух массивов и результат заносит
в третий массив.



#include<iostream>
#include<time.h>
using namespace std;
int main()
{
	srand(time(0));
	const int size = 7;
	int arr1[size];
	cout << "\n Array 1:\n";
	for (int i = 0; i < size; i++)
	{
		arr1[i] = rand() % 10;
		cout << arr1[i] << "\t";
	}
	cout << "\n\n Array 2:\n";
	int arr2[size];
	for (int i = 0; i < size; i++)
	{
		arr2[i] = rand() % 10;
		cout << arr2[i] << "\t";
	}
	cout << "\n\n Sum of arrays:\n";
	int arr_sum[size];
	for (int i = 0; i < size; i++)
	{
		arr_sum[i] = arr1[i] + arr2[i];
		cout << arr_sum[i] << "\t";
	}
	system("pause");
}



Задание 1. Написать программу «справочник». Создать
два одномерных массива. Один массив хранит номера
ICQ, второй — телефонные номера. Реализовать меню
для пользователя:
■ Отсортировать по номерам ICQ;
■ Отсортировать по номерам телефона;
■ Вывести список пользователей;
■ Выход.



#include<iostream>
#include<time.h>
using namespace std;
int main()
{
    setlocale(LC_ALL, "rus");
    srand(time(0));
    cout << "\n  Справочник\n\n";
    const int size = 10;
    int isq[size];
    int phone[size];
    int names[size];
    cout << " №\tНомера ICQ:\tНомера телефонов:\n\n";
    for (int i = 0; i < size; i++)
    {
        names[i] = i + 1;
        cout << " " << names[i] << "\t";
        isq[i] = 100112345 + rand();
        cout << isq[i] << "\t";
        phone[i] = 934523451 + rand();
        cout << "0" << phone[i] << "\n";
    }

    int Exit = 0;
    while (1)
    {
        int choose;
        cout << "\n Отсортировать по номерам ICQ - нажмите 1\n"
            " Отсортировать по номерам телефона - нажмите 2\n"
            " Вывести список пользователей по выбранной сортировке - нажмите 3\n"
            " Выход - нажмите 4\n "; 
        cin >> choose;

        switch (choose)
        {
            case 1: for (int i = 0; i < size - 1; i++)
                    {
                        bool f = 0;
                        for (int j = 0; j < size - 1 - i; j++)
                        {
                            if (isq[j] > isq[j + 1])
                            {
                                int tmp_isq = isq[j];
                                isq[j] = isq[j + 1];
                                isq[j + 1] = tmp_isq;

                                int tmp_phone = phone[j];
                                phone[j] = phone[j + 1];
                                phone[j + 1] = tmp_phone;

                                int tmp_names = names[j];
                                names[j] = names[j + 1];
                                names[j + 1] = tmp_names;

                                f = 1;
                            }
                        }
                        if (f == 0)
                            break;
                    }

                      cout << "\n\n №\tНомера ICQ:\tНомера телефонов:\n\n";
                      for (int i = 0; i < size; i++)
                      {
                          cout << " " << i + 1 << "\t";
                          cout << isq[i] << "\t";
                          cout << "0" << phone[i] << "\n";
                      }
              break;
            case 2: for (int i = 0; i < size - 1; i++)
                    {
                        bool f = 0;
                        for (int j = 0; j < size - 1 - i; j++)
                        {
                            if (phone[j] > phone[j + 1])
                            {
                                int tmp_phone = phone[j];
                                phone[j] = phone[j + 1];
                                phone[j + 1] = tmp_phone;

                                int tmp_isq = isq[j];
                                isq[j] = isq[j + 1];
                                isq[j + 1] = tmp_isq;

                                int tmp_names = names[j];
                                names[j] = names[j + 1];
                                names[j + 1] = tmp_names;

                                f = 1;
                            }
                        }
                        if (f == 0)
                            break;
                    }

                          cout << "\n\n №\tНомера телефонов:\tНомера ICQ:\n\n";
                          for (int i = 0; i < size; i++)
                          {
                              cout << " " << i + 1 << "\t";
                              cout << "0" << phone[i] << "\t\t";
                              cout << isq[i] << "\n";
                          }
                  break;
            case 3: cout << "\n\n №\tСписок бывших:\n\n";
                    for (int i = 0; i < size; i++)
                    {
                        cout << " " << i + 1 << "\t";
                        if (names[i] == 1)
                            cout << " Алёна\n";
                        else if (names[i] == 2)
                            cout << " Танюша\n";
                        else if (names[i] == 3)
                            cout << " Вера\n";
                        else if (names[i] == 4)
                            cout << " Вероника\n";
                        else if (names[i] == 5)
                            cout << " Анжелика\n";
                        else if (names[i] == 6)
                            cout << " Виктория\n";
                        else if (names[i] == 7)
                            cout << " Оля\n";
                        else if (names[i] == 8)
                            cout << " Викуля\n";
                        else if (names[i] == 9)
                            cout << " Маша\n";
                        else if (names[i] == 10)
                            cout << " Настя\n";
                    }
                  break;
            case 4: Exit = 1;
                break;
        }
        if (Exit == 1)
            break;
    }
    system("pause");
}



Задание 2. Написать программу, реализующую сортировку массива методом усовершенствованной сортировки
пузырьковым методом. Усовершенствование состоит
в том, чтобы анализировать количество перестановок на
каждом шагу, если это количество равно нулю, то продолжать сортировку нет смысла — массив отсортирован.



#include<iostream>
#include<time.h>
using namespace std;
int main()
{
    srand(time(0));
    const int size = 8;
    int arr[size];
    cout << "\n Array original:\n";
    for (int i = 0; i < size; i++)
    {
        arr[i] = rand() % 10;
        cout << arr[i] << "\t";
    }

    for (int i = 0; i < size - 1; i++)
    {
        bool f = 0;
        for (int j = 0; j < size - 1 - i; j++)
        {
            if (arr[j] > arr[j + 1])
            {
                int tmp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = tmp;
                f = 1;
            }
        }
        if (f == 0)
            break;
    }

    cout << "\n\n Array result:\n";
    for (int i = 0; i < size; i++)
    {
        cout << arr[i] << "\t";
    }
    system("pause");
}




Задание 3. Есть стопка оладий различного радиуса. Единственная операция, проводимая с ними — между любыми
двумя суем лопатку и меняем порядок оладий над лопаткой
на обратный. Необходимо за минимальное количество
операций таких отсортировать снизу вверх по убыванию
радиуса.



#include<iostream>
#include<time.h>
using namespace std;
int main()
{
    srand(time(0));
    const int size = 8;
    int arr[size];
    cout << "\n Array original:\n";
    for (int i = 0; i < size; i++)
    {
        arr[i] = rand() % 10;
        cout << arr[i] << "\t";
    }

    for (int i = 0; i < size; i++)
    {
        int imin = 0;
        for (int j = 1; j < size - i; j++)
        {
            if (arr[j] < arr[imin])
                imin = j;
        }
        int left = 0;
        int right = imin;
        while (left < right)
        {
            int tmp = arr[left];
            arr[left] = arr[right];
            arr[right] = tmp;
            left++; right--;
        }
        left = 0;
        right = size - i - 1;
        while (left < right)
        {
            int tmp = arr[left];
            arr[left] = arr[right];
            arr[right] = tmp;
            left++; right--;
        }
    }

    cout << "\n\n Array result:\n";
    for (int i = 0; i < size; i++)
    {
        cout << arr[i] << "\t";
    }
    system("pause");
}




Задание 1. Сжать (сдвинуть элементы) массив, удалив из
него все 0, и заполнить освободившиеся справа элементы
значениями -1.


#include<iostream>
#include<time.h>
using namespace std;
int main()
{
    srand(time(0));
    const int size = 10;
    int arr[size];
    cout << "\n Array original:\n";
    for (int i = 0; i < size; i++)
    {
        arr[i] = rand() % 5;
        cout << arr[i] << "\t";
    }
    for (int i = 0; i < size; i++)
    {
        if (arr[i] == 0)
        {
            for (int j = i; j < size - 1; j++)
            {
                arr[j] = arr[j + 1];
            }
            arr[size - 1] = -1;
            i--;
        }
    }
    cout << "\n\n Array after:\n";
    for (int i = 0; i < size; i++)
        cout << arr[i] << "\t";
    cout << "\n";
    system("pause");
}


Задание 2. Написать программу, копирующую элементы
2-х массивов размером 5 элементов каждый в один массив размером 10 элементов следующим образом: сначала
копируются последовательно все элементы, большие 0,
затем последовательно все элементы, равные 0, а затем
последовательно все элементы, меньшие 0.



#include<iostream>
#include<time.h>
using namespace std;
int main()
{
    srand(time(0));
    const int size = 5;
    int arr1[size], arr2[size];
    cout << "\n Array 1:\n";
    for (int i = 0; i < size; i++)
    {
        arr1[i] = rand() % 7 - 3;
        cout << arr1[i] << "\t";
    }
    cout << "\n\n Array 2:\n";
    for (int i = 0; i < size; i++)
    {
        arr2[i] = rand() % 7 - 3;
        cout << arr2[i] << "\t";
    }
    int arr_full[size * 2];
    int sum = 0;
    for (int i = 0, j = 0; i < size; i++)
    {
        if (arr1[i] > 0)
        {
            arr_full[j] = arr1[i];
            sum += 1;
            j++;
        }
    }
    for (int i = 0, j = sum; i < size; i++)
    {
        if (arr2[i] > 0)
        {
            arr_full[j] = arr2[i];
            sum += 1;
            j++;
        }
    }
    for (int i = 0, j = sum; i < size; i++)
    {
        if (arr1[i] == 0)
        {
            arr_full[j] = arr1[i];
            sum += 1;
            j++;
        }
    }
    for (int i = 0, j = sum; i < size; i++)
    {
        if (arr2[i] == 0)
        {
            arr_full[j] = arr2[i];
            sum += 1;
            j++;
        }
    }
    for (int i = 0, j = sum; i < size; i++)
    {
        if (arr1[i] < 0)
        {
            arr_full[j] = arr1[i];
            sum += 1;
            j++;
        }
    }
    for (int i = 0, j = sum; i < size; i++)
    {
        if (arr2[i] < 0)
        {
            arr_full[j] = arr2[i];
            sum += 1;
            j++;
        }
    }
    cout << "\n\n Array Full:\n";
    for (int i = 0; i < size * 2; i++)
        cout << arr_full[i] << "\t";
    system("pause");
}



Задание 1. Написать программу, выполняющую сортировку одномерного массива целых чисел методом
пузырьковой сортировки.


#include<iostream>
#include<time.h>
using namespace std;
int main()
{
    srand(time(0));
    const int size = 8;
    int arr[size];
    cout << "\n Array original:\n";
    for (int i = 0; i < size; i++)
    {
        arr[i] = rand() % 10;
        cout << arr[i] << "\t";
    }

    for (int i = 0; i < size - 1; i++)
    {
        bool f = 0;
        for (int j = 0; j < size - 1 - i; j++)
        {
            if (arr[j] > arr[j + 1])
            {
                int tmp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = tmp;
                f = 1;
            }
        }
        if (f == 0)
            break;
    }

    cout << "\n Array result:\n";
    for (int i = 0; i < size; i++)
    {
        cout << arr[i] << "\t";
    }
    system("pause");
}



Задание 2. Написать программу, выполняющую сортировку одномерного массива целых чисел методом вставок.




#include<iostream>
#include<time.h>
using namespace std;
int main()
{
    srand(time(0));
    const int size = 8;
    int arr[size];
    cout << "\n Array original:\n";
    for (int i = 0; i < size; i++)
    {
        arr[i] = rand() % 10;
        cout << arr[i] << "\t";
    }

    for (int i = 1; i < size; i++)
    {
        int key = arr[i];
        int j = i - 1;
        while (j >= 0 && arr[j] > key)
        {
            arr[j + 1] = arr[j];
            arr[j] = key;
            j--;
        }
    }

    cout << "\n Array result:\n";
    for (int i = 0; i < size; i++)
    {
        cout << arr[i] << "\t";
    }
    system("pause");
}



Задание 3. Написать программу «успеваемость». Пользователь вводит 10 оценок студента. Реализовать меню
для пользователя
■ Вывод оценок (вывод содержимого массива);
■ Пересдача экзамена (пользователь вводит номер элемента массива и новую оценку);
■ Выходит ли стипендия (стипендия выходит, если
средний бал не ниже 10.7).


#include<iostream>
#include<time.h>
using namespace std;
int main()
{
    setlocale(LC_ALL, "Russian");
    srand(time(0));
    const int size = 10;
    int arr[size];
    cout << " Ведите 10 оценок студента по 12-бальной шкале:\n";
    for (int i = 0; i < size; i++)
    {
        cout << " Введите " << i + 1 << "-ю оценку студента -> "; cin >> arr[i];
    }
    while (1)
    {
        cout << "\n Список оценок студента:\n";
        float sum = 0;
        for (int i = 0; i < size; i++)
        {
            cout << arr[i] << "\t";
            sum += arr[i];
        }
        if (sum / size >= 10.7)
            cout << "\n Студент выходит на стипендию\n";
        else
            cout << "\n Студент не выходит на стипендию\n";
        int choose;
        cout << "\n Что бы внести изменения в журнал нажмите 1, для выхода нажмите 0 -> "; cin >> choose;
        if (choose == 0)
            break;
        int position, mark;
        cout << " Введите номер оценки, которую нужно изменить -> "; cin >> position;
        cout << " Введите новое значение оценки -> "; cin >> mark;
        arr[position - 1] = mark;
    }
    system("pause");
}




Задание 4. Написать программу, выполняющую сортировку одномерного массива целых чисел методом быстрого
поиска.



#include<iostream>
#include<time.h>
using namespace std;
int main()
{
    srand(time(0));
    const int size = 10;
    int arr[size];
    cout << " List of elements:\n";
    for (int i = 0; i < size; i++)
    {
        arr[i] = rand() % 10;
        cout <<  arr[i] << "\t";
    }

    for (int i = 0; i < size - 1; i++)
    {
        int min = i;
        for (int j = i + 1; j < size; j++)
        {
            if (arr[j] < arr[min])
            {
                min = j;
            }
        }
        if (min != i) 
        {
            int tmp = arr[i];
            arr[i] = arr[min];
            arr[min] = tmp;
        }
    }
    cout << "\n\n Sorted list:\n";
    for (int i = 0; i < size; i++)
    {
        cout << arr[i] << "\t";
    }

    int key;
    cout << "\n\n Which element do you want to find? "; cin >> key;
    int left = 0; 
    int right = size - 1;
    int middle;
    int f = -1;
    do
    {
        middle = (left + right) / 2; 
        if (arr[middle] == key) 
        {
            f = middle; 
            break;
        }
        else if (arr[middle] < key)
            left = middle + 1;
        else 
            right = middle - 1; 
    } while (left <= right); 
    if (f == -1) 
        cout << "\n No such element\n";
    else  
        cout << "\n Number of this element is " << f + 1 << "\n";
    system("pause");
}




Задание 5. Необходимо отсортировать первые две трети
массива в порядке возрастания если среднее арифметическое всех элементов больше нуля; иначе — лишь
первую треть. Остальную часть массива не сортировать,
а расположить в обратном порядке.



#include<iostream>
#include<time.h>
using namespace std;
int main()
{
    srand(time(0));
    const int size = 9;
    int arr[size];
    cout << " Array original:\n";
    float sum = 0;
    for (int i = 0; i < size; i++)
    {
        arr[i] = rand() % 10 - 4;
        cout <<  arr[i] << "\t";
        sum += arr[i];
    }
    cout << "\n\n Middle: " << sum / size <<"\n\n";

        bool f;
        int left = 0;
        int right;
        (sum / size > 0) ? right = size / 3 * 2 - 1 : right = size / 3 - 1;// отнимаем 1 что бы последний эл-т не участвовал в сортировке
        do
        {
            f = true;
            for (int i = left; i < right; i++)
            {
                if (arr[i] > arr[i + 1])
                {
                    int tmp = arr[i];
                    arr[i] = arr[i + 1];
                    arr[i + 1] = tmp;
                    f = false;
                }
            }
        } while (f == false);

        (sum / size > 0) ? left = size / 3 * 2 : left = size / 3;
        right = size - 1;
        while (left < right)
        {
            int tmp = arr[left];
            arr[left] = arr[right];
            arr[right] = tmp;
            left++; right--;
        }

        for (int i = 0; i < size; i++)
        {
            cout << arr[i] << "\t";
        }
    system("pause");
}







Задание 1. Напишите программу, которая создает двухмерный массив и заполняет его по следующему принципу:
пользователь вводит число (например, 3) первый элемент
массива принимает значение этого числа, последующий элемент массива принимает значение этого числа
умноженного на 2 (т.е. 6 для нашего примера), третий
элемент массива предыдущий элемент умноженный на
2 (т.е. 6*2=12 для нашего примера). Созданный массив
вывести на экран



#include<iostream>
#include<time.h>
using namespace std;
int main()
{
    srand(time(0));
    const int row = 4;
    const int col = 3;
    int arr[row][col];
    int num;
    cout << " Enter number -> "; cin >> num;
    for (int i = 0; i < row; i++)
    {
        for (int j = 0; j < col; j++)
        {
            arr[i][j] = num;
            cout << arr[i][j] << "\t";
            num *= 2;
        }
        cout << "\n";
    }
    system("pause");
}



Задание 2. Напишите программу, которая создает двухмерный массив и заполняет его по следующему принципу:
пользователь вводит число (например, 3) первый элемент
массива принимает значение этого числа, последующий
элемент массива принимает значение этого числа + 1 (т.е.
4 для нашего примера), третий элемент массива предыдущий элемент + 1 (т.е. 5 для нашего примера). Созданный
массив вывести на экран.




#include<iostream>
#include<time.h>
using namespace std;
int main()
{
    srand(time(0));
    const int row = 4;
    const int col = 3;
    int arr[row][col];
    int num;
    cout << " Enter number -> "; cin >> num;
    for (int i = 0; i < row; i++)
    {
        for (int j = 0; j < col; j++)
        {
            arr[i][j] = num;
            cout << arr[i][j] << "\t";
            num += 1;
        }
        cout << "\n";
    }
    system("pause");
}



Задание 3. Создайте двухмерный массив. Заполните его
случайными числами и покажите на экран. Пользователь
выбирает количество сдвигов и положение (влево, впра-
во, вверх, вниз). Выполнить сдвиг массива и показать на
экран полученный результат. Сдвиг циклический.
Например, если мы имеем следующий массив
1 2 0 4 5 3
4 5 3 9 0 1
и пользователь выбрал сдвиг на 2 разряда вправо, то мы
получим
5 3 1 2 0 4
0 1 4 5 3 9.




#include<iostream>
#include<time.h>
using namespace std;
int main()
{
    setlocale(LC_ALL, "rus");
    srand(time(0));
    const int n = 5;
    int arr[n][n];
    int num;
    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < n; j++)
        {
            arr[i][j] = rand() % 40;
            cout << arr[i][j] << "\t";
        }
        cout << "\n";
    }
    int shift, route;
    cout << "\n Введите количество сдвигов -> "; cin >> shift;
    cout << " Введите направление:\n"
        " Лево - нажмите 1\n"
        " Право - нажмите 2\n"
        " Вверх - нажмите 3\n"
        " Вниз - нажмите 4\n "; 
    cin >> route;
    switch (route)
    {
        case 1: for (int i = 0; i < shift; i++)
                {
                    for (int i = 0; i < n; i++)
                    {
                        for (int j = 0; j < n - 1; j++)
                        {
                            swap(arr[i][j], arr[i][j + 1]);
                        }
                    }
                }
              break;
        
        case 2: for (int i = 0; i < shift; i++)
                {
                    for (int i = 0; i < n; i++)
                    {
                        for (int j = n - 1; j > 0; j--)
                        {
                            swap(arr[i][j], arr[i][j - 1]);
                        }
                    }
                }
              break;

        case 3: for (int i = 0; i < shift; i++)
                {
                    for (int i = 0; i < n; i++)
                    {
                        for (int j = 0; j < n - 1; j++)
                        {
                            swap(arr[j][i], arr[j + 1][i]);
                        }
                    }
                }
              break;

        case 4: for (int i = 0; i < shift; i++)
                {
                    for (int i = 0; i < n; i++)
                    {
                        for (int j = n - 1; j > 0; j--)
                        {
                            swap(arr[j][i], arr[j - 1][i]);
                        }
                    }
                }
              break;       
    }
    cout << "\n";

    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < n; j++)
        {
            cout << arr[i][j] << "\t";
        }
        cout << "\n";
    }
    system("pause");
}



Задание 1. В двумерном массиве целых числе посчитать:
■ Сумму всех элементов массива;
■ Среднее арифметическое всех элементов массива;
■ Минимальный элемент;
■ Максимальный элемент.


#include<iostream>
#include<time.h>
using namespace std;
int main()
{
    srand(time(0));
    const int row = 10;
    const int col = 8;
    int arr[row][col];
    float sum = 0;
    for (int i = 0; i < row; i++)
    {
        for (int j = 0; j < col; j++)
        {
            arr[i][j] = rand() % 100;
            cout << arr[i][j] << "\t";
            sum += arr[i][j];
        }
        cout << "\n";
    }
    int min = arr[0][0];
    int max = arr[0][0];
    for (int i = 0; i < row; i++)
    {
        for (int j = 0; j < col; j++)
        {
            if (arr[i][j] < min)
                min = arr[i][j];
            if (arr[i][j] > max)
                max = arr[i][j];
        }
    }
    cout << "\n Sum: " << sum << "\n";
    cout << " Average: " << sum / (row * col) << "\n";
    cout << " Min: " << min << "\n";
    cout << " Max: " << max << "\n";
    system("pause");
}




Задание 2. В двумерном массиве целых чисел посчитать
сумму элементов: в каждой строке; в каждом столбце;
одновременно по всем строкам и всем столбцам. Оформить следующим образом:
  3 5 6 7 | 21
 12 1 1 1 | 15
 0 7 12 1 | 20
--------------------
15 3 19 9 | 56



#include<iostream>
#include<time.h>
using namespace std;
int main()
{
    srand(time(0));
    const int row = 5;
    const int col = 4;
    int arr[row][col];
    for (int i = 0; i < row; i++)
    {
        int sum = 0;
        for (int j = 0; j < col; j++)
        {
            arr[i][j] = rand() % 50;
            cout << arr[i][j] << "\t";
            sum += arr[i][j];
        }
        cout << "|\t" << sum << "\n";
    }
    cout << "\n-------------------------------------------\n\n";
    int sum_all = 0;
    for (int j = 0; j < col; j++)
    {
        int sum = 0;
        for (int i = 0; i < row; i++)
        {
            sum += arr[i][j];
        }
        cout << sum << "\t";
        sum_all += sum;
    }
    cout << "|\t" << sum_all << "\n";
    system("pause");
}





Задание 3. Напишите программу, в которой объявляется
массив размером 5×10 и массив размером 5×5. Первый
массив заполняется случайными числами, в диапазоне
от 0 до 50. Второй массив заполняется по следующему
принципу: первый элемент второго массива равен сумме
первого и второго элемента первого массива, второй элемент второго массива равен сумму третьего и четвертого
элемента первого массива.



#include<iostream>
#include<time.h>
using namespace std;
int main()
{
    srand(time(0));
    const int size1 = 5;
    const int size2 = 10;
    int big[size1][size2];
    int small[size1][size1];
    cout << " First array:\n";
    for (int i = 0; i < size1; i++)
    {
        for (int j = 0; j < size2; j++)
        {
            big[i][j] = rand() % 51;
            cout << big[i][j] << "\t";
        }
        cout << "\n";
    }
    cout << "\n\n Second array:\n";
    for (int i = 0; i < size1; i++)
    {
	добавить в фор еще один счетчик что бы правильно заполнился small[i][j] и не выходил за границы массива
        for (int j = 0; j < size2; j+=2)
        {
            small[i][j] = big[i][j] + big[i][j + 1];
            cout << small[i][j] << "\t";
        }
        cout << "\n";
    }
}




Задание 1. Написать функцию, которая принимает два
параметра: основание степени и показатель степени, и
вычисляет степень числа на основе полученных данных. 



#include<iostream>
using namespace std;
double my_pow(double, double);
int main()
{
    double num, pow;
    cout << " Enter number -> "; cin >> num;
    cout << " Enter power of number -> "; cin >> pow;
    cout <<" Result: "<< my_pow(num, pow) <<"\n";
    system("pause");
}
double my_pow(double num, double pow)
{
    double tmp = 1;
    if (pow == 0 || num == 0 && pow == 0)
        return tmp;
    for (int i = 0; i < abs(pow); i++)
    {
        if (pow > 0)
            tmp *= num;
        else
            tmp /= num;
    }
    return tmp;
}




Задание 2. Написать функцию, которая получает в качестве параметров 2 целых числа и возвращает сумму чисел
из диапазона между ними.



#include<iostream>
using namespace std;
int sum_span(int, int);
int main()
{
    int first, second;
    cout << " Enter first number -> "; cin >> first;
    cout << " Enter second number -> "; cin >> second;
    cout <<" Result: "<< sum_span(first, second) <<"\n";
    system("pause");
}
int sum_span(int first, int second)
{
    int left, right;
    if (first < second)
    {
        left = first;
        right = second;
    }
    else
    {
        left = second;
        right = first;
    }
    int sum = 0;
    for (int i = left + 1; i < right; i++)
    {
        sum += i;
    }
    return sum;
}



Задание 3. Число называется совершенным, если сумма
всех его делителей равна ему самому. Напишите функцию
поиска таких чисел во введенном интервале.





#include<iostream>
using namespace std;
void perfect(int, long long);
int main()
{
    int first;
    long long second;
    cout << " Enter first number -> "; cin >> first;
    cout << " Enter second number -> "; cin >> second;
    cout << "\n";
    perfect(first, second);
    cout << "\n";
    system("pause");
}
void perfect(int first, long long second)
{
    long long left, right;
    if (first < second)
    {
        left = first;
        right = second;
    }
    else
    {
        left = second;
        right = first;
    }
    
    for (long long i = left; i <= right; i++)
    {
        long long perfect = i;
        long long sum = 0;
        for (long long j = 1; j < perfect; j++)
        {
            if (perfect % j == 0)
                sum += j;  
        }
        if (sum == perfect && perfect != 0)
            cout << "perfect is " << perfect << "\n";
    }
}




Задание 4. Написать функцию, выводящую на экран
переданную ей игральную карту




#include<iostream>
using namespace std;
void card(int, int);
int main()
{
    int value, mast;
    cout << " Vvedite cartu: \n"
        " Karti s 6 do 10 - vpishite znachenia ot 6 do 10,\n"
        " Valet - 2,\n"
        " Dama - 3\n"
        " Korol - 4\n"
        " Tuz - 11\n "; cin >> value;
    cout << " Vvedite mast: \n"
        " Chirva - 1,\n"
        " Pica - 2\n"
        " Bubna - 3\n"
        " Kresta - 4\n "; cin >> mast;
    cout << "\n";
    card(value, mast);
    system("pause");
}
void card(int value, int mast)
{
    int row = 25;
    int col = 21;
    for (int i = 0; i < row; i++)
    {
        cout << " ";
        for (int j = 0; j < col; j++)
        {
            if (i == 0 && j == 0)
                cout << char(218);
            else if (i == 0 && j == col - 1)
                cout << char(191);
            else if (i == row - 1 && j == 0)
                cout << char(192);
            else if (i == row - 1 && j == col - 1)
                cout << char(217);
            else if (i == 0 || i == row - 1)
                cout << char(196);
            else if (j == 0 || j == col - 1)
                cout << char(179);
            else if (value != 10 && i == 1 && j == 2 || value != 10 && i == row - 2 && j == col - 3)
            {
                switch (value)
                {
                case 2: cout << "J";
                    break;
                case 3: cout << "Q";
                    break;
                case 4: cout << "K";
                    break;
                case 6: cout << 6;
                    break;
                case 7: cout << 7;
                    break;
                case 8: cout << 8;
                    break;
                case 9: cout << 9;
                    break;
                case 11: cout << "A";
                    break;
                }
            }
            else if (value == 10 && i == 1 && j == 2 || value == 10 && i == row - 2 && j == col - 4)
                cout << 1;
            else if (value == 10 && i == 1 && j == 3 || value == 10 && i == row - 2 && j == col - 3)
                cout << 0;
            else if (i == 3 && j == 2 || i == row - 4 && j == col - 3 || j > col / 2 - 3 && j < col / 2 + 3)
            {
                switch (mast)
                {
                case 1: cout << char(3);
                    break;
                case 2: cout << char(6);
                    break;
                case 3: cout << char(4);
                    break;
                case 4: cout << char(5);
                    break;
                }
            }
            else
                cout << " ";
        }
        cout << "\n";
    }
}





Задание 5. Написать функцию, которая определяет, является ли «счастливым» шестизначное число.




#include<iostream>
using namespace std;
void happy(int);
int main()
{
	setlocale(LC_ALL, "rus");
	int happy_number;
	cout << " Введите целое шестизначное число -> "; cin >> happy_number;
	happy(happy_number);
	system("pause");
}
void happy(int happy_number)
{
	int first = happy_number / 100000;
	int second = happy_number / 10000 % 10;
	int third = happy_number / 1000 % 10;
	int fourth = happy_number / 100 % 10;
	int fifth = happy_number / 10 % 10;
	int sixth = happy_number % 10;
	if (happy_number <= 99999 || happy_number > 999999)
	{
		cout << " Ошибка, число не 6-значное\n";
	}
	else if (first + second + third == fourth + fifth + sixth)
	{
		cout << " Bведенное число — СЧАСТЛИВОЕ\n";
	}
	else
	{
		cout << " Bведенное число — не счастливое\n";
	}
}





Задание 1. Написать функцию, реализующую алгоритм
линейного поиска заданного ключа в одномерном массиве.




#include<iostream>
#include<time.h>
using namespace std;
void rand_print(int[], int);
void search(int[], int, int);
int main()
{
	srand(time(0));
	const int size = 10;
	int arr[size], key;
	rand_print(arr, size);
	cout << "\n\n Enter key -> "; cin >> key;
	search(arr, size, key);
	system("pause");
}
void rand_print(int arr[], int size)
{
	for (int i = 0; i < size; i++)
	{
		arr[i] = rand() % 25;
		cout << arr[i] << "\t";
	}
}
void search(int arr[], int size, int key)
{
	bool flag = 0;
	int ikey = 0;
	for (int i = 0; i < size; i++)
	{
		if (arr[i] == key)
		{
			flag = 1;
			ikey = i;
		}
	}
	if (flag == 1)
		cout << " Key is on " << ikey + 1 << " position\n";
	else
		cout << " There is no key\n";
}




Задание 2. Написать функцию, реализующую алгоритм
бинарного поиска заданного ключа в одномерном массиве.



#include<iostream>
#include<time.h>
using namespace std;
void rand_print(int[], int);
void sort_choice(int[], int);
void Print(int[], int);
void search_binary(int[], int, int);
int main()
{
	srand(time(0));
	const int size = 10;
	int arr[size];
	cout << " Array original:\n";
	rand_print(arr, size);
	sort_choice(arr, size);
	cout << "\n\n\n Sorted list:\n";
	Print(arr, size);
	int key;
	cout << "\n\n\n Enter key -> "; cin >> key;
	search_binary(arr, size, key);
	system("pause");
}
void rand_print(int arr[], int size)
{
	for (int i = 0; i < size; i++)
	{
		arr[i] = rand() % 25;
		cout << arr[i] << "\t";
	}
}
void sort_choice(int arr[], int size)
{
	for (int i = 0; i < size - 1; i++)
	{
		int min = i;
		for (int j = i + 1; j < size; j++)
		{
			if (arr[j] < arr[min])
			{
				min = j;
			}
		}
		if (min != i)
		{
			int tmp = arr[i];
			arr[i] = arr[min];
			arr[min] = tmp;
		}
	}
}
void Print(int arr[], int size)
{
	for (int i = 0; i < size; i++)
		cout << arr[i] << "\t";
}
void search_binary(int arr[], int size, int key)
{
	int left = 0;
	int right = size - 1;
	int middle;
	int f = -1;
	do
	{
		middle = (left + right) / 2;
		if (arr[middle] == key)
		{
			f = middle;
			break;
		}
		else if (arr[middle] < key)
			left = middle + 1;
		else
			right = middle - 1;
	} while (left <= right);
	if (f == -1)
		cout << " There is no key\n";
	else
		cout << "\n Number of this element is " << f + 1 << "\n";
}




Задание 3. Написать функцию для перевода числа, записанного в двоичном виде, в десятичное представление. 




#include<iostream>
using namespace std;
void translation(long long);
int main()
{
	long long binary;
	cout << " Enter binary number -> "; cin >> binary;
	cout << "\n Get decimal number: ";
	translation(binary);
	system("pause");
}
void translation(long long binary)
{
	int length = 0;
	long long tmp = binary;
	while (binary != 0)
	{
		length += 1;
		binary /= 10;
	}
	long long sum = 0;
	for (int i = 1, j = 0; j < length; i *= 2, j++)
	{
		int check;
		check = tmp % 10;
		if (check == 1)
			sum += i;
		tmp /= 10;
	}
	cout << sum << "\n";
}







Задание 1. Написать функцию, выводящую на экран
прямоугольник с высотой N и шириной K.


#include<iostream>
using namespace std;
void pryamougolnic(int, int);
int main()
{
    int N, K;
    cout << " Enter height -> "; cin >> N;
    cout << " Enter width -> "; cin >> K;
    pryamougolnic(N, K);
    system("pause");
}
void pryamougolnic(int N, int K)
{
    for (int i = 0; i < N; i++)
    {
        for (int j = 0; j < K; j++)
        {
            cout << "*";
        }
        cout << "\n";
    }
}



Задание 2. Написать функцию, вычисляющую факториал
переданного ей числа.



#include<iostream>
using namespace std;
long long Factorial(int);
int main()
{
    int F;
    cout << " Enter number -> "; cin >> F;
    cout << " Get factorial: " << Factorial(F) << "\n";
    system("pause");
}
long long Factorial(int F)
{
    long long res = 1;
    for (int i = 2; i <= F; i++)
    {
        res *= i;
    }
    return res;
}





Задание 3. Написать функцию, которая проверяет, является ли переданное ей число простым? Число называется
простым, если оно делится без остатка только на себя
и на единицу



#include<iostream>
using namespace std;
void Prime_numbers(int);
int main()
{
    int n;
    cout << " Enter your number -> "; cin >> n;
    cout << " Prime numbers to " << n << ":\n";
    Prime_numbers(n);
    system("pause");
}
void Prime_numbers(int n)
{
    cout <<  "2\n";
    for (int i = 3; i <= n; i++)
    {
        int count = 0;
        for (int j = 2; j < i; j++)
        {
            if (i % j == 0)
                count += 1;
        }
        if (count == 0)
            cout << i << "\n";
    }
}



Задание 4. Написать функцию, которая возвращает куб числа.



#include<iostream>
using namespace std;
int cube_of_number(int);
int main()
{
    int n;
    cout << " Enter your number -> "; cin >> n;
    cout << " Your number in cube: " << cube_of_number(n) << "\n";
    system("pause");
}
int cube_of_number(int n)
{
    return n * n * n;
}



Задание 5. Написать функцию для нахождения наибольшего из двух чисел.



#include<iostream>
using namespace std;
void biggest(float, float);
int main()
{
    int num1, num2;
    cout << " Enter first number -> "; cin >> num1;
    cout << " Enter second number -> "; cin >> num2;
    biggest(num1, num2);
    system("pause");
}
void biggest(float num1, float num2)
{
    if (num1 > num2)
        cout << " Biggest number is " << num1 << "\n";
    else
        cout << " Biggest number is " << num2 << "\n";
}




Задание 6. Написать функцию, которая возвращает истину, если передаваемое значение положительное и ложь,
если отрицательное.




#include<iostream>
using namespace std;
bool is_positive(float);
int main()
{
    float num;
    cout << " Enter number -> "; cin >> num;
    is_positive(num);
    system("pause");
}
bool is_positive(float num)
{
    if (num > 0)
    {
        cout << " true" << "\n";
        return true;  
    }    
    else if (num < 0)
    {
        cout << " false" << "\n";
        return false;
    }
    else
        cout << " Your number is zero\n";
}



Задание 1. Написать функцию, определяющую минимум
и максимум (значение и номер) элементов передаваемого
ей массива.





#include<iostream>
#include<time.h>
using namespace std;
void Rand(int[], int);
void Print(int[], int);
void min_max(int[], int);
int main()
{
    srand(time(0));
    const int size = 10;
    int arr[size];
    Rand(arr, size);
    Print(arr, size);
    cout << "\n";
    min_max(arr, size);
    system("pause");
}
void Rand(int arr[], int size)
{
    for (int i = 0; i < size; i++)
    {
        arr[i] = rand() % 25;
    }
}
void Print(int arr[], int size)
{
    for (int i = 0; i < size; i++)
    {
        cout << arr[i] << "\t";
    }
    cout << "\n";
}
void min_max(int arr[], int size)
{
    int max = arr[0], min = arr[0];
    int imax = 0, imin = 0;
    for (int i = 1; i < size; i++)
    {
        if (arr[i] > max)
        {
            max = arr[i];
            imax = i;
        }
        if (arr[i] < min)
        {
            min = arr[i];
            imin = i;
        }
    }
    cout << " Min element of array is " << min << " (it's position " << imin + 1 << ")\n";
    cout << " Max element of array is " << max << " (it's position " << imax + 1 << ")\n";
}




Задание 2. Написать функцию, меняющую порядок
следования элементов передаваемого ей массива на противоположный.



#include<iostream>
#include<time.h>
using namespace std;
void Rand(int[], int);
void Print(int[], int);
void reverse_arr(int[], int);
int main()
{
    srand(time(0));
    const int size = 10;
    int arr[size];
    cout << " Array original:\n";
    Rand(arr, size);
    Print(arr, size);
    cout << "\n Array reversed:\n";
    reverse_arr(arr, size);
    Print(arr, size);
    system("pause");
}
void Rand(int arr[], int size)
{
    for (int i = 0; i < size; i++)
    {
        arr[i] = rand() % 25;
    }
}
void Print(int arr[], int size)
{
    for (int i = 0; i < size; i++)
    {
        cout << arr[i] << "\t";
    }
    cout << "\n";
}
void reverse_arr(int arr[], int size)
{
    int left = 0;
    int right = size - 1;
    while (left < right)
    {
        int tmp = arr[left];
        arr[left] = arr[right];
        arr[right] = tmp;
        left++; right--;
    }
}



Задание 3. Написать функцию, возвращающую количество простых чисел в передаваемом ей массиве




#include<iostream>
#include<time.h>
using namespace std;
void Rand(int[], int);
void Print(int[], int);
void is_prime(int[], int);
int main()
{
    srand(time(0));
    const int size = 10;
    int arr[size];
    Rand(arr, size);
    Print(arr, size);
    is_prime(arr, size);
    system("pause");
}
void Rand(int arr[], int size)
{
    for (int i = 0; i < size; i++)
    {
        arr[i] = rand() % 25;
    }
}
void Print(int arr[], int size)
{
    for (int i = 0; i < size; i++)
    {
        cout << arr[i] << "\t";
    }
    cout << "\n";
}
void is_prime(int arr[], int size)
{
    int prime_count = 0;
    for (int i = 0; i < size; i++)
    {
        int check_prime = 0;
        for (int j = 2; j < arr[i]; j++)
        {
            if (arr[i] % j == 0)
                check_prime += 1;
        }
        if (check_prime == 0 && arr[i] != 0 && arr[i] != 1 || arr[i] == 2)
            prime_count += 1;     
    }
    cout << "\n Amount prime numbers in this array is: " << prime_count << "\n";
}





// перевод из 10-ной системы счисления в любую (до 32-ричной)
#include <iostream>
using namespace std;
void translate_num(int, int);
int main() 
{
    translate_num(58, 16);
    system("pause");
}
void translate_num(int num, int system)
{
    int ost[32];//сюда будем записывать остатки 
    int i = 0;
    while (num != 0)
    {
        ost[i] = num % system;
        i++;
        num /= system;
    }
    for (int j = i - 1; j >= 0; j--)
    {
        if (ost[j] < 10)
            cout << ost[j];
        else
            cout << char(55 + ost[j]);//буква с алфавита
    }
}






Задание 1. Написать функцию, которая принимает две даты
(т.е. функция принимает шесть параметров) и вычисляет
разность в днях между этими датами. Для решения этой
задачи необходимо также написать функцию, которая
определяет, является ли год високосным.




#include<iostream>
using namespace std;
int visokosny(int, int);
int dates(int, int, int, int, int, int);
int main()
{
    setlocale(LC_ALL, "rus");
    int days_1, months_1, yaer_1, days_2, months_2, yaer_2;
    cout << " Введите первую дату через пробел (день, месяц, год) -> ";
    cin >> days_1 >> months_1 >> yaer_1;
    cout << " Введите вторую дату через пробел (день, месяц, год) -> ";
    cin >> days_2 >> months_2 >> yaer_2;
    cout << " Количество дней между двумя датами - " << 
        dates(days_1, months_1, yaer_1, days_2, months_2, yaer_2) << "\n";
    system("pause");
}
int visokosny(int m, int y)
{
    if (m > 2 && (y % 4 == 0 && y % 100 != 0 || y % 400 == 0))
        return 1;
    else
        return 0;
}
int dates(int days_1, int months_1, int yaer_1, int days_2, int months_2, int yaer_2)
{
    int arr[12] = { 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };
    int days_in_years1 = (yaer_1 - 1) * 365 + (yaer_1 - 1) / 4 - (yaer_1 - 1) / 100 + (yaer_1 - 1) / 400;
    int days_in_years2 = (yaer_2 - 1) * 365 + (yaer_2 - 1) / 4 - (yaer_2 - 1) / 100 + (yaer_2 - 1) / 400;
    for (int i = 0; i < months_1 - 1; i++)
        days_in_years1 += arr[i];
    for (int i = 0; i < months_2 - 1; i++)
        days_in_years2 += arr[i];
    days_in_years1 += days_1 + visokosny(months_1, yaer_1);
    days_in_years2 += days_2 + visokosny(months_2, yaer_2);
    int res = abs(days_in_years2 - days_in_years1);
    return res;
}




Задание 2. Написать функцию, определяющую среднее
арифметическое элементов передаваемого ей массива.



#include<iostream>
#include<time.h>
using namespace std;
void rand_print(int[], int);
float middle(int[], int);
void Print(int[], int);
int main()
{
	srand(time(0));
    const int size = 5;
    int arr[size];
	rand_print(arr, size);
    cout << "\n Middle is " << middle(arr, size) << "\n";
    system("pause");
}
void rand_print(int arr[], int size)
{
    int a = -20;
    int b = 20;
	cout << "\n Array original:\n";
	for (int i = 0; i < size; i++)
	{
		arr[i] = a + rand() % (b - a + 1);
		cout << arr[i] << "\t";
	}
	cout << "\n";
}
void Print(int arr[], int size)
{
    for (int i = 0; i < size; i++)
    {
        cout << arr[i] << "\t";
    }
    cout << "\n";
}
float middle(int arr[], int size)
{
    float sum = 0;
    for (int i = 0; i < size; i++)
        sum += arr[i];
    return sum / size;
}





Задание 3. Написать функцию, определяющую количество
положительных, отрицательных и нулевых элементов
передаваемого ей массива.





#include<iostream>
#include<time.h>
using namespace std;
void rand_print(int[], int);
void amount(int[], int);
int main()
{
	srand(time(0));
    const int size = 10;
    int arr[size];
	rand_print(arr, size);
    amount(arr, size);
    system("pause");
}
void rand_print(int arr[], int size)
{
    int a = -20;
    int b = 20;
	cout << "\n Array original:\n";
	for (int i = 0; i < size; i++)
	{
		arr[i] = a + rand() % (b - a + 1);
		cout << arr[i] << "\t";
	}
	cout << "\n";
}
void amount(int arr[], int size)
{
    int more = 0, less = 0, zero = 0;
    for (int i = 0; i < size; i++)
    {
        if (arr[i] < 0)
            less += 1;
        else if (arr[i] > 0)
            more += 1;
        else
            zero += 1;
    }
    cout << "\n Elements less zero: " << less << "\n";
    cout << " Elements more zero: " << more << "\n";
    cout << " Elements = zero: " << zero << "\n";
}






Задание 1. Написать перегруженные функции (int, double,
char) для выполнения следующих задач:
■ Инициализация квадратной матрицы;
■ Вывод матрицы на экран;
■ Определение максимального и минимального элемента
на главной диагонали матрицы;
■ Сортировка элементов по возрастанию отдельно для
каждой строки матрицы.





#include <iostream>
#include <time.h>
using namespace std;
void initialization(int[][5], int);
void initialization(double[][5], double);
void initialization(char[][5], char);
void Print(int[][5], int);
void Print(double[][5], double);
void Print(char[][5], char);
void max_min(int[][5], int);
void max_min(double[][5], double);
void max_min(char[][5], char);
void sort(int[][5], int);
void sort(double[][5], double);
void sort(char[][5], char);
int main() {
    setlocale(LC_ALL, "rus");
    srand(time(0));
    const int size = 5;
    int arr1[size][size];
    double arr2[size][size];
    char arr3[size][size];
    initialization(arr1, size);
    initialization(arr2, size);
    initialization(arr3, size);
    cout << " 1. Матрица int:\n";
    Print(arr1, size);
    max_min(arr1, size);
    sort(arr1, size);
    cout << " Отсортированная матрица:\n";
    Print(arr1, size);
    cout << "\n\n 2. Матрица double:\n";
    Print(arr2, size);
    max_min(arr2, size);
    sort(arr2, size);
    cout << " Отсортированная матрица:\n";
    Print(arr2, size);
    cout << "\n\n 3. Матрица char:\n";
    Print(arr3, size);
    max_min(arr3, size);
    sort(arr3, size);
    cout << " Отсортированная матрица:\n";
    Print(arr3, size);
}
void initialization(int arr1[][5], int size)
{
    for (int i = 0; i < size; i++)
    {
        for (int j = 0; j < size; j++)
        {
            arr1[i][j] = rand() % 25;
        }
    }
}
void initialization(double arr2[][5], double size)
{
    double a = 0.5, b = 20.8;
    for (int i = 0; i < size; i++)
    {
        for (int j = 0; j < size; j++)
        {
            arr2[i][j] = a + rand() / 32767.0 * (b-a);
        }
    }
}
void initialization(char arr3[][5], char size)
{
    int a = 65, b = 90;
    for (int i = 0; i < size; i++)
    {
        for (int j = 0; j < size; j++)
        {
            arr3[i][j] = a + rand() % (b - a + 1);
        }
    }
}
void Print(int arr1[][5], int size)
{
    for (int i = 0; i < size; i++)
    {
        for (int j = 0; j < size; j++)
        {
            cout << arr1[i][j] << "\t";
        }
        cout << "\n";
    }
}
void Print(double arr2[][5], double size)
{
    for (int i = 0; i < size; i++)
    {
        for (int j = 0; j < size; j++)
        {
            cout << arr2[i][j] << "\t\t";
        }
        cout << "\n";
    }
}
void Print(char arr3[][5], char size)
{
    for (int i = 0; i < size; i++)
    {
        for (int j = 0; j < size; j++)
        {
            cout << arr3[i][j] << "\t";
        }
        cout << "\n";
    }
}
void max_min(int arr1[][5], int size)
{
    int max = arr1[0][0], min = arr1[0][0];
    for (int i = 0; i < size; i++)
    {
        for (int j = 0; j < size; j++)
        {
            if (i == j)
            {
                if (arr1[i][j] < min)
                    min = arr1[i][j];
                if (arr1[i][j] > max)
                    max = arr1[i][j];
            }         
        }
    }
    cout << " Минимальный элемент главной диагонали: " << min << "\n"
        " Максимальный элемент главной диагонали: " << max << "\n";
}
void max_min(double arr2[][5], double size)
{
    double max = arr2[0][0], min = arr2[0][0];
    for (int i = 0; i < size; i++)
    {
        for (int j = 0; j < size; j++)
        {
            if (i == j)
            {
                if (arr2[i][j] < min)
                    min = arr2[i][j];
                if (arr2[i][j] > max)
                    max = arr2[i][j];
            }
        }
    }
    cout << " Минимальный элемент главной диагонали: " << min << "\n"
        " Максимальный элемент главной диагонали: " << max << "\n";
}
void max_min(char arr3[][5], char size)
{
    char max = arr3[0][0], min = arr3[0][0];
    for (int i = 0; i < size; i++)
    {
        for (int j = 0; j < size; j++)
        {
            if (i == j)
            {
                if (arr3[i][j] < min)
                    min = arr3[i][j];
                if (arr3[i][j] > max)
                    max = arr3[i][j];
            }
        }
    }
    cout << " Минимальный элемент главной диагонали: " << min << "\n"
        " Максимальный элемент главной диагонали: " << max << "\n";
}
void sort(int arr1[][5], int size)
{
    for (int k = 0; k < size - 1; k++)
    {
        for (int i = 0; i < size; i++)
        {
            for (int j = 0; j < size - 1; j++)
            {
                if (arr1[i][j] > arr1[i][j + 1])
                {
                    int tmp = arr1[i][j];
                    arr1[i][j] = arr1[i][j + 1];
                    arr1[i][j + 1] = tmp;
                }
            }
        }
    }
}
void sort(double arr2[][5], double size)
{
    for (int k = 0; k < size - 1; k++)
    {
        for (int i = 0; i < size; i++)
        {
            for (int j = 0; j < size - 1; j++)
            {
                if (arr2[i][j] > arr2[i][j + 1])
                {
                    double tmp = arr2[i][j];
                    arr2[i][j] = arr2[i][j + 1];
                    arr2[i][j + 1] = tmp;
                }
            }
        }
    }
}
void sort(char arr3[][5], char size)
{
    for (int k = 0; k < size - 1; k++)
    {
        for (int i = 0; i < size; i++)
        {
            for (int j = 0; j < size - 1; j++)
            {
                if (arr3[i][j] > arr3[i][j + 1])
                {
                    char tmp = arr3[i][j];
                    arr3[i][j] = arr3[i][j + 1];
                    arr3[i][j + 1] = tmp;
                }
            }
        }
    }
}






Задание 2. Написать рекурсивную функцию нахождения
наибольшего общего делителя двух целых чисел.



#include <iostream>
using namespace std;
int nod(int, int, int);
int main() {
    setlocale(LC_ALL, "rus");
    int num1, num2, min;
    cout << " Введите первое число -> "; cin >> num1;
    cout << " Введите второе число -> "; cin >> num2;
    (num1 <= num2) ? min = num1 : min = num2;
    cout << nod(num1, num2, min) << "\n";
}
int nod(int num1, int num2, int min)
{
    if (num1 % min == 0 && num2 % min == 0)
        return min;
    nod(num1, num2, min - 1);
}




Задание 3. Написать игру «Быки и коровы». Программа
«загадывает» четырёхзначное число и играющий должен
угадать его. После ввода пользователем числа программа
сообщает, сколько цифр числа угадано (быки) и сколько
цифр угадано и стоит на нужном месте (коровы). После
отгадывания числа на экран необходимо вывести количество сделанных пользователем попыток. В программе
необходимо использовать рекурсию.





#include <iostream>
#include <time.h>
using namespace std;
int main()
{
    srand(time(0));
    setlocale(LC_ALL, "rus");
    int a = 1000;
    int b = 9999;
    int x;
    const int size = 4;
    int arr_x[size];
        do
        {
            x = a + rand() % (b - a + 1);
            arr_x[0] = x / 1000;
            arr_x[1] = x / 100 % 10;
            arr_x[2] = x / 10 % 10;
            arr_x[3] = x % 10;
        } while (arr_x[0] == arr_x[1] || arr_x[0] == arr_x[2] || arr_x[0] == arr_x[3] || arr_x[1] == arr_x[2]
            || arr_x[1] == arr_x[3] || arr_x[2] == arr_x[3]);
        //cout << x << "\n";
    int shot = 0;
    int sum = 0;
    do
    {
        cout << " Введите четырех-значное число -> "; cin >> shot;
        int bull = 0, cow = 0;
        int arr_sh[size];
        arr_sh[0] = shot / 1000;
        arr_sh[1] = shot / 100 % 10;
        arr_sh[2] = shot / 10 % 10;
        arr_sh[3] = shot % 10;
        for (int i = 0; i < size; i++)
        {
            if (arr_x[i] == arr_sh[i])
                bull += 1;
            for (int j = 0; j < size; j++)
            {
                if (arr_sh[i] == arr_x[j])
                    cow += 1;
            }
        }
        sum += 1;
        cout << " Bulls - " << bull << ", cows - " << cow << "\n";
    } while (shot != x);
    if (shot == x)
        cout << " You won! Число угаданно с попытки №" << sum << "\n";
}







Задание 1. Дан массив чисел размерностью 10 элементов. Написать функцию, которая сортирует массив по
возрастанию или по убыванию, в зависимости от третьего параметра функции. Если он равен true, сортировка
идет по убыванию, если false, то по возрастанию. Первые
2 параметра функции — это массив и его размер, третий
параметр по умолчанию равен false. 




#include<iostream>
#include<time.h>
using namespace std;
void rand_print(int[], int);
void sort_bubble_pro(int[], int, bool);
void Print(int[], int);
void reverse_arr(int[], int);
int main()
{
	srand(time(0));
    const int size = 10;
    int arr[size];
    bool param = false;
	rand_print(arr, size);
    cout << "\n\n Sorted array:\n";
    sort_bubble_pro(arr, size, param);
    system("pause");
}
void rand_print(int arr[], int size)
{
	cout << "\n Array original:\n";
	for (int i = 0; i < size; i++)
	{
		arr[i] = rand() % 25;
		cout << arr[i] << "\t";
	}
	cout << "\n";
}
void Print(int arr[], int size)
{
    for (int i = 0; i < size; i++)
    {
        cout << arr[i] << "\t";
    }
    cout << "\n";
}
void reverse_arr(int arr[], int size)
{
    int left = 0;
    int right = size - 1;
    while (left < right)
    {
        int tmp = arr[left];
        arr[left] = arr[right];
        arr[right] = tmp;
        left++; right--;
    }
}
void sort_bubble_pro(int arr[], int size, bool param)
{
    for (int i = 0; i < size - 1; i++)
    {
        bool f = 0;
        for (int j = 0; j < size - 1 - i; j++)
        {
            if (arr[j] > arr[j + 1])
            {
                int tmp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = tmp;
                f = 1;
            }
        }
        if (f == 0)
            break;
    }
    if (param == true)
        reverse_arr(arr, size);
    Print(arr, size);
}




Задание 2. Написать функцию, которая сортирует первую
половину массива по убыванию, а вторую — по возрастанию, используя сортировку простыми вставками.




#include<iostream>
#include<time.h>
using namespace std;
void rand_print(int[], int);
void sort_half(int[], int);
void Print(int[], int);
int main()
{
	srand(time(0));
    const int size = 10;
    int arr[size];
	rand_print(arr, size);
    cout << "\n\n Sorted array:\n"; 
    sort_half(arr, size);
    Print(arr, size);
    system("pause");
}
void rand_print(int arr[], int size)
{
	cout << "\n Array original:\n";
	for (int i = 0; i < size; i++)
	{
		arr[i] = rand() % 25;
		cout << arr[i] << "\t";
	}
	cout << "\n";
}
void Print(int arr[], int size)
{
    for (int i = 0; i < size; i++)
    {
        cout << arr[i] << "\t";
    }
    cout << "\n";
}
void sort_half(int arr[], int size)
{
    //сортируем первую половину массива
    for (int i = 1; i < size / 2; i++)
    {
        int key = arr[i];
        int j = i - 1;
        while (j >= 0 && arr[j] > key)
        {
            arr[j + 1] = arr[j];
            arr[j] = key;
            j--;
        }
    }
    //сортируем вторую половину массива
    for (int i = size / 2 + 1; i < size; i++)
    {
        int key = arr[i];
        int j = i - 1;
        while (j >= size / 2 && arr[j] > key)
        {
            arr[j + 1] = arr[j];
            arr[j] = key;
            j--;
        }
    }
    //переворачиваем первую половину массива
    int left = 0;
    int right = size / 2 - 1;
    while (left < right)
    {
        int tmp = arr[left];
        arr[left] = arr[right];
        arr[right] = tmp;
        left++; right--;
    }
}




Задание 3. В функцию передаётся массив случайных
чисел в диапазоне от -20 до +20. Необходимо найти позиции крайних отрицательных элементов (самого левого
отрицательного элемента и самого правого отрицательного элемента) и отсортировать элементы, находящиеся
между ними.



#include<iostream>
#include<time.h>
using namespace std;
void rand_print(int[], int);
void sort_border(int[], int);
void Print(int[], int);
int main()
{
	srand(time(0));
    const int size = 13;
    int arr[size];
	rand_print(arr, size);
    sort_border(arr, size);
    system("pause");
}
void rand_print(int arr[], int size)
{
    int a = -20;
    int b = 20;
	cout << "\n Array original:\n";
	for (int i = 0; i < size; i++)
	{
		arr[i] = a + rand() % (b - a + 1);
		cout << arr[i] << "\t";
	}
	cout << "\n";
}
void Print(int arr[], int size)
{
    for (int i = 0; i < size; i++)
    {
        cout << arr[i] << "\t";
    }
    cout << "\n";
}
void sort_border(int arr[], int size)
{
    int sum = 0;
    for (int i = 0; i < size; i++)
    {
        if (arr[i] < 0)
            sum += 1;
    }
    if (sum < 2)
        cout << "\n Not enough elements < 0, try again\n";
    else
    {
        int left = 0, right = 0;
        for (int i = 0; i < size; i++)
        {
            if (arr[i] < 0)
            {
                left = i;
                break;
            }
        }
        for (int i = size - 1; i >= 0; i--)
        {
            if (arr[i] < 0)
            {
                right = i;
                break;
            }
        }
        bool f;
        do
        {
            f = true;
            for (int i = left + 1; i < right - 1; i++)
            {
                if (arr[i] > arr[i + 1])
                {
                    int tmp = arr[i];
                    arr[i] = arr[i + 1];
                    arr[i + 1] = tmp;
                    f = false;
                }
            }
        } while (f == false);
        cout << "\n\n Sorted array:\n";
        Print(arr, size);
    }
}





Задание 1. Написать рекурсивную функцию нахождения
степени числа.



#include <iostream>
using namespace std;
double my_pow(double, double);
void main()
{
    double num, pow;
    cout << " Enter number -> "; cin >> num;
    cout << " Enter power of number -> "; cin >> pow;
    cout << " Result: " << my_pow(num, pow) << "\n";
    system("pause");
}
double my_pow(double num, double pow)
{
    if (pow == 0)
        return 1;
    if (pow > 0)
        return num * my_pow(num, pow - 1);
    if (pow < 0)
        return my_pow(num, pow + 1) / num;
}





Задание 2. Написать рекурсивную функцию, которая
выводит N звезд в ряд, число N задает пользователь. Проиллюстрируйте работу функции примером.





#include <iostream>
using namespace std;
void Star(int);
void main()
{
    int stars;
    cout << " Enter amount of stars -> "; cin >> stars;
    Star(stars);
    cout << "\n";
    system("pause");
}
void Star(int stars)
{
    cout << "*";
    if (stars == 1)
        return;
    Star(stars - 1);
} 





Задание 3. Написать рекурсивную функцию, которая
вычисляет сумму всех чисел в диапазоне от a до b. Пользователь вводит a и b. Проиллюстрируйте работу функции
примером.



#include <iostream>
using namespace std;
int Sum(int, int, int);
void main()
{
    int a, b;
    cout << " Enter first number -> "; cin >> a;
    cout << " Enter second number -> "; cin >> b;
    if (a > b)
    {
        int tmp = a;
        a = b;
        b = tmp;
    }
    cout << Sum(a, b, 0) << "\n";
    system("pause");
}
int Sum(int a, int b, int s)
{
    if (a > b)
        return s;
    s += a;
    Sum(a + 1, b, s);     
} 



Задание 4. Напишите рекурсивную функцию, которая
принимает одномерный массив из 100 целых чисел заполненных случайным образом и находит позицию,
с которой начинается последовательность из 10 чисел,
сумма которых минимальна.





#include <iostream>
#include <time.h>
using namespace std;
int ten(int[], int, int, int, int);
int main() {
    srand(time(0));
    const int size = 100;
    int arr[size];
    for (int i = 0; i < size; i++)
    {
        arr[i] = rand() % 10;
        cout << arr[i] << " ";
    }
    cout << "\n\n Position first number of min sum of 10 numbers: " << ten(arr, size, 0, 0, 10000) << "\n";
}
int ten(int arr[], int size, int i, int imin, int smin)
{
    int s = 0;
    for (int j = i; j < i + 10; j++)
    {
        s += arr[j];
    }
    if (s < smin)
    {
        smin = s;
        imin = i;
    }
    if (i < size - 10)
        return ten(arr, size, i + 1, imin, smin);
    return imin;
}






Задание 5. Написать перегруженные функции и протестировать их в основной программе:
■ Нахождения максимального значения в одномерном
массиве;
■ Нахождения максимального значения в двумерном
массиве;
■ Нахождения максимального значения в трёхмерном
массиве;
■ Нахождения максимального значения двух целых;
■ Нахождения максимального значения трёх целых;




#include <iostream>
#include <time.h>
using namespace std;
int Max(int[], int);
int Max(int[][6], int);
int Max(int[][3][3], int);
int Max(int, int);
int Max(int, int, int);
int main() {
    setlocale(LC_ALL, "rus");
    srand(time(0));
    const int size = 12;
    int arr1[size];
    cout << " 1. Одномерный массив:\n";
    for (int i = 0; i < size; i++)
    {
        arr1[i] = rand() % 25;
        cout << arr1[i] << "\t";
    }
    cout << "\n Максимальное число: " << Max(arr1, size) << "\n";

    cout << "\n 2. Двумерный массив:\n";
    int arr2[size/2][size/2];
    for (int i = 0; i < size / 2; i++)
    {
        for (int j = 0; j < size / 2; j++)
        {
            arr2[i][j] = rand() % 25;
            cout << arr2[i][j] << "\t";
        }
        cout << "\n";
    }
    cout << "\n Максимальное число: " << Max(arr2, size) << "\n";
    
    cout << "\n 3. Трехмерный массив:\n";
    int arr3[size / 4][size / 4][size / 4];
    for (int i = 0; i < size / 4; i++)
    {
        for (int j = 0; j < size / 4; j++)
        {
            for (int k = 0; k < size / 4; k++)
            {
                arr3[i][j][k] = rand() % 25;
                cout << arr3[i][j][k] << "\t";
            }   
            cout << "\n";
        }
        cout << "\n\n";
    }
    cout << " Максимальное число: " << Max(arr3, size) << "\n";

    int num1, num2;
    cout << "\n 4. Максимальное из двух чисел:\n"
        " Введите первое число -> "; cin >> num1;
    cout << " Введите второе число -> "; cin >> num2;
    cout << "\n Максимальное число: " << Max(num1, num2) << "\n";

    int num3;
    cout << "\n 4. Максимальное из трех чисел:\n"
        " Введите третье число -> "; cin >> num3;
    cout << "\n Максимальное число: " << Max(num1, num2, num3) << "\n";
}

int Max(int arr1[], int size)
{
    int max = arr1[0];
    for (int i = 1; i < size; i++)
    {
        if (arr1[i] > max)
            max = arr1[i];
    }
    return max;
}
int Max(int arr2[][6], int size)
{
    int max = arr2[0][0];
    for (int i = 0; i < size/2; i++)
    {
        for (int j = 0; j < size/2; j++)
        {
            if (arr2[i][j] > max)
                max = arr2[i][j];
        }     
    }
    return max;
}
int Max(int arr3[][3][3], int size)
{
    int max = arr3[0][0][0];
    for (int i = 0; i < size / 4; i++)
    {
        for (int j = 0; j < size / 4; j++)
        {
            for (int k = 0; k < size / 4; k++)
            {
                if (arr3[i][j][k] > max)
                    max = arr3[i][j][k];
            }
        }
    }
    return max;
}
int Max(int num1, int num2)
{
    int max = num2;
    if (num1 > num2)
        max = num1;
    return max;
}
int Max(int num1, int num2, int num3)
{
    return Max(Max(num1, num2), num3);
}






1. Дан массив целых чисел. Воспользовавшись указателями, поменяйте местами элементы массива с четными
и  нечетными индексами (т.е. те элементы массива,
которые стоят на четных местах, поменяйте с элементами, которые стоят на нечетных местах).


#include <iostream>
#include <time.h>
using namespace std;
void Rand_print(int*, int);
void Print(int*, int);
int main()
{
	srand(time(0));
	const int size = 10;
	int arr[size];
	Rand_print(arr, size);
	for (int i = 0; i < size; i++)
	{
		if (i % 2 != 0)
		{
			int tmp = *(arr + i);
			*(arr + i) = *(arr + i - 1);
			*(arr + i - 1) = tmp;
		}
	}
	cout << "\n Array 2:\n";
	Print(arr, size);
}
void Rand_print(int* arr, int size)
{
	cout << "\n Array original:\n";
	for (int i = 0; i < size; i++)
	{
		*(arr + i) = rand() % 25;
		cout << arr[i] << "\t";
	}
	cout << "\n";
}
void Print(int* arr, int size)
{
	for (int i = 0; i < size; i++)
	{
		cout << *(arr + i) << "\t";
	}
	cout << "\n";
}




Даны два массива, упорядоченных по возрастанию:
А[n] и B[m]. Сформируйте массив C[n+m], состоящий из элементов массивов А и В, упорядоченный
по возрастанию.


#include <iostream>
#include <time.h>
using namespace std;
int main()
{
	srand(time(0));
	const int n = 6;
	const int m = 8;
	int A[n] = { 1, 5, 7, 10, 12, 22 };
	int B[m] = { 2, 5, 6, 11, 18, 19, 23, 55 };
	int C[n + m];
	int* pA = A;
	int* pB = B;
	int* pC = C;
	int min_size;
	int* max_arr;
	if (n < m)
	{
		min_size = n;
		max_arr = B;
	}
	else
	{
		min_size = m;
		max_arr = A;
	}
	for (int i = 0, j = 0; i < n + m; i+=2, j++)
	{
		if (j > min_size - 1)
		{
			*(pC + i) = *(max_arr + j);
			i--;
		}
		else if (*(pA + j) < *(pB + j) && j < n)
		{
			*(pC + i) = *(pA + j);
			*(pC + i + 1) = *(pB + j);
		}		
		else if (*(pA + j) >= *(pB + j) && j < n)
		{
			*(pC + i) = *(pB + j);
			*(pC + i + 1) = *(pA + j);
		}
	}
	for (int i = 0; i < n + m; i++)
	{
		cout << *(pC + i) << "\t";
	}
}




Задание 1. Используя два указателя на массив целых
чисел, скопировать один массив в другой. Использовать
в программе арифметику указателей для продвижения
по массиву, а также оператор разыменования. 



#include <iostream>
#include <time.h>
using namespace std;
void Copy(int*, int*, int);
int main()
{
	srand(time(0));
	const int size = 5;
	int arr1[size];
	int* parr1 = arr1;
	cout << "\n Array 1:\n";
	for (int i = 0; i < size; i++)
	{
		*(parr1 + i) = rand() % 10;
		cout << *(parr1 + i) << "\t";
	}
	int arr2[size];
	cout << "\n\n Array 2:\n";
	Copy(arr1, arr2, size);
	cout << "\n";
}
void Copy(int *arr1, int* arr2, int size)
{
	for (int i = 0; i < size; i++)
	{
		*(arr2 + i) = *(arr1 + i);
		cout << *(arr2 + i) << "\t";
	}
}




Задание 2. Используя указатель на массив целых чисел,
изменить порядок следования элементов массива на противоположный.
Использовать в программе арифметику указателей
для продвижения по массиву, а также оператор разыменования.





#include <iostream>
#include <time.h>
using namespace std;
void Reverse(int*, int);
int main()
{
	srand(time(0));
	const int size = 5;
	int arr[size];
	int* parr = arr;
	cout << "\n Array original:\n";
	for (int i = 0; i < size; i++)
	{
		*(parr + i) = rand() % 10;
		cout << *(parr + i) << "\t";
	}
	cout << "\n\n Array reverse:\n";
	int* piarr = arr + 4;
	Reverse(piarr, size);
	cout << "\n";
}
void Reverse(int* piarr, int size)
{
	for (int i = 0; i < size; i++)
	{
		cout << *piarr << "\t";
		piarr--;
	}
}




Задание 3. Используя два указателя на массивы целых
чисел, скопировать один массив в другой так, чтобы во
втором массиве элементы находились в обратном порядке.
Использовать в программе арифметику указателей
для продвижения по массиву, а также оператор разыменования.





#include <iostream>
#include <time.h>
using namespace std;
void Copy(int*, int*, int);
int main()
{
	srand(time(0));
	const int size = 5;
	int arr1[size];
	int* parr1 = arr1;
	cout << "\n Array 1:\n";
	for (int i = 0; i < size; i++)
	{
		*(parr1 + i) = rand() % 10;
		cout << *(parr1 + i) << "\t";
	}
	int arr2[size];
	cout << "\n\n Array 2:\n";
	Copy(arr1, arr2, size);
	cout << "\n";
}
void Copy(int* arr1, int* arr2, int size)
{
	for (int i = 0; i < size; i++)
	{
		*(arr2 + i) = *(arr1 + i);
	}
	int* parr2 = arr2 + 4;
	for (int i = 0; i < size; i++)
	{
		cout << *parr2 << "\t";
		parr2--;
	}
}



Задание 1. Используя указатели и оператор разыменования, определить наибольшее из двух чисел.


#include <iostream>
using namespace std;
void Max(int, int, int*);
int main() 
{
    int a, b;
    cout << " Enter first number -> "; cin >> a;
    cout << " Enter second number -> "; cin >> b;
    int max;
    Max(a, b, &max);
    cout << " Max number is "<< max << "\n";
    system("pause");
}
void Max(int a, int b, int *pmax)
{
    (a > b) ? *pmax = a : *pmax = b;
}




Задание 2. Используя указатели и оператор разыменования, определить знак числа, введённого с клавиатуры.




#include <iostream>
using namespace std;
void sign(int*);
int main() 
{
    int num;
    cout << " Enter number -> "; cin >> num;
    sign(&num);
    cout << "\n";
}
void sign(int *pnum)
{
    if (*pnum < 0)
        cout << " Sign of number is '-'\n";
    else if (*pnum > 0)
        cout << " Sign of number is '+'\n";
    else
        cout << " Number is zero\n";
}




Задание 3. Используя указатели и оператор разыменования, обменять местами значения двух переменных.



#include <iostream>
using namespace std;
void exchange(int*, int*);
int main() 
{
    int a = 10;
    int b = 15;
    cout << " a = " << a << ", b = " << b << "\n\n";
    exchange(&a, &b);
    cout << " a = " << a << ", b = " << b << "\n";
}
void exchange(int *pa, int *pb)
{
    int tmp = *pa;
    *pa = *pb;
    *pb = tmp;
}




Задание 4. Написать примитивный калькулятор, пользуясь только указателями.





#include <iostream>
using namespace std;
void calculator(double*, double*, double*, char*);
int main()
{
    setlocale(LC_ALL, "rus");
    double num1, num2, res;
    char sign;
    cout << " Введите через пробел первое число, знак и второе число\n"
        " (например 3 + 5), и нажмите энтер.\n"
        " Можно использовать такие арифметические операации: +, -, *, /\n ";
    cin >> num1 >> sign >> num2;
    calculator(&num1, &num2, &res, &sign);
    cout << " = " << res <<"\n";
}
void calculator(double* pnum1, double* pnum2, double* pres, char* psign)
{
    switch (int(*psign))
    {
    case 43: *pres = *pnum1 + *pnum2;
        break;
    case 45: *pres = *pnum1 - *pnum2;
        break;
    case 42: *pres = *pnum1 * *pnum2;
        break;
    case 47: *pres = *pnum1 / *pnum2;
        break;
    }
}





Задание 5. Используя указатель на массив целых чисел, посчитать сумму элементов массива. Использовать
в программе арифметику указателей для продвижения
по массиву, а также оператор разыменования.





#include <iostream>
#include <time.h>
using namespace std;
void Sum(int*, int, int*);
int main()
{
	srand(time(0));
	const int size = 5;
	int arr[size];
	int sum = 0;
	Sum(arr, size, &sum);
	cout << "\n\n Sum of elements of array is " << sum << "\n";
}
void Sum(int *arr, int size, int *sum)
{
	for (int i = 0; i < size; i++)
	{
		*(arr + i) = rand() % 10;
		cout << *(arr + i) << "\t";
		*sum += *(arr + i);
	}
}




Задание 1. Даны два массива: А[M] и B[N] (M и N вводятся
с клавиатуры). Необходимо создать третий массив минимально возможного размера, в котором нужно собрать
элементы массива A, которые не включаются в массив B,
без повторений.



#include <iostream>
#include <time.h>
using namespace std;
int* Create(int);
void Rand_print(int*, int);
void Print(int*, int);
int Analiz(int*, int, int);
int* Ins_pos(int*, int&, int, int);
int* A_bez_B(int*, int, int*, int, int&);
int main()
{
	srand(time(0));
	int n;
	cout << " Enter size of first array -> "; cin >> n;
	int* A = Create(n);
	Rand_print(A, n);
	int m;
	cout << "\n Enter size of second array -> "; cin >> m;
	int* B = Create(m);
	Rand_print(B, m);
	int* C;
	int size;
	C = A_bez_B(A, n, B, m, size);
	if (size == 0)
		cout << "\n No such elements\n";
	else
	{
		cout << "\n Result:\n";
		Print(C, size);
	}
	free(A);
	free(B);
	free(C);
}
int* Create(int size)
{
	int* arr = (int*)calloc(size, sizeof(int));
	return arr;
}
void Rand_print(int* arr, int size)
{
	for (int i = 0; i < size; i++)
	{
		arr[i] = rand() % 13;
		cout << arr[i] << "\t";
	}
	cout << "\n";
}
void Print(int* arr, int size)
{
	for (int i = 0; i < size; i++)
	{
		cout << arr[i] << "\t";
	}
	cout << "\n";
}
int Analiz(int* arr, int size, int key)
{
	for (int i = 0; i < size; i++)
	{
		if (arr[i] == key)
			return 1;
	}
	return 0;
}
int* Ins_pos(int* arr, int& size, int pos, int key)
{
	arr = (int*)realloc(arr, (size + 1) * sizeof(int));
	memmove(arr + pos + 1, arr + pos, (size - pos) * sizeof(int));
	arr[pos] = key;
	size++;
	return arr;
}
int* A_bez_B(int* A, int n, int* B, int m, int& size)
{
	size = 0;
	int* C = nullptr;
	for (int i = 0; i < n; i++)
	{
		if (Analiz(B, m, A[i]) == 0 && Analiz(C, size, A[i]) == 0)
			C = Ins_pos(C, size, size, A[i]);
	}
	return C;
}





Задание 2. Даны два массива: А[M] и B[N] (M и N вводятся
с клавиатуры). Необходимо создать третий массив минимально возможного размера, в котором нужно собрать
элементы массивов A и B, которые не являются общими
для них, без повторений.




#include <iostream>
#include <time.h>
using namespace std;
int* Create(int);
void Rand_print(int*, int);
void Print(int*, int);
int Analiz(int*, int, int);
int* Ins_pos(int*, int&, int, int);
int* Сommon(int*, int, int*, int, int&);
int main()
{
	srand(time(0));
	int n;
	cout << " Enter size of first array -> "; cin >> n;
	int* A = Create(n);
	Rand_print(A, n);
	int m;
	cout << "\n Enter size of second array -> "; cin >> m;
	int* B = Create(m);
	Rand_print(B, m);
	int* C;
	int size;
	C = Сommon(A, n, B, m, size);
	if (size == 0)
		cout << "\n No such elements\n";
	else
	{
		cout << "\n Result:\n";
		Print(C, size);
	}
	free(A);
	free(B);
	free(C);
}
int* Create(int size)
{
	int* arr = (int*)calloc(size, sizeof(int));
	return arr;
}
void Rand_print(int* arr, int size)
{
	for (int i = 0; i < size; i++)
	{
		arr[i] = rand() % 13;
		cout << arr[i] << "\t";
	}
	cout << "\n";
}
void Print(int* arr, int size)
{
	for (int i = 0; i < size; i++)
	{
		cout << arr[i] << "\t";
	}
	cout << "\n";
}
int Analiz(int* arr, int size, int key)
{
	for (int i = 0; i < size; i++)
	{
		if (arr[i] == key)
			return 1;
	}
	return 0;
}
int* Ins_pos(int* arr, int& size, int pos, int key)
{
	arr = (int*)realloc(arr, (size + 1) * sizeof(int));
	memmove(arr + pos + 1, arr + pos, (size - pos) * sizeof(int));
	arr[pos] = key;
	size++;
	return arr;
}
int* Сommon(int* A, int n, int* B, int m, int& size)
{
	size = 0;
	int* C = nullptr;
	for (int i = 0; i < n; i++)
	{
		if (Analiz(B, m, A[i]) == 0 && Analiz(C, size, A[i]) == 0)
			C = Ins_pos(C, size, size, A[i]);
	}
	for (int i = 0; i < m; i++)
	{
		if (Analiz(A, n, B[i]) == 0 && Analiz(C, size, B[i]) == 0)
			C = Ins_pos(C, size, size, B[i]);
	}
	return C;
}





Задание 1. Написать следующие функции для работы
с динамическим массивом:
■ Функция распределения динамической памяти.
■ Функция инициализации динамического массива.
■ Функция печати динамического массива.
■ Функция удаления динамического массива.
■ Функция добавления элемента в конец массива.
■ Функция вставки элемента по указанному индексу.
■ Функция удаления элемента по указанному индексу.



//Функция распределения динамической памяти:
int* Create(int size)
{
	int* arr = (int*)calloc(size, sizeof(int));
	return arr;
}
//Функция инициализации динамического массива:
void Rand(int* arr, int size)
{
    for (int i = 0; i < size; i++)
    {
        arr[i] = rand() % 25;
    }
}
//Функция печати динамического массива:
void Print(int* arr, int size)
{
	for (int i = 0; i < size; i++)
	{
		cout << arr[i] << "\t";
	}
	cout << "\n";
}
//Функция удаления динамического массива:
free(arr);
//Функция добавления элемента в конец массива:
int* Ins_push(int* arr, int& size, int num)
{
	arr = (int*)realloc(arr, (size + 1) * sizeof(int));
	arr[size] = num;
	size++;
	return arr;
}
//Функция вставки элемента по указанному индексу:
int* Ins_pos(int* arr, int& size, int pos, int num)
{
	arr = (int*)realloc(arr, (size + 1) * sizeof(int));
	for (int i = size; i > pos; i--)
	{
		arr[i] = arr[i - 1];
	}
	arr[pos] = num;
	size++;
	return arr;
}
//Функция удаления элемента по указанному индексу:
int* Del_pos(int* arr, int& size, int pos)
{
	for (int i = pos; i < size - 1; i++)
	{
		arr[i] = arr[i + 1];
	}
	arr = (int*)realloc(arr, (size - 1) * sizeof(int));
	size--;
	return arr;
}


Задание 2. Написать функцию, которая получает указатель на динамический массив и его размер. Функция
должна удалить из массива все простые числа и вернуть
указатель на новый динамический массив.



#include <iostream>
#include <time.h>
using namespace std;
int* Create(int);
void Rand_print(int*, int);
void Print(int*, int);
int Check_prost(int);
void Del_pos(int*&, int&, int);
int* Del_prost(int*, int&);

int main()
{
	srand(time(0));
	int size;
	cout << " Enter size of array -> "; cin >> size;
	int* arr = Create(size);
	Rand_print(arr, size);
	cout << "\n Array without prime numbers: \n";
	arr = Del_prost(arr, size);
	Print(arr, size);
	free(arr);
}
int* Create(int size)
{
	int* arr = (int*)calloc(size, sizeof(int));
	return arr;
}
void Rand_print(int* arr, int size)
{
	for (int i = 0; i < size; i++)
	{
		arr[i] = rand() % 13;
		cout << arr[i] << "\t";
	}
	cout << "\n";
}
void Print(int* arr, int size)
{
	for (int i = 0; i < size; i++)
	{
		cout << arr[i] << "\t";
	}
	cout << "\n";
}
int Check_prost(int num)
{
	if (num == 0 || num == 1)
		return 0;
	for (int i = 2; i < num; i++)
		if (num % i == 0)
			return 0;
	return 1;
}
void Del_pos(int *&arr, int& size, int pos)
{
	for (int i = pos; i < size - 1; i++)
	{
		arr[i] = arr[i + 1];
	}
	arr = (int*)realloc(arr, (size - 1) * sizeof(int));
	size--;
}
int* Del_prost(int *arr, int& size)
{
	for (int i = 0; i < size; i++)
	{
		if (Check_prost(arr[i]) == 1)
		{
			Del_pos(arr, size, i);
			i--;
		}
	}
	return arr;
}




Задание 3. Написать функцию, которая получает указатель
на статический массив и его размер. Функция распределяет положительные, отрицательные и нулевые элементы
в отдельные динамические массивы.





#include <iostream>
#include <time.h>
using namespace std;
int* Create(int);
void Rand_print(int*, int);
void Print(int*, int);
int Analiz_sign(int);
void Ins_push(int*&, int&, int);
void distribution(int*, int, int*&, int&, int*&, int&, int*&, int&);
int main()
{
	srand(time(0));
	const int size = 14;
	int arr[size];
	cout << " Array original:\n";
	Rand_print(arr, size);
	int* A;
	int n;
	int* B;
	int m;
	int* C;
	int p;
	distribution(arr, size, A, n, B, m, C, p);
	cout << "\n Array of negative numbers:\n";
	if (n>0)
		Print(A, n);
	else
		cout << " Array is empty\n";
	cout << "\n Array of zeros:\n";
	if (m > 0)
		Print(B, m);
	else
		cout << " Array is empty\n";
	cout << "\n Array of positive numbers:\n";
	if (p > 0)
		Print(C, p);
	else
		cout << " Array is empty\n";
	free(A);
	free(B);
	free(C);
}
int* Create(int size)
{
	int* arr = (int*)calloc(size, sizeof(int));
	return arr;
}
void Rand_print(int* arr, int size)
{
	int a = -10;
	int b = 10;
	for (int i = 0; i < size; i++)
	{
		arr[i] = a + rand() % (b - a + 1);
		cout << arr[i] << "\t";
	}
	cout << "\n";
}
void Print(int* arr, int size)
{
	for (int i = 0; i < size; i++)
	{
		cout << arr[i] << "\t";
	}
	cout << "\n";
}
int Analiz_sign(int num)
{
	if (num < 0)
		return 1;
	if (num == 0)
		return 2;
	if (num > 0)
		return 3;
}
void Ins_push(int *&arr, int& size, int num)
{
		arr = (int*)realloc(arr, (size + 1) * sizeof(int));
		arr[size] = num;
		size++;
}
void distribution(int* arr, int size, int*& A, int& n, int*& B, int& m, int*& C, int& p)
{
	n = 0;
	m = 0;
	p = 0;
	A = nullptr;
	B = nullptr;
	C = nullptr;
	for (int i = 0; i < size; i++)
	{
		if (Analiz_sign(arr[i]) == 1)
			Ins_push(A, n, arr[i]);
		else if (Analiz_sign(arr[i]) == 2)
			Ins_push(B, m, arr[i]);
		else if (Analiz_sign(arr[i]) == 3)
			Ins_push(C, p, arr[i]);
	}
}





Задание 1. Даны два массива: А[M] и B[N] (M и N вводятся с клавиатуры). Необходимо создать третий массив
минимально возможного размера, в котором нужно собрать элементы обоих массивов.



#include <iostream>
#include <time.h>
using namespace std;
int* Create(int);
void Rand_print(int*, int);
void Print(int*, int);
void Ins_push(int*& arr, int& size, int num);
void A_and_B(int* A, int n, int* B, int m, int*& C, int& size);
int main()
{
	srand(time(0));
	int n;
	cout << " Enter size of first array -> "; cin >> n;
	int* A = Create(n);
	Rand_print(A, n);
	int m;
	cout << "\n Enter size of second array -> "; cin >> m;
	int* B = Create(m);
	Rand_print(B, m);
	int* C;
	int size;
	A_and_B(A, n, B, m, C, size);
	cout << "\n Result:\n";
	Print(C, size);
	free(A);
	free(B);
	free(C);
}
int* Create(int size)
{
	int* arr = (int*)calloc(size, sizeof(int));
	return arr;
}
void Rand_print(int* arr, int size)
{
	for (int i = 0; i < size; i++)
	{
		arr[i] = rand() % 13;
		cout << arr[i] << "\t";
	}
	cout << "\n";
}
void Print(int* arr, int size)
{
	for (int i = 0; i < size; i++)
	{
		cout << arr[i] << "\t";
	}
	cout << "\n";
}
void Ins_push(int*& arr, int& size, int num)
{
	arr = (int*)realloc(arr, (size + 1) * sizeof(int));
	arr[size] = num;
	size++;
}
void A_and_B(int* A, int n, int* B, int m, int*& C, int& size)
{
	size = 0;
	C = nullptr;
	for (int i = 0; i < n; i++)
		Ins_push(C, size, A[i]);
	for (int i = 0; i < m; i++)
		Ins_push(C, size, B[i]);
}




Задание 2. Даны два массива: А[M] и B[N] (M и N вводятся с клавиатуры). Необходимо создать третий массив
минимально возможного размера, в котором нужно
собрать общие элементы двух массивов без повторений.




#include <iostream>
#include <time.h>
using namespace std;
int* Create(int);
void Rand_print(int*, int);
void Print(int*, int);
int Analiz(int*, int, int);
int* Ins_pos(int*, int&, int, int);
int* Сommon(int*, int, int*, int, int&);
int main()
{
	srand(time(0));
	int n;
	cout << " Enter size of first array -> "; cin >> n;
	int* A = Create(n);
	Rand_print(A, n);
	int m;
	cout << "\n Enter size of second array -> "; cin >> m;
	int* B = Create(m);
	Rand_print(B, m);
	int* C;
	int size;
	C = Сommon(A, n, B, m, size);
	if (size == 0)
		cout << "\n No such elements\n";
	else
	{
		cout << "\n Result:\n";
		Print(C, size);
	}
	free(A);
	free(B);
	free(C);
}
int* Create(int size)
{
	int* arr = (int*)calloc(size, sizeof(int));
	return arr;
}
void Rand_print(int* arr, int size)
{
	for (int i = 0; i < size; i++)
	{
		arr[i] = rand() % 13;
		cout << arr[i] << "\t";
	}
	cout << "\n";
}
void Print(int* arr, int size)
{
	for (int i = 0; i < size; i++)
	{
		cout << arr[i] << "\t";
	}
	cout << "\n";
}
int Analiz(int* arr, int size, int key)
{
	for (int i = 0; i < size; i++)
	{
		if (arr[i] == key)
			return 1;
	}
	return 0;
}
int* Ins_pos(int* arr, int& size, int pos, int key)
{
	arr = (int*)realloc(arr, (size + 1) * sizeof(int));
	memmove(arr + pos + 1, arr + pos, (size - pos) * sizeof(int));
	arr[pos] = key;
	size++;
	return arr;
}
int* Сommon(int* A, int n, int* B, int m, int& size)
{
	size = 0;
	int* C = nullptr;
	for (int i = 0; i < n; i++)
	{
		if (Analiz(B, m, A[i]) == 1 && Analiz(C, size, A[i]) == 0)
			C = Ins_pos(C, size, size, A[i]);
	}

	return C;
}




Задание 3. Дан массив: А[M] (M вводится с клавиатуры).
Необходимо удалить из массива четные или нечетные
значения. Пользователь вводит данные в массив, а также
с помощью меню решает, что нужно удалить.





#include <iostream>
#include <time.h>
using namespace std;
int* Create(int);
void Print(int*, int);
int Analiz_even(int);
void Del_pos(int*&, int&, int);
void Del_on_choice(int*&, int&, int);
int main()
{
	srand(time(0));
	int n;
	cout << " Enter size of array -> "; cin >> n;
	int* A = Create(n);
	cout << " Enter elements of array with space between of them, and press enter -> ";
	for (int i = 0; i < n; i++)
		cin >> A[i];
	cout << "\n Your array:\n";
	Print(A, n);
	int choice;
	cout << "\n What elements to remove? Odd or even? Press 1 for odd, or 2 for even -> ";
	cin >> choice;
	cout << "\n Your new array:\n";
	Del_on_choice(A, n, choice);
	Print(A, n);
	free(A);
}
int* Create(int size)
{
	int* arr = (int*)calloc(size, sizeof(int));
	return arr;
}
void Print(int* arr, int size)
{
	for (int i = 0; i < size; i++)
	{
		cout << arr[i] << "\t";
	}
	cout << "\n";
}
int Analiz_even(int key)
{
	if (key % 2 != 0)
		return 1;
	return 2;
}
void Del_pos(int*& arr, int& size, int pos)
{
	for (int i = pos; i < size - 1; i++)
	{
		arr[i] = arr[i + 1];
	}
	arr = (int*)realloc(arr, (size - 1) * sizeof(int));
	size--;
}
void Del_on_choice(int*& arr, int& size, int choice)
{
	if (choice == 1)
	{
		for (int i = 0; i < size; i++)
		{
			if (Analiz_even(arr[i]) == 1)
			{
				Del_pos(arr, size, i);
				i--;
			}
		}
	}
	else
	{
		for (int i = 0; i < size; i++)
		{
			if (Analiz_even(arr[i]) == 2)
			{
				Del_pos(arr, size, i);
				i--;
			}
		}
	}
}




Задание 1. Написать функцию, которая получает указатель на массив и его размер, 
и возвращает сумму и произведение его элементов в двух параметрах-указателях



#include <iostream>
#include <time.h>
using namespace std;
int* Create(int);
void Rand_print(int*, int);
void Print(int*, int);
void sum_mul(int*, int, int*, int*);
int main()
{
	srand(time(0));
	int n;
	cout << " Enter size of array -> "; cin >> n;
	int* A = Create(n);
	cout << "\n Your array:\n";
	Rand_print(A, n);
	int sum = 0, mul = 1;
	sum_mul(A, n, &sum, &mul);
	cout << "\n Sum elements of array: " << sum << "\n Mul elements of array: " << mul << "\n";
	free(A);
}
int* Create(int size)
{
	int* arr = (int*)calloc(size, sizeof(int));
	return arr;
}
void Print(int* arr, int size)
{
	for (int i = 0; i < size; i++)
	{
		cout << arr[i] << "\t";
	}
	cout << "\n";
}
void Rand_print(int* arr, int size)
{
	for (int i = 0; i < size; i++)
	{
		arr[i] = rand() % 13;
		cout << arr[i] << "\t";
	}
	cout << "\n";
}
void sum_mul(int* arr, int size, int* psum, int* pmul)
{
	for (int i = 0; i < size; i++)
	{
		*psum += arr[i];
		*pmul *= arr[i];
	}
}




Задание 2. Написать функцию, которая получает указатель
на массив и его размер, и возвращает количество отрицательных, положительных и нулевых элементов массива



#include <iostream>
#include <time.h>
using namespace std;
int* Create(int);
void Rand_print_ab(int*, int);
void Amount(int*, int, int&, int&, int&);
int main()
{
	srand(time(0));
	int n;
	cout << " Enter size of array -> "; cin >> n;
	int* A = Create(n);
	cout << "\n Your array:\n";
	Rand_print_ab(A, n);
	int negatives = 0, zeros = 0, positives = 0;
	Amount(A, n, negatives, zeros, positives);
	cout << "\n Negatives elements of array: " << negatives << 
		"\n Zeros elements of array: " << zeros <<
		"\n Positives elements of array: " << positives << "\n";
	free(A);
}
int* Create(int size)
{
	int* arr = (int*)calloc(size, sizeof(int));
	return arr;
}
void Rand_print_ab(int* arr, int size)
{
	int a = -20;
	int b = 20;
	for (int i = 0; i < size; i++)
	{
		arr[i] = a + rand() % (b - a + 1);
		cout << arr[i] << "\t";
	}
	cout << "\n";
}
void Amount(int* arr, int size, int& negatives, int& zeros, int& positives)
{
	for (int i = 0; i < size; i++)
	{
		if (arr[i] < 0)
			negatives++;
		else if (arr[i] == 0)
			zeros++;
		else if (arr[i] > 0)
			positives++;
	}
}




Задание 3. Написать функцию, принимающую в качестве
аргумента, указатели на два массива (А и В) и размеры
массивов. Функция проверяет, является ли массив В
подмножеством массива А и возвращает указатель на
начало найденного фрагмента, либо возвращает 0 в противном случае.




#include <iostream>
#include <time.h>
using namespace std;
int* Create(int);
void Rand_print_ab(int*, int);
void Vvod(int*, int);
int* Podmnogestvo(int*, int, int*, int);
int main()
{
	srand(time(0));
	int n;
	cout << " Enter size of first array -> "; cin >> n;
	int* A = Create(n);
	Rand_print_ab(A, n);
	int m;
	cout << "\n Enter size of second array -> "; cin >> m;
	int* B = Create(m);
	cout << "\n";
	Vvod(B, m);
	int* p = Podmnogestvo(A, n, B, m);
	if (p == 0)
	{
		cout << "\n B ne podmnogestvo massiva A.\n";
	}
	else
	{
		cout << "\n Podmnogestvo nahoditsa na " << p - A + 1 << " meste\n";
	}
	free(A);
}
int* Create(int size)
{
	int* arr = (int*)calloc(size, sizeof(int));
	return arr;
}
void Rand_print_ab(int* arr, int size)
{
	int a = -20;
	int b = 20;
	for (int i = 0; i < size; i++)
	{
		arr[i] = a + rand() % (b - a + 1);
		cout << arr[i] << "\t";
	}
	cout << "\n";
}
int* Podmnogestvo(int* A, int n, int* B, int m)
{
	for (int i = 0; i < n; i++)
	{
		int kol = 0;
		for (int j = 0; j < m; j++)
		{
			if (A[i + j] == B[j])
				kol++;
		}
		if (kol == m)
		{
			return A + i;
		}
	}
	return 0;
}
void Vvod(int* arr, int size)
{
	for (int i = 0; i < size; i++)
	{
		cout << "Enter arr[" << i << "]: ";
		cin >> arr[i];
	}
}



Задание 4. Написать функцию, которая получает указатель
на динамический массив и его размер. Функция должна
удалить из массива все отрицательные числа и вернуть
указатель на новый динамический массив.




#include <iostream>
#include <time.h>
using namespace std;
int* Create(int);
void Rand_print_ab(int*, int);
void Print(int*, int);
void Del_pos(int*&, int&, int);
void Del_negative(int*&, int&);
int main()
{
	srand(time(0));
	int n;
	cout << " Enter size of array -> "; cin >> n;
	int* A = Create(n);
	cout << "\n Your array:\n";
	Rand_print_ab(A, n);
	Del_negative(A, n);
	cout << "\n Array without negative numbers:\n";
	Print(A, n);
	free(A);
}
int* Create(int size)
{
	int* arr = (int*)calloc(size, sizeof(int));
	return arr;
}
void Rand_print_ab(int* arr, int size)
{
	int a = -20;
	int b = 20;
	for (int i = 0; i < size; i++)
	{
		arr[i] = a + rand() % (b - a + 1);
		cout << arr[i] << "\t";
	}
	cout << "\n";
}
void Print(int* arr, int size)
{
	for (int i = 0; i < size; i++)
	{
		cout << arr[i] << "\t";
	}
	cout << "\n";
}
void Del_pos(int*& arr, int& size, int pos)
{
	for (int i = pos; i < size - 1; i++)
	{
		arr[i] = arr[i + 1];
	}
	arr = (int*)realloc(arr, (size - 1) * sizeof(int));
	size--;
}
void Del_negative(int*& arr, int& size)
{
	for (int i = 0; i < size; i++)
	{
		if (arr[i] < 0)
		{
			Del_pos(arr, size, i);
			i--;
		}
	}
}




Задание 5. Создать функцию, позволяющую добавлять
блок элементов в конец массива



#include <iostream>
#include <time.h>
using namespace std;
int* Create(int);
void Rand_print_ab(int*, int);
void Print(int*, int);
int* Ins_push(int*, int&, int);
int* Ins_Blok(int*, int&, int*, int);
int main()
{
	srand(time(0));
	int n;
	cout << " Enter size of first array -> "; cin >> n;
	int* A = Create(n);
	Rand_print_ab(A, n);
	int m;
	cout << "\n Enter size of first array -> "; cin >> m;
	int* B = Create(m);
	Rand_print_ab(B, m);
	cout << "\n Result:\n";
	A = Ins_Blok(A, n, B, m);
	Print(A, n);
	free(A);
	free(B);
}
int* Create(int size)
{
	int* arr = (int*)calloc(size, sizeof(int));
	return arr;
}
void Rand_print_ab(int* arr, int size)
{
	int a = -20;
	int b = 20;
	for (int i = 0; i < size; i++)
	{
		arr[i] = a + rand() % (b - a + 1);
		cout << arr[i] << "\t";
	}
	cout << "\n";
}
void Print(int* arr, int size)
{
	for (int i = 0; i < size; i++)
	{
		cout << arr[i] << "\t";
	}
	cout << "\n";
}
int* Ins_push(int* arr, int& size, int num)
{
	arr = (int*)realloc(arr, (size + 1) * sizeof(int));
	arr[size] = num;
	size++;
	return arr;
}
int* Ins_Blok(int* mas, int& n, int* blok, int m)
{
	for (int i = 0; i < m; i++)
	{
		mas = Ins_push(mas, n, blok[i]);
	}
	return mas;
}



Задание 6. Создать функцию, позволяющую вставлять
блок элементов, начиная с произвольного индекса массива.



#include <iostream>
#include <time.h>
using namespace std;
int* Create(int);
void Rand_print_ab(int*, int);
void Print(int*, int);
void Ins_pos(int*&, int&, int, int);
void Ins_Blok(int*&, int&, int*, int, int);
int main()
{
	srand(time(0));
	int n;
	cout << " Enter size of first array -> "; cin >> n;
	int* A = Create(n);
	Rand_print_ab(A, n);
	int m;
	cout << "\n Enter size of first array -> "; cin >> m;
	int* B = Create(m);
	Rand_print_ab(B, m);
	int p;
	cout << "\n Enter position (start is 0) -> "; cin >> p;
	Ins_Blok(A, n, B, m, p);
	cout << "\n Result:\n";
	Print(A, n);
	free(A);
	free(B);
}
int* Create(int size)
{
	int* arr = (int*)calloc(size, sizeof(int));
	return arr;
}
void Rand_print_ab(int* arr, int size)
{
	int a = -20;
	int b = 20;
	for (int i = 0; i < size; i++)
	{
		arr[i] = a + rand() % (b - a + 1);
		cout << arr[i] << "\t";
	}
	cout << "\n";
}
void Print(int* arr, int size)
{
	for (int i = 0; i < size; i++)
	{
		cout << arr[i] << "\t";
	}
	cout << "\n";
}
void Ins_pos(int*& arr, int& size, int pos, int num)
{
	arr = (int*)realloc(arr, (size + 1) * sizeof(int));
	for (int i = size; i > pos; i--)
	{
		arr[i] = arr[i - 1];
	}
	arr[pos] = num;
	size++;
}
void Ins_Blok(int*& arr, int& n, int* blok, int m, int pos)
{
	for (int i = 0; i < m; i++)
	{
		Ins_pos(arr, n, pos + i, blok[i]);
	}
}




Задание 7. Создать функцию, позволяющую удалять блок
элементов, начиная с произвольного индекса массива.



#include <iostream>
#include <time.h>
using namespace std;
int* Create(int);
void Rand_print_ab(int*, int);
void Print(int*, int);
void Del_pos(int*&, int&, int);
void Del_blok(int*&, int&, int, int);
int main()
{
	srand(time(0));
	int n;
	cout << " Enter size of first array -> "; cin >> n;
	int* A = Create(n);
	Rand_print_ab(A, n);
	int pos;
	cout << "\n Enter position (start is 0) -> "; cin >> pos;
	int amount;
	cout << "\n Enter amount of elements -> "; cin >> amount;
	Del_blok(A, n, pos, amount);
	cout << "\n Result:\n";
	Print(A, n);
	free(A);
}
int* Create(int size)
{
	int* arr = (int*)calloc(size, sizeof(int));
	return arr;
}
void Rand_print_ab(int* arr, int size)
{
	int a = -20;
	int b = 20;
	for (int i = 0; i < size; i++)
	{
		arr[i] = a + rand() % (b - a + 1);
		cout << arr[i] << "\t";
	}
	cout << "\n";
}
void Print(int* arr, int size)
{
	for (int i = 0; i < size; i++)
	{
		cout << arr[i] << "\t";
	}
	cout << "\n";
}
void Del_pos(int*& arr, int& size, int pos)
{
	for (int i = pos; i < size - 1; i++)
	{
		arr[i] = arr[i + 1];
	}
	arr = (int*)realloc(arr, (size - 1) * sizeof(int));
	size--;
}
void Del_blok(int*& arr, int& size, int pos, int amount)
{
	for (int i = 0; i < amount; i++)
	{
		Del_pos(arr, size, pos);
	}
}






Задание 1. Написать программу, которая содержит функцию Action, принимающую в качестве аргумента,
указатели на два массива (А и В) и размеры массивов, а также указатель на функцию.
Пользователю отображается меню, в котором он может выбрать max, min, avg. 
Если выбран max — передается указатель на функцию, которая ищет максимум,
если выбран min — передается указатель на функцию,
которая ищет минимум, если выбран avg — передается
указатель на функцию, которая ищет среднее.
Возвращаемое значение функции Action результат
выбора пользователя max, min, avg




#include <iostream>
#include <time.h>
using namespace std;
void Rand_print(double*, int);
double Max(double*, int, double*, int);
double Min(double*, int, double*, int);
double Avg(double*, int, double*, int);
double Action(double*, int, double*, int, double (*pf)(double*, int, double*, int));
int main()
{
	srand(time(0));
	cout << " Array 1: \n";
	const int size1 = 5;
	double A[size1];
	Rand_print(A, size1);
	cout << "\n Array 2: \n";
	const int size2 = 7;
	double B[size2];
	Rand_print(B, size2);
	int choice;
	cout << " If you want to get Max of two arrays - press 1\n"
		" If you want to get Min of two arrays - press 2\n"
		" If you want to get Average of two arrays - press 3\n ";
	cin >> choice;

	switch (choice)
	{
		case 1: cout << "Res = " << Action(A, size1, B, size2, Max);
			break;
		case 2: cout << "Res = " << Action(A, size1, B, size2, Min);
			break;
		case 3: cout << "Res = " << Action(A, size1, B, size2, Avg);
			break;
	}
}
void Rand_print(double* arr, int size)
{
	for (int i = 0; i < size; i++)
	{
		arr[i] = rand() % 13;
		cout << arr[i] << "\t";
	}
	cout << "\n";
}
double Max(double* A, int size1, double* B, int size2)
{
	double max = A[0];
	for (int i = 1; i < size1; i++)
		if (A[i] > max)
			max = A[i];
	for (int i = 0; i < size2; i++)
		if (B[i] > max)
			max = B[i];
	return max;
}
double Min(double* A, int size1, double* B, int size2)
{
	double min = A[0];
	for (int i = 1; i < size1; i++)
		if (A[i] < min)
			min = A[i];
	for (int i = 0; i < size2; i++)
		if (B[i] < min)
			min = B[i];
	return min;
}
double Avg(double* A, int size1, double* B, int size2)
{
	double sum = 0, n, m;
	n = size1, m = size2;
	for (int i = 0; i < size1; i++)
		sum += A[i];
	for (int i = 0; i < size2; i++)
		sum += B[i];
	return sum / (n + m);
}
double Action(double* mas1, int n, double* mas2, int m, double (*pf)(double*, int, double*, int))
{
	return (*pf)(mas1, n, mas2, m);
}





Задание 1. Написать функцию, которая удаляет из строки
символ с заданным номером.





#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
using namespace std;
char* Gets(char*&);
char* Del_pos(char*&, int);
int main()
{
    char* str;
    Gets(str);
    int choice;
    cout << "\n\n Choice position of symbol, which you want to delete (start with 1) -> ";
    cin >> choice;
    choice--;
    cout << Del_pos(str, choice);
    free(str);
}
char* Gets(char*& str)
{
    str = nullptr;
    int n = 0;
    char ch;
    while ((ch = getchar()) != '\n')
    {
        str = (char*)realloc(str, n + 1);
        str[n] = ch;
        n++;
    }
    str = (char*)realloc(str, n + 1);
    str[n] = 0;
    return str;
}
char* Del_pos(char*& str, int pos)
{
    strcpy(str + pos, str + pos + 1);
    str = (char*)realloc(str, strlen(str) + 1);
    return str;
}




Задание 2. Написать функцию, которая удаляет из строки
все вхождения в нее заданного символа





#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
using namespace std;
char* Gets(char*&);
char* Del_symb(char*&, const char*);
int main()
{
    cout << " Enter string: ";
    char* str;
    Gets(str);
    cout << "\n\n Enter symbol, which you want to delete -> ";
    char* choice;
    Gets(choice);
    cout << "\n " << Del_symb(str, choice);
    free(str);
    free(choice);
}
char* Gets(char*& str)
{
    str = nullptr;
    int n = 0;
    char ch;
    while ((ch = getchar()) != '\n')
    {
        str = (char*)realloc(str, n + 1);
        str[n] = ch;
        n++;
    }
    str = (char*)realloc(str, n + 1);
    str[n] = 0;
    return str;
}
char* Del_symb(char*& str, const char* ch) 
{
    char* tmp;
    while ((tmp = strpbrk(str, ch)) != nullptr)
    {
        strcpy(tmp, tmp + 1);
    }
    str = (char*)realloc(str, strlen(str) + 1);
    return str;
}




Задание 3. Написать функцию, которая вставляет в строку
в указанную позицию заданный символ.




#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
using namespace std;
char* Gets(char*&);
char* Ins_symb(char*&, int, char);
int main()
{
    cout << " Enter string: ";
    char* str;
    Gets(str);
    char ch;
    cout << "\n\n Enter symbol, which you want to insert -> ";
    cin >> ch;
    int pos;
    cout << "\n\n Enter position -> ";
    cin >> pos;
    cout << "\n " << Ins_symb(str, pos, ch);
    free(str);
}
char* Gets(char*& str)
{
    str = nullptr;
    int n = 0;
    char ch;
    while ((ch = getchar()) != '\n')
    {
        str = (char*)realloc(str, n + 1);
        str[n] = ch;
        n++;
    }
    str = (char*)realloc(str, n + 1);
    str[n] = 0;
    return str;
}
char* Ins_symb(char*& str, int pos, char ch)
{
    str = (char*)realloc(str, strlen(str) + 2);
    memmove(str + pos + 1, str + pos, strlen(str) - pos + 1); 
    str[pos] = ch; 
    return str;
}





Задание 4. Написать программу, которая заменяет все
символы точки «.» в строке, введенной пользователем,
на символы восклицательного знака «!».





#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
using namespace std;
char* Gets(char*&);
char* Replace_symb(char*, char, char);
int main()
{
    cout << " Enter string: ";
    char* str;
    Gets(str);
    char Old;
    cout << "\n\n Enter symbol, which you want to replace -> ";
    cin >> Old;
    char New;
    cout << "\n\n Enter new symbol -> ";
    cin >> New;
    cout << "\n " << Replace_symb(str, Old, New);
    free(str);
}
char* Gets(char*& str)
{
    str = nullptr;
    int n = 0;
    char ch;
    while ((ch = getchar()) != '\n')
    {
        str = (char*)realloc(str, n + 1);
        str[n] = ch;
        n++;
    }
    str = (char*)realloc(str, n + 1);
    str[n] = 0;
    return str;
}
char* Replace_symb(char* str, char Old, char New)
{
    char* tmp;
    while ((tmp = strchr(str, Old)) != nullptr) 
        *tmp = New;
    return str;
}





Задание 5. Пользователь вводит строку символов и искомый
символ, посчитать сколько раз он встречается в строке.




#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
using namespace std;
char* Gets(char*&);
int Count_symb(char*, char);
int main()
{
    cout << " Enter string: ";
    char* str;
    Gets(str);
    char key;
    cout << "\n\n Enter symbol, which you want to find -> ";
    cin >> key;
    cout << "\n Amount symbols '" << key << "' is " << Count_symb(str, key);
    free(str);
}
char* Gets(char*& str)
{
    str = nullptr;
    int n = 0;
    char ch;
    while ((ch = getchar()) != '\n')
    {
        str = (char*)realloc(str, n + 1);
        str[n] = ch;
        n++;
    }
    str = (char*)realloc(str, n + 1);
    str[n] = 0;
    return str;
}
int Count_symb(char* str, char ch)
{
    char* tmp = str;
    int count = 0;
    while ((tmp = strchr(tmp, ch)) != nullptr)
    {
        count++;
        tmp++;
    }
    return count;
}





Задание 6. Пользователь вводит строку. Определить количество букв, количество цифр и количество остальных
символов, присутствующих в строке.





#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
using namespace std;
char* Gets(char*&);
void Kol_Bukv_Cifr_Drug(char* str);
int main()
{
    cout << " Enter string: ";
    char* str;
    Gets(str);
    Kol_Bukv_Cifr_Drug(str);
    free(str);
}
char* Gets(char*& str)
{
    str = nullptr;
    int n = 0;
    char ch;
    while ((ch = getchar()) != '\n')
    {
        str = (char*)realloc(str, n + 1);
        str[n] = ch;
        n++;
    }
    str = (char*)realloc(str, n + 1);
    str[n] = 0;
    return str;
}
void Kol_Bukv_Cifr_Drug(char* str)
{
    int kol_b, kol_c, kol_d;
    kol_b = kol_c = kol_d = 0;
    while (*str != '\0') 
    {
        if (isalpha(*str) != 0) kol_b++; 
        else if (isdigit(*str) != 0) kol_c++; 
        else kol_d++; 
        str++;
    }
    cout << "Kol bukv: " << kol_b << "\n";
    cout << "Kol cifr: " << kol_c << "\n";
    cout << "Kol drugie: " << kol_d << "\n";
}






Задание 1. Создайте приложение Калькулятор. Нужно
поддерживать операции +, –, *, /.
Реализовать меню без использования операторов if
и switch при помощи массива указателей на функции.



#include <iostream>
#include <time.h>
using namespace std;
double Add(double, double);
double Sub(double, double);
double Mul(double, double);
double Div(double, double);
int main()
{
	double (*pf[4])(double, double) = { Add, Sub, Mul, Div };
	double a, b;
	int ch;
	do
	{
		cout << " Enter your numbers:\n";
		cout << " Enter first num -> "; cin >> a;
		cout << " Enter second num -> "; cin >> b;
		cout <<
			" 1) Add - press 1\n"
			" 2) Sub - press 2\n"
			" 3) Mul - press 3\n"
			" 4) Div - press 4\n ";
		cin >> ch;
		if (ch > 0 && ch < 5)
			cout << " Res = " << (*pf[ch - 1])(a, b) << "\n\n";		
		cout << " Press 1 to continue, or 0 to exit:\n ";
		cin >> ch;
	} while (ch != 0);
}
double Add(double a, double b)
{
	return a + b;
}
double Sub(double a, double b)
{
	return a - b;
}
double Mul(double a, double b)
{
	return a * b;
}
double Div(double a, double b)
{
	return a / b;
}





Задание 2. Написать программу, которая содержит функцию, принимающую в качестве аргумента, указатели
на три массива и размер массивов, Заносит в массив
C суммы элементов массивов А и В. Размер массивов
одинаковый.




#include <iostream>
#include <time.h>
using namespace std;
void Rand_print(int*, int);
void Print(int*, int);
int* Sum(int*, int*, int*, int);
int main()
{
	srand(time(0));
	const int size = 10;
	int A[size];
	cout << " Array 1:\n";
	Rand_print(A, size);
	int B[size];
	cout << "\n Array 2:\n";
	Rand_print(B, size);
	int C[size];
	cout << "\n Array 3:\n";
	Print(Sum(A, B, C, size), size);
}
void Rand_print(int* arr, int size)
{
	for (int i = 0; i < size; i++)
	{
		arr[i] = rand() % 13;
		cout << arr[i] << "\t";
	}
	cout << "\n";
}
void Print(int* arr, int size)
{
	for (int i = 0; i < size; i++)
		cout << arr[i] << "\t";
	cout << "\n";
}
int* Sum(int* A, int* B, int* C, int size)
{
	for (int i = 0; i < size; i++)
		C[i] = A[i] + B[i];
	return C;
}




Задание 1. Дана строка символов. Заменить в ней все
пробелы на табуляции.



#include <iostream>
using namespace std;
int main()
{
	setlocale(LC_ALL, "ru");
	char str[] = "Дана строка символов. Заменить в ней все пробелы на табуляции.";
	cout << str << "\n\n";
	int count = 0;
	while (str[count] != '\0')
	{
		if (str[count] == ' ')
			str[count] = '\t';
		count++;
	}
	cout << str << "\n";
}



Задание 2. Дана строка символов. Определить количество букв, цифр и остальных символов, присутствующих
в строке.




#include <iostream>
using namespace std;
int main()
{
	setlocale(LC_ALL, "ru");
	char str[] = "Даны 3 строки с цифрами 7. Заменить, или оставить цифру 7 со 2-ой строки - решать вам;";
	cout << str << "\n\n";
	int count = 0;
	int letters = 0;
	int signs = 0;
	int numbers = 0;
	while (str[count] != '\0')
	{
		if (str[count] >= (char)65 && str[count] <= (char)90 || str[count] >= (char)97 && str[count] <= (char)122 ||
			str[count] >= (char)192 && str[count] <= (char)255)
			letters++;
		if (str[count] >= 48 && str[count] <= 57)
			numbers++;
		if (str[count] == '.' || str[count] == ',' || str[count] == '-' || str[count] == '!' || str[count] == '?' ||
			str[count] == ';' || str[count] == ':')
			signs++;
		count++;
	}
	cout << " letters: " << letters << "\n" << " numbers: " << numbers << "\n" << " signs: " << signs << "\n";
}




Задание 3. Подсчитать количество слов во введенном
предложении





#include <iostream>
using namespace std;
int main()
{
	setlocale(LC_ALL, "ru");
	char str[100];
	gets_s(str);
	int Length = strlen(str);
	int count = 0;
	for (int i = 0; i < Length; i++)
	{
		if (str[i] == ' ' && str[i + 1] != ' ' || str[i] == '\t' )
			count++;
		else if (str[i] == '-' && str[i + 1] == ' ')
			count--;
	}
	cout << "\n Amount of words: " << count + 1 << "\n";
}





Задание 4. Дана строка символов. Необходимо проверить
является ли эта строка палиндромом.



#include <iostream>
#include< string.h >
using namespace std;
char* Create(int);
char* Del_pos(char*, int&, int);
int main()
{
	setlocale(LC_ALL, "ru");
	char strorig[] = "А роза упала на лапу Азора";
	int Length = strlen(strorig);
	char* str = Create(Length);
	for (int i = 0; i < Length; i++)
		str[i] = strorig[i];
	for (int i = 0; i < Length; i++)
		if (str[i] == ' ' || str[i] == ',' || str[i] == '.')
			str = Del_pos(str, Length, i);
	char* str2 = Create(Length);
	for (int i = 0; i < Length; i++)
		str2[i] = str[i];
	str[Length] = '\0';
	str2[Length] = '\0';
	_strrev(str2);
	(_stricmp(str, str2)) ? cout << " String is not palindrom\n" : cout << " String is palindrom\n";
}
char* Create(int size)
{
	char* arr = (char*)calloc(size, sizeof(char));
	return arr;
}
char* Del_pos(char* arr, int& size, int pos)
{
	for (int i = pos; i < size - 1; i++)
	{
		arr[i] = arr[i + 1];
	}
	arr = (char*)realloc(arr, (size - 1) * sizeof(char));
	size--;
	return arr;
}






Задание 1. Дополните свою библиотеку функций реализациями нижеследующих функций:
■ int mystrcmp (const char * str1, const char * str2); —
функция сравнивает две строки, и , если строки равны
возвращает 0, если первая строка больше второй, то
возвращает 1, иначе –1.

int mystrcmp(const char* str1, const char* str2)
{
    while (*str1 == *str2 && *str1 != '\0')  
    {
        str1++; str2++;
    }
    if (*str1 > * str2) return 1; 
    if (*str1 < *str2) return -1;
    return 0; 
}




■ int StringToNumber(char * str); — функция конвертирует строку в число и возвращает это число.

int StringToNumber(const char* str)
{
    int num = 0;
    int f = 0;
    if (str[0] == '-') f = 1; 
    for (int i = f; i < strlen(str); i++)
    {
        if (isdigit(str[i]) != 0)
            num = num * 10 + str[i] - 48;
        else
            break;
    }
    if (f == 1) num = -num; 
    return num;
}




■ char * NumberToString (int number); — функция конвертирует число в строку и возвращает указатель на
эту строку

char* NumberToString(int num)
{
    char* str = nullptr;
    int f;
    if (num < 0) 
    {
        str = (char*)calloc(2, 1);
        str[0] = '-';
        f = 1;
    }
    else
    {
        str = (char*)calloc(1, 1); 
        f = 0; 
    }
    if (num < 0) num = -num; 
    while (num != 0)
    {
        str = (char*)realloc(str, strlen(str) + 2);
        memmove(str + f + 1, str + f, strlen(str) + 1);
        str[f] = num % 10 + 48; 
        num = num / 10; 
    }
    return str; 
}




■ char * Uppercase (char * str1); — функция преобразует
строку в верхний регистр.

char* Uppercase(char* str)
{
    for (int i = 0; i < strlen(str); i++)
    {
        if (islower(str[i]) != 0)
            str[i] = str[i] - 32;
    }
    return str;
}




■ char * Lowercase (char * str1); — функция преобразует
строку в нижний регистр.

char* Lowercase(char* str)
{
    for (int i = 0; i < strlen(str); i++)
    {
        if (isupper(str[i]) != 0)
            str[i] = str[i] + 32;
    }
    return str;
}





■ char * mystrrev (char * str); — функция реверсирует
строку и возвращает указатель на новую строку.


char* mystrrev(char* str)//Hello
{
    char* begin = str; 
    char* end = str + strlen(str) - 1;
    while (begin < end)
    {
        char tmp = *begin;
        *begin = *end;
        *end = tmp;
        begin++;
        end--;
    }
    return str;
}





Задание 1. Есть некоторый текст. Используя стандартные
строковые функции из библиотеки языка C:
■ Найдите и замените вхождение некоторого слова на
заданное пользователем слово.
■ Изменить текст таким образом, чтобы каждое предложение начиналось с большой буквы.
■ Посчитайте сколько раз каждая буква встречается
в тексте.
■ Посчитайте сколько раз цифры встречаются в тексте.




#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
using namespace std;
char* Gets(char*&);
char* Zamena_slova(char*&, const char*, const char*);
char* Bolshie_bukvi(char*);
void Amount_letters(char*);
void Amount_digits(char*);
int main()
{
    char str1[] = "one hundred thousand years ago, Homo sapiens was one of at least six species of humans that lived on this planet. "
        "an unremarkable animal that played no more role in the ecosystem than gorillas, fireflies or jellyfish. "
        "but about seventy thousand years ago, the mysterious change in the cognitive abilities of Homo "
        "sapiens turned him into the owner of the planet and the nightmare of the ecosystem.";
    char* str = (char*)malloc(strlen(str1) + 1);
    strcpy(str, str1);
    cout << str << "\n";
    cout << "\n Which word to change? ";
    char* word1;
    Gets(word1);
    cout << " What is the new word? ";
    char* word2;
    Gets(word2);
    Bolshie_bukvi(str);
    Zamena_slova(str, word1, word2);
    cout << "\n" << Bolshie_bukvi(str) << "\n";
    cout << "\n Amount of letters:\n";  
    Amount_letters(str);
    cout << "\n Amount of digits:\n";
    Amount_digits(str);
    free(str);
}
char* Gets(char*& str)
{
    str = nullptr;
    int n = 0;
    char ch;
    while ((ch = getchar()) != '\n')
    {
        str = (char*)realloc(str, n + 1);
        str[n] = ch;
        n++;
    }
    str = (char*)realloc(str, n + 1);
    str[n] = 0;
    return str;
}
char* Zamena_slova(char*& str, const char* Old, const char* New)
{
    char* tmp;
    while ((tmp = strstr(str, Old)) != nullptr)
    {
        strcpy(tmp, tmp + strlen(Old));
        str = (char*)realloc(str, strlen(str) + strlen(New) + 1);
        memmove(tmp + strlen(New), tmp, strlen(str) - (tmp - str) + 1);
        strncpy(tmp, New, strlen(New));
    }
    return str;
}
char* Bolshie_bukvi(char* str)
{
    char* tmp = str;
    int kol = strspn(tmp, " ");
    if (islower(*(tmp + kol)) != 0)
        *(tmp + kol) -= 32;
    while ((tmp = strpbrk(tmp, ".?!")) != nullptr) 
    {
        kol = strspn(tmp + 1, " .");
        if (islower(*(tmp + kol + 1)) != 0)
            *(tmp + kol + 1) -= 32;
        tmp = tmp + kol + 1;
    }
    return str;
}
void Amount_letters(char* str)
{
    for (int i = 0; i < strlen(str); i++)
    {
        int kol = 1;
        for (int j = i + 1; j < strlen(str); j++)
            if (str[i] == str[j]) kol++; 
        int f = 0;
        for (int k = 0; k < i; k++)
            if (str[i] == str[k]) f = 1;
        if (f == 0 && isalpha(str[i]) != 0)
            cout << str[i] << "-" << kol << "\n";
    }
}
void Amount_digits(char* str)
{
    int ff = 0;
    for (int i = 0; i < strlen(str); i++)
    {
        int kol = 1;
        for (int j = i + 1; j < strlen(str); j++)
            if (str[i] == str[j]) kol++;
        int f = 0;
        for (int k = 0; k < i; k++) 
            if (str[i] == str[k]) f = 1;
        if (f == 0 && isdigit(str[i]) != 0)
        {
            cout << str[i] << "-" << kol << "\n";
            ff = 1;
        }        
    }
    if (ff == 0)
        cout << " There are no digits\n";
}






Задание 1. Создать библиотеку следующих функций:
■ int mystrlen(const char * str); — функция определяет
длину строки

int mystrlen(const char* str)
{
    int count = 0;
    while (*str != '\0')
    {
        count += 1;
        str++;
    }
    return count;
}



■ char * mystrcpy (char * str1, const char * str2); — функция
копирует строку str2 в буфер, адресуемый через str1.
Функция возвращает указатель на первую строку str1.

char* mystrcpy(char* str1, const char* str2)
{
    for (int i = 0; i <= strlen(str2); i++)
        str1[i] = str2[i];
    return str1;
}




■ char * mystrcat (char * str1, const char * str2); — функция присоединяет строку str2 к строке str1. Функция
возвращает указатель на первую строку str1.

char* mystrcat(char* str1, const char* str2)
{
    int kol = strlen(str1);
    for (int i = 0; i <= strlen(str2); i++)
        str1[kol + i] = str2[i];
    return str1;
}





■ char * mystrchr (char * str, char s); — функция осуществляет поиск символа s в строке str. Функция
возвращает указатель на первое вхождение символа
в строку, в противном случае 0

char* mystrchr(char* str, char ch)
{
    for (int i = 0; i < strlen(str); i++)
    {
        if (str[i] == ch)
            return str + i;
    }
    return 0;
}




■ char * mystrstr (char * str1, char * str2); — функция
осуществляет поиск подстроки str2 в строке str1.
Функция возвращает указатель на первое вхождение
подстроки str2 в строку str1, в противном случае 0.

char* mystrstr(char* str, const char* str1)
{
    for (int i = 0; i < strlen(str); i++)
    {
        int kol = 0;
        for (int j = 0; j < strlen(str1); j++)
            if (str[i + j] == str1[j]) kol++;
        if (kol == strlen(str1))
            return str + i;
    }
    return 0;
}






Задание 1. Есть некоторый текст. Используя стандартные
строковые функции:
■ Посчитайте количество вхождений слово, заданного
пользователем;
■ Посчитайте количество предложений в тексте;
■ Количество точек и запятых;
■ Переверните весь текст целиком;
■ Переверните каждое предложение в тексте.




#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
using namespace std;
char* Gets(char*&);
int Kol_Zadan_Slova(char*, const char*);
int Kol_Predl(char*);
int Count_symb(char*, char);
void Rev_Predl(char*);
int main()
{
    char str1[] = "one hundred thousand years ago, Homo sapiens was one of at least six species of humans that lived on this planet. "
        "an unremarkable animal that played no more role in the ecosystem than gorillas, fireflies or jellyfish. "
        "but about seventy thousand years ago, the mysterious change in the cognitive abilities of Homo "
        "sapiens turned him into the owner of the planet and the nightmare of the ecosystem.";
    char* str = (char*)malloc(strlen(str1) + 1);
    strcpy(str, str1);
    char* strR = (char*)malloc(strlen(str1) + 1);
    strcpy(strR, str1);
    char* strRs = (char*)malloc(strlen(str1) + 1);
    strcpy(strRs, str1);
    cout << str << "\n";
    cout << "\n Which word to search? ";
    char* word;
    Gets(word);
    cout << " Amount of such words: " << Kol_Zadan_Slova(str, word) << "\n";
    cout << " Amount of points and commas: " << Count_symb(str1, '.') + Count_symb(str1, ',') << "\n";
    cout << " Amount of sentences: " << Kol_Predl(str1) << "\n";
    cout << "\n Reverse text:\n" << _strrev(strR) << "\n";
    cout << "\n Reverse every sentence:\n";
    Rev_Predl(strRs);
    free(str);
    free(strR);
    free(strRs);
}
char* Gets(char*& str)
{
    str = nullptr;
    int n = 0;
    char ch;
    while ((ch = getchar()) != '\n')
    {
        str = (char*)realloc(str, n + 1);
        str[n] = ch;
        n++;
    }
    str = (char*)realloc(str, n + 1);
    str[n] = 0;
    return str;
}
int Kol_Zadan_Slova(char* str, const char* sl)
{
    int kol = 0;
    char* slovo = strtok(str, " ,.:;?!-\t");
    while (slovo != nullptr)
    {
        if (_stricmp(slovo, sl) == 0) kol++;
        slovo = strtok(nullptr, " ,.:;?!-\t");
    }
    return kol;
}
int Kol_Predl(char* str)
{
    int kol = 0;
    if (str[strlen(str) - 1] == ' ') kol--;
    char* slovo = strtok(str, ".?!\0");
    while (slovo != nullptr)
    {
        kol++;
        slovo = strtok(nullptr, ".?!\0");
    }
    return kol;
}
int Count_symb(char* str, char ch)
{
    char* tmp = str;
    int count = 0;
    while ((tmp = strchr(tmp, ch)) != nullptr)
    {
        count++;
        tmp++;
    }
    return count;
}
void Rev_Predl(char* str)
{
    char* slovo = strtok(str, ".?!\0");
    while (slovo != nullptr)
    {
        cout << _strrev(slovo) << ".";
        slovo = strtok(nullptr, ".?!\0");
    }
}




Задание 1. Написать функцию, добавляющую столбец
двухмерному массиву в указанную позицию.


#include <iostream>
#include<time.h>
using namespace std;
int** Create2D(int, int);
void Rand2D(int**, int, int);
void Print2D(int**, int, int);
void Delete2D(int**, int);
int** Ins_col(int**, int, int&, int);
int main()
{
	srand(time(0));
	int row, col;
	cout << " Enter sizes: ";
	cin >> row >> col;
	int** arr = Create2D(row, col);
	Rand2D(arr, row, col);
	Print2D(arr, row, col);
	int pos;
	cout << " Enter position: ";
	cin >> pos;
	arr = Ins_col(arr, row, col, pos);
	Print2D(arr, row, col);
	Delete2D(arr, row);
}
int** Create2D(int row, int col)
{
	int** arr = (int**)malloc(row * sizeof(int*));
	for (int i = 0; i < row; i++)
	{
		arr[i] = (int*)malloc(col * sizeof(int));
	}
	return arr;
}
void Rand2D(int** arr, int row, int col)
{
	for (int i = 0; i < row; i++)
	{
		for (int j = 0; j < col; j++)
		{
			arr[i][j] = rand() % 6;
		}
	}
}
void Print2D(int** arr, int row, int col)
{
	for (int i = 0; i < row; i++)
	{
		for (int j = 0; j < col; j++)
		{
			cout << arr[i][j] << "\t";
		}
		cout << "\n";
	}
	cout << "\n";
}
void Delete2D(int** arr, int row)
{
	for (int i = 0; i < row; i++)
	{
		free(arr[i]);
	}
	free(arr);
}
int** Ins_col(int** arr, int row, int& col, int pos)
{
	for (int i = 0; i < row; i++)
	{
		arr[i] = (int*)realloc(arr[i], (col + 1) * sizeof(int));
		for (int j = col; j > pos; j--)
		{
			arr[i][j] = arr[i][j - 1];
		}
		arr[i][pos] = 1000;
	}
	col++;
	return arr;
}





Задание 2. Написать функцию, удаляющую столбец двухмерного массива по указанному номеру.





#include <iostream>
#include<time.h>
using namespace std;
int** Create2D(int, int);
void Rand2D(int**, int, int);
void Print2D(int**, int, int);
void Delete2D(int**, int);
int** Del_col(int**, int, int&, int);
int main()
{
	srand(time(0));
	int row, col;
	cout << " Enter sizes: ";
	cin >> row >> col;
	int** arr = Create2D(row, col);
	Rand2D(arr, row, col);
	Print2D(arr, row, col);
	int pos;
	cout << " Enter position: ";
	cin >> pos;
	arr = Del_col(arr, row, col, pos);
	Print2D(arr, row, col);
	Delete2D(arr, row);
}
int** Create2D(int row, int col)
{
	int** arr = (int**)malloc(row * sizeof(int*));
	for (int i = 0; i < row; i++)
	{
		arr[i] = (int*)malloc(col * sizeof(int));
	}
	return arr;
}
void Rand2D(int** arr, int row, int col)
{
	for (int i = 0; i < row; i++)
	{
		for (int j = 0; j < col; j++)
		{
			arr[i][j] = rand() % 6;
		}
	}
}
void Print2D(int** arr, int row, int col)
{
	for (int i = 0; i < row; i++)
	{
		for (int j = 0; j < col; j++)
		{
			cout << arr[i][j] << "\t";
		}
		cout << "\n";
	}
	cout << "\n";
}
void Delete2D(int** arr, int row)
{
	for (int i = 0; i < row; i++)
	{
		free(arr[i]);
	}
	free(arr);
}
int** Del_col(int** arr, int row, int& col, int pos)
{
	for (int i = 0; i < row; i++)
	{
		for (int j = pos; j < col - 1; j++)
		{
			arr[i][j] = arr[i][j + 1];
		}
		arr[i] = (int*)realloc(arr[i], (col - 1) * sizeof(int));
	}
	col--;
	return arr;
}




Задание 3. Дана матрица порядка M×N (M строк, N столбцов). Необходимо заполнить ее значениями и написать
функцию, осуществляющую циклический сдвиг строк
и/или столбцов массива указанное количество раз и в указанную сторону.




#include <iostream>
#include<time.h>
using namespace std;
int** Create2D(int, int);
void Rand2D(int**, int, int);
void Print2D(int**, int, int);
void Delete2D(int**, int);
void Switch_Shift(int**, int, int, int, int);
int main()
{
	setlocale(LC_ALL, "ru");
	srand(time(0));
	int row, col;
	cout << " Enter sizes: ";
	cin >> row >> col;
	//row = col = 5;
	int** arr = Create2D(row, col);
	Rand2D(arr, row, col);
	Print2D(arr, row, col);
	int shift, route;
	cout << "\n Введите количество сдвигов -> "; cin >> shift;
	cout << " Введите направление:\n"
		" Лево - нажмите 1\n"
		" Право - нажмите 2\n"
		" Вверх - нажмите 3\n"
		" Вниз - нажмите 4\n ";
	cin >> route; cout << "\n";
	Switch_Shift(arr, row, col, shift, route);
	Print2D(arr, row, col);
	Delete2D(arr, row);
}
int** Create2D(int row, int col)
{
	int** arr = (int**)malloc(row * sizeof(int*));
	for (int i = 0; i < row; i++)
	{
		arr[i] = (int*)malloc(col * sizeof(int));
	}
	return arr;
}
void Rand2D(int** arr, int row, int col)
{
	for (int i = 0; i < row; i++)
	{
		for (int j = 0; j < col; j++)
		{
			arr[i][j] = rand() % 13;
		}
	}
}
void Print2D(int** arr, int row, int col)
{
	for (int i = 0; i < row; i++)
	{
		for (int j = 0; j < col; j++)
		{
			cout << arr[i][j] << "\t";
		}
		cout << "\n";
	}
	cout << "\n";
}
void Delete2D(int** arr, int row)
{
	for (int i = 0; i < row; i++)
	{
		free(arr[i]);
	}
	free(arr);
}
void Switch_Shift(int** arr, int row, int col, int shift, int route)
{
	switch (route)
	{
	case 1: for (int i = 0; i < shift; i++)
			{
				for (int i = 0; i < row; i++)
				{
					for (int j = 0; j < col - 1; j++)
					{
						swap(arr[i][j], arr[i][j + 1]);
					}
				}
			}
		  break;

	case 2: for (int i = 0; i < shift; i++)
			{
				for (int i = 0; i < row; i++)
				{
					for (int j = col - 1; j > 0; j--)
					{
						swap(arr[i][j], arr[i][j - 1]);
					}
				}
			}
		  break;

	case 3: for (int i = 0; i < shift; i++)
			{
				for (int i = 0; i < col; i++)
				{
					for (int j = 0; j < row - 1; j++)
					{
						swap(arr[j][i], arr[j + 1][i]);
					}
				}
			}
		  break;

	case 4: for (int i = 0; i < shift; i++)
			{
				for (int i = 0; i < col; i++)
				{
					for (int j = row - 1; j > 0; j--)
					{
						swap(arr[j][i], arr[j - 1][i]);
					}
				}
			}
		  break;
	}
}





Задание 1. Транспонирование матрицы — это операция,
после которой столбцы прежней матрицы становятся строками, а строки столбцами. Напишите функцию
транспонирования матрицы.





#include <iostream>
#include<time.h>
using namespace std;
int** Create2D(int, int);
void Rand2D(int**, int, int);
void Print2D(int**, int, int);
void Delete2D(int**, int);
int** Transpon(int**, int, int);
int main()
{
	setlocale(LC_ALL, "ru");
	srand(time(0));
	int row, col;
	cout << " Enter sizes: ";
	cin >> row >> col;
	int** arr = Create2D(row, col);
	Rand2D(arr, row, col);
	Print2D(arr, row, col);
	int** arrT = Transpon(arr, row, col);
	Print2D(arrT, col, row);
	Delete2D(arr, row);
	Delete2D(arrT, col);
}
int** Create2D(int row, int col)
{
	int** arr = (int**)malloc(row * sizeof(int*));
	for (int i = 0; i < row; i++)
	{
		arr[i] = (int*)malloc(col * sizeof(int));
	}
	return arr;
}
void Rand2D(int** arr, int row, int col)
{
	for (int i = 0; i < row; i++)
	{
		for (int j = 0; j < col; j++)
		{
			arr[i][j] = rand() % 13;
		}
	}
}
void Print2D(int** arr, int row, int col)
{
	for (int i = 0; i < row; i++)
	{
		for (int j = 0; j < col; j++)
		{
			cout << arr[i][j] << "\t";
		}
		cout << "\n";
	}
	cout << "\n";
}
void Delete2D(int** arr, int row)
{
	for (int i = 0; i < row; i++)
	{
		free(arr[i]);
	}
	free(arr);
}
int** Transpon(int** arr, int row, int col)
{
	int** arrT = Create2D(col, row);
	for (int i = 0; i < col; i++)
	{
		for (int j = 0; j < row; j++)
		{
			arrT[i][j] = arr[j][i];
		}
	}
	return arrT;
}





Задание 2. Создайте динамический массив, хранящий
в первой строке имя, а во второй — телефон. Организуйте поиск по имени и по номеру телефона и возможность
ввода и изменения данных.




#include <iostream>
#include <time.h>
using namespace std;
int** Create2D(int, int);
void PrintICQ(int**, int, int);
void Search(int**, int, int&);
int main()
{
	srand(time(0));
	setlocale(LC_ALL, "rus");
	int row = 2;
	int col = 4;
	int** ICQ = Create2D(row, col);
	for (int j = 0; j < col; j++)
	{
		ICQ[0][j] = 12345 + rand();
		ICQ[1][j] = 934523451 + rand();
	}
	PrintICQ(ICQ, row, col);
	do
	{
		int Exit = 0;
		int chiose;
		cout << "\n Найти контакт - нажмите 1\n"
			" Редактировать контакт - нажмите 2\n"
			" Добавить контакт - нажмите 3\n"
			" Выход - нажмите 4\n ";
		cin >> chiose;
		switch (chiose)
		{
			case 1:
				int key1;
				cout << "\n Введите номер ICQ: ";
				cin >> key1;
				Search(ICQ, col, key1);
				break;
			case 2:
				int key2;
				cout << "\n Введите номер ICQ: ";
				cin >> key2;
				Search(ICQ, col, key2);
				int edit;
				cout << "\n Редактировать номер ICQ - нажмите 1\n"
					" Редактировать номер телефона - нажмите 2\n ";
				cin >> edit;
				if (edit == 1)
				{
					int newICQ;
					cout << " Введите новый номер ICQ: ";
					cin >> newICQ;
					cout << "\n";
					for (int j = 0; j < col; j++)
					{
						if (ICQ[0][j] == key2)
							ICQ[0][j] = newICQ;
					}
					PrintICQ(ICQ, row, col);
				}
				else if (edit == 2)
				{
					int newPhone;
					cout << " Введите новый номер телефона (9 цифр): ";
					cin >> newPhone;
					cout << "\n";
					for (int j = 0; j < col; j++)
					{
						if (ICQ[0][j] == key2)
						{
							ICQ[1][j] = newPhone;
						}						
					}
					PrintICQ(ICQ, row, col);
				}
				break;
			case 3:
				int createICQ;
				cout << "\n Введите новый уникальный номер ICQ (5 цифр): ";
				cin >> createICQ;
				for (int j = 0; j < col; j++)
				{
					if (ICQ[0][j] == createICQ)
					{
						while (ICQ[0][j] == createICQ)
						{
							cout << " Такой ICQ уже есть, попробуйте еще раз: ";
							cin >> createICQ;
						}
					}
				}
				int createPhone;
				cout << "\n Введите номер телефона (9 цифр): ";
				cin >> createPhone;
				ICQ[0] = (int*)realloc(ICQ[0], (col + 1) * sizeof(int));
				ICQ[0][col] = createICQ;
				ICQ[1] = (int*)realloc(ICQ[1], (col + 1) * sizeof(int));
				ICQ[1][col] = createPhone;
				col++;
				PrintICQ(ICQ, row, col);
				break;
			case 4:
				Exit = 1;
				break;
		}
		if (Exit == 1)
			break;
	} while (true);
}
int** Create2D(int row, int col)
{
	int** arr = (int**)malloc(row *10 * sizeof(int*));
	for (int i = 0; i < row; i++)
	{
		arr[i] = (int*)malloc(col * 10* sizeof(int));
	}
	return arr;
}
void PrintICQ(int** ICQ, int row, int col)
{
	cout << " Номера ICQ:\t\t";
	for (int j = 0; j < col; j++)
	{
		cout << ICQ[0][j] << "\t\t";	
	}
	cout << "\n";
	cout << " Номера тел.(+380):\t";
	for (int j = 0; j < col; j++)
	{
		cout << ICQ[1][j] << "\t";
	}
	cout << "\n";
}
void Search(int** ICQ, int col, int& key) // если останется f = 0, то key будет меняться
{
	int f = 0;
	for (int j = 0; j < col; j++)
	{
		if (ICQ[0][j] == key)
		{
			cout << " Номер телефона этого контакта: (+380)" << ICQ[1][j] << "\n";
			f = 1;
			break;
		}
	}
	if (f == 0)
	{
		cout << " Контакта с таким номером ICQ не найдено. Попробуйте еще раз: ";
		cin >> key;
		Search(ICQ, col, key);
	}	
}








Задание 1. Написать функцию, добавляющую строку
двухмерному массиву в конец.



#include <iostream>
#include<time.h>
using namespace std;
int** Create2D(int, int);
void Rand2D(int**, int, int);
void Print2D(int**, int, int);
int** Push_row(int**, int&, int);
void Delete2D(int**, int);
int main()
{
	srand(time(0));
	int row, col;
	cout << " Enter sizes: ";
	cin >> row >> col;
	int** arr = Create2D(row, col);
	Rand2D(arr, row, col);
	Print2D(arr, row, col);
	arr = Push_row(arr, row, col);
	Print2D(arr, row, col);
	Delete2D(arr, row);
}
int** Create2D(int row, int col)
{
	int** arr = (int**)malloc(row * sizeof(int*));
	for (int i = 0; i < row; i++)
		arr[i] = (int*)malloc(col * sizeof(int));
	return arr;
}
void Rand2D(int** arr, int row, int col)
{
	for (int i = 0; i < row; i++)
	{
		for (int j = 0; j < col; j++)
		{
			arr[i][j] = rand() % 13;
		}
	}
}
void Print2D(int** arr, int row, int col)
{
	for (int i = 0; i < row; i++)
	{
		for (int j = 0; j < col; j++)
		{
			cout << arr[i][j] << "\t";
		}
		cout << "\n";
	}
	cout << "\n";
}
void Delete2D(int** arr, int row)
{
	for (int i = 0; i < row; i++)
	{
		free(arr[i]);
	}
	free(arr);
}
int** Push_row(int** arr, int& row, int col)
{
	arr = (int**)realloc(arr, (row + 1) * sizeof(int*));
	arr[row] = (int*)malloc(col * sizeof(int));
	for (int i = 0; i < col; i++)
	{
		arr[row][i] = 1000;
	}
	row++;
	return arr;
}





Задание 2. Написать функцию, добавляющую строку
двухмерному массиву в начало.




#include <iostream>
#include<time.h>
using namespace std;
int** Create2D(int, int);
void Rand2D(int**, int, int);
void Print2D(int**, int, int);
int** Ins_row_start(int**, int&, int);
void Delete2D(int**, int);
int main()
{
	srand(time(0));
	int row, col;
	cout << " Enter sizes: ";
	cin >> row >> col;
	int** arr = Create2D(row, col);
	Rand2D(arr, row, col);
	Print2D(arr, row, col);
	arr = Ins_row_start(arr, row, col);
	Print2D(arr, row, col);
	Delete2D(arr, row);
}
int** Create2D(int row, int col)
{
	int** arr = (int**)malloc(row * sizeof(int*));
	for (int i = 0; i < row; i++)
	{
		arr[i] = (int*)malloc(col * sizeof(int));
	}
	return arr;
}
void Rand2D(int** arr, int row, int col)
{
	for (int i = 0; i < row; i++)
	{
		for (int j = 0; j < col; j++)
		{
			arr[i][j] = rand() % 13;
		}
	}
}
void Print2D(int** arr, int row, int col)
{
	for (int i = 0; i < row; i++)
	{
		for (int j = 0; j < col; j++)
		{
			cout << arr[i][j] << "\t";
		}
		cout << "\n";
	}
	cout << "\n";
}
void Delete2D(int** arr, int row)
{
	for (int i = 0; i < row; i++)
	{
		free(arr[i]);
	}
	free(arr);
}
int** Ins_row_start(int** arr, int& row, int col)
{
	arr = (int**)realloc(arr, (row + 1) * sizeof(int*));
	for (int i = row; i > 0; i--)
	{
		arr[i] = arr[i - 1];
	}
	arr[0] = (int*)malloc(col * sizeof(int));
	for (int i = 0; i < col; i++)
	{
		arr[0][i] = 1000;
	}
	row++;
	return arr;
}




Задание 3. Написать функцию, добавляющую строку
двухмерному массиву в указанную позицию.





#include <iostream>
#include<time.h>
using namespace std;
int** Create2D(int, int);
void Rand2D(int**, int, int);
void Print2D(int**, int, int);
int** Ins_row(int**, int&, int, int);
void Delete2D(int**, int);
int main()
{
	srand(time(0));
	int row, col;
	cout << " Enter sizes: ";
	cin >> row >> col;
	int** arr = Create2D(row, col);
	Rand2D(arr, row, col);
	Print2D(arr, row, col);
	int pos;
	cout << " Enter position: ";
	cin >> pos;
	arr = Ins_row(arr, row, col, pos);
	Print2D(arr, row, col);
	Delete2D(arr, row);
}
int** Create2D(int row, int col)
{
	int** arr = (int**)malloc(row * sizeof(int*));
	for (int i = 0; i < row; i++)
	{
		arr[i] = (int*)malloc(col * sizeof(int));
	}
	return arr;
}
void Rand2D(int** arr, int row, int col)
{
	for (int i = 0; i < row; i++)
	{
		for (int j = 0; j < col; j++)
		{
			arr[i][j] = rand() % 13;
		}
	}
}
void Print2D(int** arr, int row, int col)
{
	for (int i = 0; i < row; i++)
	{
		for (int j = 0; j < col; j++)
		{
			cout << arr[i][j] << "\t";
		}
		cout << "\n";
	}
	cout << "\n";
}
void Delete2D(int** arr, int row)
{
	for (int i = 0; i < row; i++)
	{
		free(arr[i]);
	}
	free(arr);
}
int** Ins_row(int** arr, int& row, int col, int pos)
{
	arr = (int**)realloc(arr, (row + 1) * sizeof(int*));
	for (int i = row; i > pos; i--)
	{
		arr[i] = arr[i - 1];
	}
	arr[pos] = (int*)malloc(col * sizeof(int));
	for (int i = 0; i < col; i++)
	{
		arr[pos][i] = 1000;
	}
	row++;
	return arr;
}




Задание 4. Написать функцию, удаляющую строку двухмерного массива по указанному номеру.




#include <iostream>
#include<time.h>
using namespace std;
int** Create2D(int, int);
void Rand2D(int**, int, int);
void Print2D(int**, int, int);
int** Del_row(int**, int&, int, int);
void Delete2D(int**, int);
int main()
{
	srand(time(0));
	int row, col;
	cout << " Enter sizes: ";
	cin >> row >> col;
	int** arr = Create2D(row, col);
	Rand2D(arr, row, col);
	Print2D(arr, row, col);
	int pos;
	cout << " Enter position: ";
	cin >> pos;
	arr = Del_row(arr, row, col, pos);
	Print2D(arr, row, col);
	Delete2D(arr, row);
}
int** Create2D(int row, int col)
{
	int** arr = (int**)malloc(row * sizeof(int*));
	for (int i = 0; i < row; i++)
	{
		arr[i] = (int*)malloc(col * sizeof(int));
	}
	return arr;
}
void Rand2D(int** arr, int row, int col)
{
	for (int i = 0; i < row; i++)
	{
		for (int j = 0; j < col; j++)
		{
			arr[i][j] = rand() % 13;
		}
	}
}
void Print2D(int** arr, int row, int col)
{
	for (int i = 0; i < row; i++)
	{
		for (int j = 0; j < col; j++)
		{
			cout << arr[i][j] << "\t";
		}
		cout << "\n";
	}
	cout << "\n";
}
void Delete2D(int** arr, int row)
{
	for (int i = 0; i < row; i++)
	{
		free(arr[i]);
	}
	free(arr);
}
int** Del_row(int** arr, int& row, int col, int pos)
{
	free(arr[pos]);
	for (int i = pos; i < row - 1; i++)
	{
		arr[i] = arr[i + 1];
	}
	arr = (int**)realloc(arr, (row - 1) * sizeof(int*));
	row--;
	return arr;
}



Задание 1. Написать программу, которая удаляет из
двухмерного массива, заполненного случайными числами
строки, содержащие нулевые элементы




#include <iostream>
#include<time.h>
using namespace std;
int** Create2D(int, int);
void Rand2D(int**, int, int);
void Print2D(int**, int, int);
void Delete2D(int**, int);
int** Del_row(int**, int&, int, int);
int Filter_zero(int*, int);
int** Del_row_ifZero(int**, int&, int);
int main()
{
	srand(time(0));
	int row, col;
	cout << " Enter sizes: ";
	cin >> row >> col;
	int** arr = Create2D(row, col);
	Rand2D(arr, row, col);
	Print2D(arr, row, col);
	arr = Del_row_ifZero(arr, row, col);
	Print2D(arr, row, col);
	Delete2D(arr, row);
}
int** Create2D(int row, int col)
{
	int** arr = (int**)malloc(row * sizeof(int*));
	for (int i = 0; i < row; i++)
	{
		arr[i] = (int*)malloc(col * sizeof(int));
	}
	return arr;
}
void Rand2D(int** arr, int row, int col)
{
	for (int i = 0; i < row; i++)
	{
		for (int j = 0; j < col; j++)
		{
			arr[i][j] = rand() % 13;
		}
	}
}
void Print2D(int** arr, int row, int col)
{
	for (int i = 0; i < row; i++)
	{
		for (int j = 0; j < col; j++)
		{
			cout << arr[i][j] << "\t";
		}
		cout << "\n";
	}
	cout << "\n";
}
void Delete2D(int** arr, int row)
{
	for (int i = 0; i < row; i++)
	{
		free(arr[i]);
	}
	free(arr);
}
int** Del_row(int** arr, int& row, int col, int pos)
{
	free(arr[pos]);
	for (int i = pos; i < row - 1; i++)
	{
		arr[i] = arr[i + 1];
	}
	arr = (int**)realloc(arr, (row - 1) * sizeof(int*));
	row--;
	return arr;
}
int Filter_zero(int* arr, int size)
{
	for (int i = 0; i < size; i++)
	{
		if (arr[i] == 0)
			return 1;
	}
	return 0;
}
int** Del_row_ifZero(int** arr, int& row, int col)
{
	for (int i = 0; i < row; i++)
	{
		if (Filter_zero(arr[i], col) == 1)
		{
			arr = Del_row(arr, row, col, i);
			i--;
		}
	}
	return arr;
}





Задание 2. Написать программу, которая поэлементно
суммирует два динамических двумерных массива, заполненных случайными числами и сохраняет результат
в третьем массиве. Размеры исходных массивов задаются
пользователем.




#include <iostream>
#include<time.h>
using namespace std;
int** Create2D(int, int);
void Rand2D(int**, int, int);
void Print2D(int**, int, int);
void Delete2D(int**, int);
int main()
{
	srand(time(0));
	int row, col;
	cout << " Enter size arrays (row and col, write with space) -> "; 
	cin >> row >> col;
	cout << "\n Array 1:\n";
	int** arr1 = Create2D(row, col);
	Rand2D(arr1, row, col);
	Print2D(arr1, row, col);
	cout << "\n Array 2:\n";
	int** arr2 = Create2D(row, col);
	Rand2D(arr2, row, col);
	Print2D(arr2, row, col);
	cout << "\n Array result:\n";
	int** Res = Create2D(row, col);
	for (int i = 0; i < row; i++)
	{
		for (int j = 0; j < col; j++)
		{
			Res[i][j] = arr1[i][j] + arr2[i][j];
		}
	}
	Print2D(Res, row, col);
	Delete2D(arr1, row);
	Delete2D(arr2, row);
	Delete2D(Res, row);
}
int** Create2D(int row, int col)
{
	int** arr = (int**)malloc(row * sizeof(int*));
	for (int i = 0; i < row; i++)
	{
		arr[i] = (int*)malloc(col * sizeof(int));
	}
	return arr;
}
void Rand2D(int** arr, int row, int col)
{
	for (int i = 0; i < row; i++)
	{
		for (int j = 0; j < col; j++)
		{
			arr[i][j] = rand() % 13;
		}
	}
}
void Print2D(int** arr, int row, int col)
{
	for (int i = 0; i < row; i++)
	{
		for (int j = 0; j < col; j++)
		{
			cout << arr[i][j] << "\t";
		}
		cout << "\n";
	}
	cout << "\n";
}
void Delete2D(int** arr, int row)
{
	for (int i = 0; i < row; i++)
	{
		free(arr[i]);
	}
	free(arr);
}



Задание 3. Напишите функцию умножения матриц. Матрица представляет собой таблицу чисел. Произведением
матрицы A размером M×N (M строк, N столбцов) на
матрицу B размером N×K является матрица C размером
N×K такая, что
cij= ai1b1j + ai2b2j + … + aiNbNj, для
1 <= i <= M и 1 <= j <= K, где
■ axy — элемент, находящийся на пересечении строки
x и столбца y матрицы A;
■ bxy — элемент, находящийся на пересечении строки
x и столбца y матрицы B;
■ cxy — элемент, находящийся на пересечении строки
x и столбца y матрицы C.




#include <iostream>
#include<time.h>
using namespace std;
int** Create2D(int, int);
void Rand2D(int**, int, int);
void Print2D(int**, int, int);
void Delete2D(int**, int);
void Matrix_mul(int**, int**, int**, int, int, int);
int main()
{
	setlocale(LC_ALL, "ru");
	srand(time(0));
	int n, m;
	cout << " Введите кол-во строк первой матрицы -> "; 
	cin >> n;
	cout << " Введите кол-во столбцов первой матрицы -> ";
	cin >> m;
	cout << "\n Array 1:\n";
	int** A = Create2D(n, m);
	Rand2D(A, n, m);
	Print2D(A, n, m);
	int k;
	cout << " Введите кол-во столбцов второй матрицы -> ";
	cin >> k;
	cout << "\n Array 2:\n";
	int** B = Create2D(m, k);
	Rand2D(B, m, k);
	Print2D(B, m, k);
	cout << "\n Array result:\n";
	int** C = Create2D(n, k);
	Matrix_mul(A, B, C, n, m, k);
	Print2D(C, n, k);
	Delete2D(A, n);
	Delete2D(B, m);
	Delete2D(C, n);
}
int** Create2D(int row, int col)
{
	int** arr = (int**)malloc(row * sizeof(int*));
	for (int i = 0; i < row; i++)
	{
		arr[i] = (int*)malloc(col * sizeof(int));
	}
	return arr;
}
void Rand2D(int** arr, int row, int col)
{
	for (int i = 0; i < row; i++)
	{
		for (int j = 0; j < col; j++)
		{
			arr[i][j] = rand() % 6;
		}
	}
}
void Print2D(int** arr, int row, int col)
{
	for (int i = 0; i < row; i++)
	{
		for (int j = 0; j < col; j++)
		{
			cout << arr[i][j] << "\t";
		}
		cout << "\n";
	}
	cout << "\n";
}
void Delete2D(int** arr, int row)
{
	for (int i = 0; i < row; i++)
	{
		free(arr[i]);
	}
	free(arr);
}
void Matrix_mul(int** A, int** B, int** C, int n, int m, int k)
{
	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < k; j++)
		{
			C[i][j] = 0;
			for (int l = 0; l < m; l++)
			{
				C[i][j] += A[i][l] * B[l][j];
			}
		}
	}
}





Задание 1. Написать программу, которая дает пользователю ввести 5 фамилий студентов, а затем сортирует их
по возрастанию


#include <iostream>
using namespace std;
char* Gets(char*&);
char** Create();
char** Add(char**, int&);
char** Sort(char**, int);
void Print(char**, int);
void Delete(char**, int);
int main()
{
	int amount = 5;
	int n = 0;
	char** arr = Create();
	cout << " Enter " << amount << " surnames:\n";
	for (int i = 0; i < amount; i++)
	{
		arr = Add(arr, n);
	}
	arr = Sort(arr, n);
	cout << "\n\n";
	Print(arr, n);
	Delete(arr, n);
}
char* Gets(char*& str)
{
	str = nullptr;
	int n = 0;
	char ch;
	while ((ch = getchar()) != '\n')
	{
		str = (char*)realloc(str, n + 1);
		str[n] = ch;
		n++;
	}
	str = (char*)realloc(str, n + 1);
	str[n] = 0;
	return str;
}
char** Create()
{
	char** arr = (char**)malloc(sizeof(char*));
	arr[0] = nullptr;
	return arr;
}
char** Add(char** arr, int& n)
{
	arr = (char**)realloc(arr, (n + 1) * sizeof(char*));
	cout << " Enter surname: ";
	Gets(arr[n]);
	n++;
	return arr;
}
void Print(char** arr, int n)
{
	for (int i = 0; i < n; i++)
	{
		cout << arr[i] << "\n";
	}
}
char** Sort(char** arr, int n)
{
	for (int i = 0; i < n; i++)
	{
		for (int j = n - 1; j > i; j--)
		{
			if (_stricmp(arr[j], arr[j - 1]) < 0)
			{
				char* tmp = arr[j];
				arr[j] = arr[j - 1];
				arr[j - 1] = tmp;
			}
		}
	}
	return arr;
}
void Delete(char** arr, int n)
{
	for (int i = 0; i < n; i++)
	{
		free(arr[i]);
	}
	free(arr);
}





Задание 2. Есть 3 двумерных массива A, B, C. Количество
строк и столбцов для них вводит пользователь с клавиатуры для каждого из них. Реализуйте
■ Создайте одномерный массив, который содержит
общие значения для A, B, C;
■ Создайте одномерный массив, который содержит
уникальные значения для A, B, C;
■ Создайте одномерный массив, который содержит
общие значения для A и C;
■ Создайте одномерный массив, который содержит
отрицательные значения для A, B, C без повторений.





#include <iostream>
#include <time.h>
using namespace std;
int** Create(int, int);
void Rand(int**, int, int);
void Delete(int**, int);
void Print2D(int**, int, int);
void Print(int*, int);
int Analiz2D(int**, int, int, int);
int Analiz(int*, int, int);
int* Ins_pos(int*, int&, int);
int* Сommon(int**, int, int, int**, int, int, int**, int, int, int&);
int* Unique(int**, int, int, int**, int, int, int**, int, int, int&);
int* Сommon_AC(int**, int, int, int**, int, int, int&);
int* Negativ(int**, int, int, int**, int, int, int**, int, int, int&);
int main()
{
	setlocale(LC_ALL, "ru");
	srand(time(0));
	int row1, col1, row2, col2, row3, col3;
	cout << " Enter sizes of array A: ";
	cin >> row1 >> col1;
	int** A = Create(row1, col1);
	Rand(A, row1, col1);
	Print2D(A, row1, col1);
	cout << " Enter sizes of array B: ";
	cin >> row2 >> col2;
	int** B = Create(row2, col2);
	Rand(B, row2, col2);
	Print2D(B, row2, col2);
	cout << " Enter sizes of array C: ";
	cin >> row3 >> col3;
	int** C = Create(row3, col3);
	Rand(C, row3, col3);
	Print2D(C, row3, col3);

	int* Obshie;
	int size1;
	Obshie = Сommon(A, row1, col1, B, row2, col2, C, row3, col3, size1);
	cout << " Oбщие значения для A, B, C:\n";
	Print(Obshie, size1);

	int* Unicum;
	int size2;
	Unicum = Unique(A, row1, col1, B, row2, col2, C, row3, col3, size2);
	cout << " Уникальные значения для A, B, C:\n";
	Print(Unicum, size2);

	int* Obshie_AC;
	int size3;
	Obshie_AC = Сommon_AC(A, row1, col1, C, row3, col3, size3);
	cout << " Oбщие значения для A и C:\n";
	Print(Obshie_AC, size3);

	int* Negativs;
	int size4;
	Negativs = Negativ(A, row1, col1, B, row2, col2, C, row3, col3, size4);
	cout << " Oтрицательные значения для A, B, C:\n";
	Print(Negativs, size4);

	Delete(A, row1);
	Delete(B, row2);
	Delete(C, row3);
	free(Obshie);
	free(Unicum);
	free(Obshie_AC);
	free(Negativs);
}
int** Create(int row, int col)
{
	int** arr = (int**)malloc(row * sizeof(int*));
	for (int i = 0; i < row; i++)
	{
		arr[i] = (int*)malloc(col * sizeof(int));
	}
	return arr;
}
void Rand(int** arr, int row, int col)
{
	int a = -7;
	int b = 7;
	for (int i = 0; i < row; i++)
	{
		for (int j = 0; j < col; j++)
		{
			arr[i][j] = a + rand() % (b - a + 1);
		}
	}
}
void Delete(int** arr, int row)
{
	for (int i = 0; i < row; i++)
	{
		free(arr[i]);
	}
	free(arr);
}
void Print2D(int** arr, int row, int col)
{
	for (int i = 0; i < row; i++)
	{
		for (int j = 0; j < col; j++)
		{
			cout << arr[i][j] << "\t";
		}
		cout << "\n";
	}
	cout << "\n\n";
}
void Print(int* arr, int size)
{
	for (int i = 0; i < size; i++)
	{
		cout << arr[i] << "\t";
	}
	cout << "\n\n";
}
int Analiz2D(int** arr, int row, int col, int key)
{
	for (int i = 0; i < row; i++)
	{
		for (int j = 0; j < col; j++)
		{
			if (arr[i][j] == key)
				return 1;
		}
	}
	return 0;	
}
int Analiz(int* arr, int size, int key)
{
	for (int i = 0; i < size; i++)
	{
		if (arr[i] == key)
			return 1;
	}
	return 0;
}
int* Ins_pos(int* arr, int& size, int key)
{
	arr = (int*)realloc(arr, (size + 1) * sizeof(int));
	arr[size] = key;
	size++;
	return arr;
}
int* Сommon(int** A, int row1, int col1, int** B, int row2, int col2, int** C, int row3, int col3, int& size)
{
	size = 0;
	int* Obshie = nullptr;
	for (int i = 0; i < row1; i++)
	{
		for (int j = 0; j < col1; j++)
		{
			if (Analiz2D(B, row2, col2, A[i][j]) == 1 && Analiz2D(C, row3, col3, A[i][j]) == 1 && Analiz(Obshie, size, A[i][j]) == 0)
				Obshie = Ins_pos(Obshie, size, A[i][j]);
		}
	}
	return Obshie;
}
int* Unique(int** A, int row1, int col1, int** B, int row2, int col2, int** C, int row3, int col3, int& size)
{
	size = 0;
	int* Unicum = nullptr;
	for (int i = 0; i < row1; i++)
	{
		for (int j = 0; j < col1; j++)
		{
			if (Analiz2D(B, row2, col2, A[i][j]) == 0 && Analiz2D(C, row3, col3, A[i][j]) == 0 && Analiz(Unicum, size, A[i][j]) == 0)
				Unicum = Ins_pos(Unicum, size, A[i][j]);
		}
	}
	for (int i = 0; i < row2; i++)
	{
		for (int j = 0; j < col2; j++)
		{
			if (Analiz2D(A, row1, col1, B[i][j]) == 0 && Analiz2D(C, row3, col3, B[i][j]) == 0 && Analiz(Unicum, size, B[i][j]) == 0)
				Unicum = Ins_pos(Unicum, size, B[i][j]);
		}
	}
	for (int i = 0; i < row3; i++)
	{
		for (int j = 0; j < col3; j++)
		{
			if (Analiz2D(B, row2, col2, C[i][j]) == 0 && Analiz2D(A, row1, col1, C[i][j]) == 0 && Analiz(Unicum, size, C[i][j]) == 0)
				Unicum = Ins_pos(Unicum, size, C[i][j]);
		}
	}
	return Unicum;
}
int* Сommon_AC(int** A, int row1, int col1, int** C, int row3, int col3, int& size)
{
	size = 0;
	int* Obshie_AC = nullptr;
	for (int i = 0; i < row1; i++)
	{
		for (int j = 0; j < col1; j++)
		{
			if (Analiz2D(C, row3, col3, A[i][j]) == 1 && Analiz(Obshie_AC, size, A[i][j]) == 0)
				Obshie_AC = Ins_pos(Obshie_AC, size, A[i][j]);
		}
	}
	return Obshie_AC;
}
int* Negativ(int** A, int row1, int col1, int** B, int row2, int col2, int** C, int row3, int col3, int& size)
{
	size = 0;
	int* Negativs = nullptr;
	for (int i = 0; i < row1; i++)
	{
		for (int j = 0; j < col1; j++)
		{
			if (A[i][j] < 0 && Analiz(Negativs, size, A[i][j]) == 0)
				Negativs = Ins_pos(Negativs, size, A[i][j]);
		}
	}
	for (int i = 0; i < row2; i++)
	{
		for (int j = 0; j < col2; j++)
		{
			if (B[i][j] < 0 && Analiz(Negativs, size, B[i][j]) == 0)
				Negativs = Ins_pos(Negativs, size, B[i][j]);
		}
	}
	for (int i = 0; i < row3; i++)
	{
		for (int j = 0; j < col3; j++)
		{
			if (C[i][j] < 0 && Analiz(Negativs, size, C[i][j]) == 0)
				Negativs = Ins_pos(Negativs, size, C[i][j]);
		}
	}
	return Negativs;
}





Задание 1. Создайте структуру, описывающую комплексное
число. Реализуйте арифметические операции с комплексными числами: сумму, разность, умножение, деление.




#include <iostream>
using namespace std;
struct Complex
{
	float re;
	float im;
};
Complex Vvod();
Complex Add(Complex, Complex);
void Print(Complex);
Complex Sub(Complex, Complex);
Complex Mul(Complex, Complex);
Complex Dev(Complex, Complex);
int main()
{
	cout << "First complex:\n";
	Complex c1 = Vvod();
	cout << "Second complex:\n";
	Complex c2 = Vvod();

	cout << "\nSum complex:\n";
	Complex c3 = Add(c1, c2);
	Print(c1);
	cout << "\t+\t";
	Print(c2);
	cout << "\t=\t";
	Print(c3);

	cout << "\n\nSub complex:\n";
	c3 = Sub(c1, c2);
	Print(c1);
	cout << "\t-\t";
	Print(c2);
	cout << "\t=\t";
	Print(c3);

	cout << "\n\nMul complex:\n";
	c3 = Mul(c1, c2);
	Print(c1);
	cout << "\t*\t";
	Print(c2);
	cout << "\t=\t";
	Print(c3);

	cout << "\n\nDev complex:\n";
	c3 = Dev(c1, c2);
	Print(c1);
	cout << "\t/\t";
	Print(c2);
	cout << "\t=\t";
	Print(c3);
}
Complex Vvod()
{
	Complex tmp;
	cout << " Enter re: ";
	cin >> tmp.re;
	cout << " Enter im: ";
	cin >> tmp.im;
	return tmp;
}
void Print(Complex tmp)
{
	cout << tmp.re << " " << tmp.im << "i";
}
Complex Add(Complex c1, Complex c2)
{
	Complex c3;
	c3.re = c1.re + c2.re;
	c3.im = c1.im + c2.im;
	return c3;
}
Complex Sub(Complex c1, Complex c2)
{
	Complex c3;
	c3.re = c1.re - c2.re;
	c3.im = c1.im - c2.im;
	return c3;
}
Complex Mul(Complex c1, Complex c2)
{
	Complex c3;
	c3.re = c1.re * c2.re - c1.im * c2.im;
	c3.im = c1.im * c2.re + c1.re * c2.im;
	return c3;
}
Complex Dev(Complex c1, Complex c2)
{
	Complex c3;
	c3.re = (c1.re * c2.re + c1.im * c2.im) / (c2.re * c2.re + c2.im * c2.im);
	c3.im = (c1.im * c2.re - c1.re * c2.im) / (c2.re * c2.re + c2.im * c2.im);
	return c3;
}





Задание 2. Реализовать структуру «Автомобиль» (длина,
клиренс (высота посадки), объем двигателя, мощность
двигателя, диаметр колес, цвет, тип коробки передач).
Создайте функции для задания значений, отображения
значений, поиска значений.





#include <iostream>
#include <conio.h>
#include <iomanip>
using namespace std;
struct Auto
{
	float length;
	float clirens;
	float volume;
	float power;
	float diameter;
	char color[15];
	char type[15];
};
Auto Input();
Auto* Add(Auto*, int&);
void Show(Auto);
void Print(Auto*, int);
void Header();
void Find_type(Auto*, int, char*);
void Find_volume(Auto*, int, float);
void Find_power(Auto*, int, float);
int main()
{
	setlocale(LC_ALL, "ru");
	Auto* baza = nullptr;
	int size = 0;
	char ch;
	char str[15];
	do
	{
		system("cls");
		cout << "MЕНЮ.\n";
		cout << "1 - Добавление авто в базу данных.\n";
		cout << "2 - Вывод базы данных на экран.\n";
		cout << "3 - Поиск по типу коробки передач.\n";
		cout << "4 - Поиск по объему двигателя.\n";
		cout << "5 - Поиск по мощности двигателя.\n";
		cout << "0 - Выход.\n";
		cout << "Ваш выбор: ";
		ch = _getch();
		switch (ch)
		{
		case '1': system("cls");
			baza = Add(baza, size);
			cout << " Авто успешно добавлено.\n";
			system("pause");
			break;
		case '2': system("cls");
			Header();
			Print(baza, size);
			system("pause");
			break;
		case '3': system("cls");
			cout << " Enter type of transmission: ";
			gets_s(str);
			Find_type(baza, size, str);
			system("pause");
			break;
		case '4': system("cls");
			float vol;
			cout << " Enter volume of motor: ";
			cin >> vol;
			Find_volume(baza, size, vol);
			system("pause");
			break;
		case '5': system("cls");
			float pow;
			cout << " Enter power of motor: ";;
			cin >> pow;
			Find_power(baza, size, pow);
			system("pause");
			break;
		}
	} while (ch != '0');
	free(baza);
}
Auto Input()
{
	Auto tmp;
	cout << " Enter lenfth of auto: ";
	cin >> (tmp.length);
	cout << " Enter clirens of auto: ";
	cin >> (tmp.clirens);
	cout << " Enter volume of motor: ";
	cin >> (tmp.volume);
	cout << " Enter power of motor: ";
	cin >> (tmp.power);
	cout << " Enter diameter of wheel: ";
	cin >> (tmp.diameter);
	cin.ignore();
	cout << " Enter color of auto: ";
	gets_s(tmp.color);
	cout << " Enter type of transmission: ";
	gets_s(tmp.type);
	return tmp;
}
Auto* Add(Auto* baza, int& size)
{
	baza = (Auto*)realloc(baza, (size + 1) * sizeof(Auto));
	baza[size] = Input();
	size++;
	return baza;
}
void Show(Auto tmp)
{
	cout << left << setw(10) << tmp.length << setw(10) << tmp.clirens << setw(10) << tmp.volume << setw(10)
		<< tmp.power << setw(10)<< tmp.diameter << setw(14) << tmp.color << setw(14) << tmp.type << "\n";
}
void Print(Auto* baza, int size)
{
	for (int i = 0; i < size; i++)
	{
		Show(baza[i]);
	}
	cout << "\n";
}
void Header()
{
	cout << left << setw(10) << "length" << setw(10) << "clirens" << setw(10) << "volume" << setw(10)
		<< "power" << setw(10) << "diameter" << setw(14) << "color" << setw(14) << "type" << "\n";
}
void Find_type(Auto* baza, int size, char* str)
{
	bool f = 0;
	bool h = 0;
	for (int i = 0; i < size; i++)
	{
		if (_stricmp(baza[i].type, str) == 0)
		{
			if (h == 0)
			{
				Header();
				h = 1;
			}	
			Show(baza[i]);
			f = 1;
		}			
	}
	if (f == 0)
		cout << " not found\n";
}
void Find_volume(Auto* baza, int size, float vol)
{
	bool f = 0;
	bool h = 0;
	for (int i = 0; i < size; i++)
	{
		if (baza[i].volume == vol)
		{
			if (h == 0)
			{
				Header();
				h = 1;
			}
			Show(baza[i]);
			f = 1;
		}
	}
	if (f == 0)
		cout << " not found\n";
}
void Find_power(Auto* baza, int size, float pow)
{
	bool f = 0;
	bool h = 0;
	for (int i = 0; i < size; i++)
	{
		if (baza[i].power == pow)
		{
			if (h == 0)
			{
				Header();
				h = 1;
			}
			Show(baza[i]);
			f = 1;
		}
	}
	if (f == 0)
		cout << " not found\n";
}






Задание 1. Напишите функцию для обращения одномерного массива в двумерный. Должны выполняться
соответствующие проверки.


#include <iostream>
#include <time.h>
using namespace std;
int* Create(int);
void Rand(int*, int);
void Print(int*, int);
int** Create2D(int, int&, int);
void Fill(int*, int**, int, int, int);
void Print(int**, int, int, int);
void Delete(int**, int);
int main()
{
	srand(time(0));
	int size;
	cout << " Enter size array -> ";
	cin >> size;
	int* arr = Create(size);
	Rand(arr, size);
	Print(arr, size);

	int col;
	cout << "\n How many columns should be in a 2D array -> ";
	cin >> col;
	int row = 0;
	int** arr2D = Create2D(size, row, col);
	Fill(arr, arr2D, size, row, col);
	Print(arr2D, size, row, col);
	free(arr);
	Delete(arr2D, row);
}
int* Create(int size)
{
	int* arr = (int*)malloc(size * sizeof(int));
	return arr;
}
void Rand(int* arr, int size)
{
	for (int i = 0; i < size; i++)
	{
		arr[i] = rand() % 13;
	}
}
void Print(int* arr, int size)
{
	for (int i = 0; i < size; i++)
	{
		cout << arr[i] << "\t";
	}
	cout << "\n";
}
int** Create2D(int size, int& row, int col)
{
	if (size % col == 0)
		row = size / col;
	else
		row = size / col + 1;
	int** arr2D = (int**)malloc(row * sizeof(int*));
	for (int i = 0; i < row; i++)
	{
		arr2D[i] = (int*)malloc(col * sizeof(int));
	}
	if (size % col != 0)
		arr2D[row - 1] = (int*)realloc(arr2D[row - 1], (size % col) * sizeof(int));
	return arr2D;
}
void Fill(int* arr, int** arr2D, int size, int row, int col)
{
	int kol = 0;
	for (int i = 0; i < row; i++)
	{
		if (i == row - 1 && size % col != 0)
			col = size % col;
		for (int j = 0; j < col; j++)
		{
			arr2D[i][j] = arr[kol];
			kol++;
		}
	}
}
void Print(int** arr2D, int size, int row, int col)
{
	for (int i = 0; i < row; i++)
	{
		if (i == row - 1 && size % col != 0)
			col = size % col;
		for (int j = 0; j < col; j++)
		{
			cout << arr2D[i][j] << "\t";
		}
		cout << "\n";
	}
	cout << "\n";
}
void Delete(int** arr, int row)
{
	for (int i = 0; i < row; i++)
	{
		free(arr[i]);
	}
	free(arr);
}






Задание 2. Написать программу, которая дает пользователю ввести 5 фамилий студентов, а затем находит 
среди них самую длинную фамилию.





#include <iostream>
using namespace std;
char* Gets(char*&);
char** Create();
char** Add(char**, int&);
void isLongest(char**, int);
void Delete(char**, int);
int main()
{
	setlocale(LC_ALL, "ru");
	int amount = 5;
	int n = 0;
	char** arr = Create();
	cout << " Enter " << amount << " surnames:\n";
	for (int i = 0; i < amount; i++)
	{
		arr = Add(arr, n);
	}
	cout << "\n\n";
	isLongest(arr, n);
	Delete(arr, n);
}
char* Gets(char*& str)
{
	str = nullptr;
	int n = 0;
	char ch;
	while ((ch = getchar()) != '\n')
	{
		str = (char*)realloc(str, n + 1);
		str[n] = ch;
		n++;
	}
	str = (char*)realloc(str, n + 1);
	str[n] = 0;
	return str;
}
char** Create()
{
	char** arr = (char**)malloc(sizeof(char*));
	arr[0] = nullptr;
	return arr;
}
char** Add(char** arr, int& n)
{
	arr = (char**)realloc(arr, (n + 1) * sizeof(char*));
	cout << " Enter surname: ";
	Gets(arr[n]);
	n++;
	return arr;
}
void isLongest(char** arr, int n)
{
	char* max = arr[0];
	for (int i = 1; i < n; i++)
	{
		if (strlen(arr[i]) > strlen(max))
			max = arr[i];		
	}
	cout << " Фамилия "<< max <<" - самая длинная, ее длина "<< strlen(max) << " символов!\n";
}
void Delete(char** arr, int n)
{
	for (int i = 0; i < n; i++)
	{
		free(arr[i]);
	}
	free(arr);
}






Задание 1. Создать структуру, описывающую прямоугольник. Написать функции для работы с этой структурой: 
перемещение прямоугольника, изменение размера прямоугольника, печать прямоугольника.




#include <iostream>
#include <conio.h>
#include <iomanip>
using namespace std;
struct rectangle
{
	int height;
	int width;
	char simb = '*';
};
char** Create(int, int);
void Fill(char**, int, int, char);
void Print(char**, int, int);
void Delete(char**, int);
void Print_move(char**, int, int, int, int);
int main()
{
	setlocale(LC_ALL, "ru");
	rectangle figure;
	cout << " Enter height of rectangle: ";
	cin >> figure.height;
	cout << " Enter width of rectangle: ";
	cin >> figure.width;
	char** arr = Create(figure.height, figure.width);
	Fill(arr, figure.height, figure.width, figure.simb);
	Print(arr, figure.height, figure.width);

	char ch;
	int right = 0, bottom = 0;
	do
	{
		cout << "\nMЕНЮ.\n";
		cout << "1 - Перемещение прямоугольника.\n";
		cout << "2 - Изменение размера прямоугольника.\n";
		cout << "3 - Печать прямоугольника.\n";
		cout << "0 - Выход.\n";
		cout << "Ваш выбор: ";
		ch = _getch();
		switch (ch)
		{
		case '1': system("cls");
			cout << " На какое кол-во символов переместить вправо, относительно начальной позиции? ";
			cin >> right;
			right++;
			cout << " На какое кол-во символов переместить вниз, относительно начальной позиции? ";
			cin >> bottom;
			cout << " Объект перемещен.\n";
			system("pause");
			break;
		case '2': system("cls");
			Delete(arr, figure.height);
			cout << " Enter height of rectangle: ";
			cin >> figure.height;
			cout << " Enter width of rectangle: ";
			cin >> figure.width;
			arr = Create(figure.height, figure.width);
			Fill(arr, figure.height, figure.width, figure.simb);
			cout << " Размер измненен.\n";
			system("pause");
			break;
		case '3': system("cls");
			if (right == 0 && bottom == 0)
				Print(arr, figure.height, figure.width);
			else
				Print_move(arr, figure.height, figure.width, right, bottom);
			system("pause");
			break;
		}
	} while (ch != '0');
	Delete(arr, figure.height);
}
char** Create(int row, int col)
{
	char** arr = (char**)malloc(row * sizeof(char*));
	for (int i = 0; i < row; i++)
	{
		arr[i] = (char*)malloc(col * sizeof(char));
	}
	return arr;
}
void Fill(char** arr, int row, int col, char simb)
{
	for (int i = 0; i < row; i++)
	{
		for (int j = 0; j < col; j++)
		{
			arr[i][j] = simb;
		}
	}
}
void Print(char** arr, int row, int col)
{
	for (int i = 0; i < row; i++)
	{
		for (int j = 0; j < col; j++)
		{
			cout << arr[i][j];
		}
		cout << "\n";
	}
	cout << "\n";
}
void Delete(char** arr, int row)
{
	for (int i = 0; i < row; i++)
	{
		free(arr[i]);
	}
	free(arr);
}
void Print_move(char** arr, int row, int col, int right, int bottom)
{
	for (int i = 0; i < bottom; i++)
	{
		cout << "\n";
	}
	for (int i = 0; i < row; i++)
	{
		cout << setw(right);
		for (int j = 0; j < col; j++)
		{
			cout << arr[i][j];
		}
		cout << "\n";
	}
	cout << "\n";
}





Задание 2. Создайте структуру, описывающую точку
в двумерной системе координат (x, y). С помощью этой
структуры задайте две точки. Напишите функцию, которая вычисляет расстояние между этими двумя точками?



#include <iostream>
using namespace std;
struct Distance
{
	int A1;
	int A2;
	int B1;
	int B2;
};
Distance Vvod();
float Calc(Distance);
void main()
{
	setlocale(LC_ALL, "ru");
	Distance points = Vvod();
	float res = Calc(points);
	cout << " Расстояние между двумя точками: " << res << "\n";
}
Distance Vvod()
{
	Distance tmp;
	cout << " Введите первую координату точки А: ";
	cin >> tmp.A1;
	cout << " Введите вторую координату точки А: ";
	cin >> tmp.A2;
	cout << " Введите первую координату точки В: ";
	cin >> tmp.B1;
	cout << " Введите вторую координату точки В: ";
	cin >> tmp.B2;
	return tmp;
}
float Calc(Distance points)
{
	return sqrt(pow(points.A1 - points.B1, 2) + pow(points.A2 - points.B2, 2));
}




Задание 3. Создайте структуру, описывающую простую
дробь. Реализуйте арифметические операции с дробями:
сумму, разность, умножение, деление.
Учесть возможность сокращения дробей и перевод
из неправильной дроби в простую.





#include<iostream>
using namespace std;
struct Drob
{
	int chisl;
	int znam;
	int cel;
};
Drob Vvod();
void Print(Drob);
void Prav(Drob&);
void Neprav(Drob&);
int Nod(int, int);
void Sokr(Drob&);
Drob Add(Drob, Drob);
Drob sub(Drob, Drob);
Drob mul(Drob, Drob);
Drob div(Drob, Drob);
void main()
{
	setlocale(LC_ALL, "ru");
	Drob a = Vvod();
	Drob b = Vvod();
	Drob c = Add(a, b);
	Print(a);
	cout << " + ";
	Print(b);
	cout << " = ";
	Print(c);
	cout << "\n";
	c = sub(a, b);
	Print(a);
	cout << " - ";
	Print(b);
	cout << " = ";
	Print(c);
	cout << "\n";
	c = mul(a, b);
	Print(a);
	cout << " * ";
	Print(b);
	cout << " = ";
	Print(c);
	cout << "\n";
	c = div(a, b);
	Print(a);
	cout << " / ";
	Print(b);
	cout << " = ";
	Print(c);
	cout << "\n";
}
Drob Vvod()
{
	Drob tmp;
	cout << " Введите целую часть: ";
	cin >> tmp.cel;
	cout << " Введите числитель: ";
	cin >> tmp.chisl;
	cout << " Введите знаменатель: ";
	cin >> tmp.znam;
	cout << "\n";
	return tmp;
}
void Print(Drob a)
{
	cout << "{" << a.cel << " " << a.chisl << "/" << a.znam << "}";
}
void Prav(Drob& tmp)
{
	if (tmp.chisl < 0 && tmp.znam < 0 || tmp.chisl >= 0 && tmp.znam < 0)
	{
		tmp.chisl = -tmp.chisl;
		tmp.znam = -tmp.znam;
	}
	tmp.cel = tmp.chisl / tmp.znam;
	if (tmp.cel != 0)
		tmp.chisl = abs(tmp.chisl) % tmp.znam;
	else
		tmp.chisl = tmp.chisl % tmp.znam;
}
void Neprav(Drob& tmp)
{
	if (tmp.cel >= 0)
		tmp.chisl = tmp.chisl + tmp.cel * tmp.znam;
	else
		tmp.chisl = tmp.cel * tmp.znam - tmp.chisl;
	tmp.cel = 0;
}
int Nod(int a, int b)
{
	while (a != b)
	{
		if (a > b)
			a = a - b;
		else
			b = b - a;
	}
	return a;
}
void Sokr(Drob& tmp)
{
	int c = Nod(abs(tmp.chisl), abs(tmp.znam));
	tmp.chisl = tmp.chisl / c;
	tmp.znam = tmp.znam / c;
}
Drob Add(Drob a, Drob b)
{
	Neprav(a);
	Neprav(b);
	Drob tmp;
	tmp.cel = 0;
	tmp.chisl = a.chisl * b.znam + b.chisl * a.znam;
	tmp.znam = a.znam * b.znam;
	Sokr(tmp);
	Prav(tmp);
	return tmp;
}
Drob sub(Drob a, Drob b)
{
	Neprav(a);
	Neprav(b);
	Drob tmp;
	tmp.cel = 0;
	tmp.chisl = a.chisl * b.znam - b.chisl * a.znam;
	tmp.znam = a.znam * b.znam;
	Sokr(tmp);
	Prav(tmp);
	return tmp;
}
Drob mul(Drob a, Drob b)
{
	Neprav(a);
	Neprav(b);
	Drob tmp;
	tmp.cel = 0;
	tmp.chisl = a.chisl * b.chisl;
	tmp.znam = a.znam * b.znam;
	Sokr(tmp);
	Prav(tmp);
	return tmp;
}
Drob div(Drob a, Drob b)
{
	Neprav(a);
	Neprav(b);
	Drob tmp;
	tmp.cel = 0;
	tmp.chisl = a.chisl * b.znam;
	tmp.znam = a.znam * b.chisl;
	Sokr(tmp);
	Prav(tmp);
	return tmp;
}




Задание 1. Разработайте программу «Библиотека». Создайте структуру «Книга» (название, автор, издательство,
жанр). Создайте массив из 10 книг. Реализуйте для него
следующие возможности:
■ Редактировать книгу;
■ Печать всех книг;
■ Поиск книг по автору;
■ Поиск книги по названию;
■ Сортировка массива по названию книг;
■ Сортировка массива по автору;
■ Сортировка массива по издательству.





#include <iostream>
#include <conio.h>
#include <iomanip>
using namespace std;
struct Book
{
	char Name[25];
	char Author[25];
	int Isdat;
	char Janr[15];
};
Book Input();
Book* Add(Book*, int&);
void Show(Book);
void Print(Book*, int);
void Header();
Book* Edit(Book*, int, char*);
void Search_Author(Book*, int, char*);
void Search_Name(Book*, int, char*);
Book* Sort_Name(Book*, int);
Book* Sort_Author(Book*, int);
Book* Sort_Year(Book*, int);
int main()
{
	setlocale(LC_ALL, "ru");
	Book* Lib = nullptr;
	int size = 0;
	char ch;
	char str[25];
	do
	{
		system("cls");
		cout << "MЕНЮ.\n";
		cout << "1 - Добавление книги в базу данных.\n";
		cout << "2 - Вывод базы книг на экран.\n";
		cout << "3 - Редактирование книги.\n";
		cout << "4 - Поиск по автору.\n";
		cout << "5 - Поиск по названию.\n";
		cout << "6 - Отсортировать по названию.\n";
		cout << "7 - Отсортировать по автору.\n";
		cout << "8 - Отсортировать по году издания.\n";
		cout << "0 - Выход.\n";
		cout << "Ваш выбор: ";
		ch = _getch();
		switch (ch)
		{
		case '1': system("cls");
			Lib = Add(Lib, size);
			cout << " Книга успешно добавлена.\n";
			system("pause");
			break;
		case '2': system("cls");
			if (size > 0)
			{
				Header();
				Print(Lib, size);
			}
			else
				cout << " В базе нет книг.\n";
			system("pause");
			break;
		case '3': system("cls");
			cout << " Введите название книги для редактирования: ";
			gets_s(str);
			Lib = Edit(Lib, size, str);
			system("pause");
			break;
		case '4': system("cls");
			cout << " Введите автора для поиска: ";
			gets_s(str);
			Search_Author(Lib, size, str);
			system("pause");
			break;
		case '5': system("cls");
			cout << " Введите название книги для поиска: ";
			gets_s(str);
			Search_Name(Lib, size, str);
			system("pause");
			break;
		case '6': system("cls");
			Lib = Sort_Name(Lib, size);
			cout << "Сортирока произошла.\n";
			system("pause");
			break;
		case '7': system("cls");
			Lib = Sort_Author(Lib, size);
			cout << "Сортирока произошла.\n";
			system("pause");
			break;
		case '8': system("cls");
			Lib = Sort_Year(Lib, size);
			cout << "Сортирока произошла.\n";
			system("pause");
			break;
		}
	} while (ch != '0');
	free(Lib);
}
Book Input()
{
	Book tmp;
	cout << " Введите название книги: ";
	gets_s(tmp.Name);
	cout << " Введите автора книги: ";
	gets_s(tmp.Author);
	cout << " Введите год издания книги: ";
	cin >> tmp.Isdat;
	cin.ignore();
	cout << " Введите жанр книги: ";
	gets_s(tmp.Janr);
	return tmp;
}
Book* Add(Book* Lib, int& size)
{
	Lib = (Book*)realloc(Lib, (size + 1) * sizeof(Book));
	Lib[size] = Input();
	size++;
	return Lib;
}
void Header()
{
	cout << left << setw(24) << "Название" << setw(24) << "Автор" << setw(10) << "Год" << setw(14) << "Жанр" << "\n";
	int length = 24 + 24 + 10 + 14;
	for (int i = 0; i < length; i++)
	{
		cout << "-";
	}
	cout << "\n";
}
void Show(Book tmp)
{
	cout << left << setw(24) << tmp.Name << setw(24) << tmp.Author << setw(10) << tmp.Isdat << setw(14) << tmp.Janr << "\n";
}
void Print(Book* Lib, int size)
{
	for (int i = 0; i < size; i++)
	{
		Show(Lib[i]);
	}
}
Book* Edit(Book* Lib, int size, char* str)
{
	bool f = 0;
	for (int i = 0; i < size; i++)
	{
		if (_stricmp(Lib[i].Name, str) == 0)
		{
			cout << " Редактирование:\n";
			Lib[i] = Input();
			cout << " Книга успешно отредактированна.\n";
			f = 1;
		}			
	}
	if(f == 0)
		cout << " Книги с таким названием нет в базе.\n";
	return Lib;
}
void Search_Author(Book* Lib, int size, char* str)
{
	bool f = 0;
	bool h = 0;
	for (int i = 0; i < size; i++)
	{
		if (_stricmp(Lib[i].Author, str) == 0)
		{
			if (h == 0)
			{
				Header();
				h = 1;
			}				
			Show(Lib[i]);
			f = 1;
		}
	}
	if (f == 0)
		cout << " Книги такого автора нет в базе.\n";
}
void Search_Name(Book* Lib, int size, char* str)
{
	bool f = 0;
	bool h = 0;
	for (int i = 0; i < size; i++)
	{
		if (_stricmp(Lib[i].Name, str) == 0)
		{
			if (h == 0)
			{
				Header();
				h = 1;
			}
			Show(Lib[i]);
			f = 1;
		}
	}
	if (f == 0)
		cout << " Книги с таким названием нет в базе.\n";
}
Book* Sort_Name(Book* Lib, int size)
{
	for (int i = 0; i < size; i++)
	{
		for (int j = size-1; j > i ; j--)
		{
			if (_stricmp(Lib[j].Name, Lib[j - 1].Name) < 0)
			{
				Book tmp = Lib[j];
				Lib[j] = Lib[j - 1];
				Lib[j - 1] = tmp;
			}
		}
	}
	return Lib;
}
Book* Sort_Author(Book* Lib, int size)
{
	for (int i = 0; i < size; i++)
	{
		for (int j = size - 1; j > i; j--)
		{
			if (_stricmp(Lib[j].Author, Lib[j - 1].Author) < 0)
			{
				Book tmp = Lib[j];
				Lib[j] = Lib[j - 1];
				Lib[j - 1] = tmp;
			}
		}
	}
	return Lib;
}
Book* Sort_Year(Book* Lib, int size)
{
	for (int i = 0; i < size; i++)
	{
		for (int j = size - 1; j > i; j--)
		{
			if (Lib[j].Isdat > Lib[j-1].Isdat)
			{
				Book tmp = Lib[j];
				Lib[j] = Lib[j - 1];
				Lib[j - 1] = tmp;
			}
		}
	}
	return Lib;
}







Задание 1. Реализовать структуру «Машина» (цвет, модель,
номер). Номер машины может представлять из себя или
пятизначный номер или слово до 8 символов.
Рекомендации: номер реализовать как объединение.
Создать экземпляр структуры «Машина» и реализовать для него следующие функции:
■ Заполнение машины;
■ Печать машины.
Создать массив из 10 экземпляров структуры «Машина» и реализовать для него следующие функции:
■ Редактировать машину;
■ Печать всех машин;
■ Поиск машины по номеру.









#include <iostream>
#include <conio.h>
#include <iomanip>
using namespace std;
union Number
{
	int NumInt;
	char NumChar[9];
};
struct Car
{
	char Color[15];
	char Model[15];
	Number Num;
	int ID;
};
Car Input();
Car* Add(Car*, int&);
void Print(Car*, int);
void Header();
void ShowStruct(Car);
void Search(Car*, int, bool);
Car Edit(Car);
int main()
{
	int length = 0;
	Car* arr = nullptr;
	bool canEdit = 0;
	char ch;
	do
	{
		system("cls");
		cout << " Menu\n"
			" 1 - Add new car\n"
			" 2 - Print all cars\n"
			" 3 - Search for a car by number\n"
			" 4 - Edit car\n"
			" 0 - Exit\n"
			" Your choice: ";
		ch = _getch();
		switch (ch)
		{
		case '1': system("cls");
			arr = Add(arr, length);
			cout << " Auto is added.\n";
			system("pause");
			break;
		case '2': system("cls");
			if (length > 0)
			{
				Header();
				Print(arr, length);
			}
			else
				cout << " There are no cars.\n";
			system("pause");
			break;
		case '3': system("cls");
			Search(arr, length, canEdit);
			system("pause");
			break;
		case '4': system("cls");
			canEdit = 1;
			Search(arr, length, canEdit);
			canEdit = 0;
			system("pause");
			break;
		}
	} while (ch != '0');
	free(arr);
}
Car Input()
{
	Car tmp;
	cout << " Enter color of car: ";
	gets_s(tmp.Color);
	cout << " Enter model of car: ";
	gets_s(tmp.Model);
	int choice;
	cout << " What number would you like to add?\n"
		" 1 - with digits; 2 - with letters; -> ";
	choice = _getch();
	if (choice == 1)
	{
		cout << "\n Enter number: ";
		cin >> tmp.Num.NumInt;
		cin.ignore();
		tmp.ID = 1;
	}
	else
	{
		cout << "\n Enter number: ";
		gets_s(tmp.Num.NumChar);
		tmp.ID = 2;
	}
	return tmp;
}
Car* Add(Car* arr, int& length)
{
	arr = (Car*)realloc(arr, (length + 1) * sizeof(Car));
	arr[length] = Input();
	length++;
	return arr;
}
void Header()
{
	cout << left << setw(14) << "Color" << setw(14) << "Model" << setw(8) << "Number" << "\n";
	for (int i = 0; i < 14+14+8; i++)
	{
		cout << "-";
	}
	cout << "\n";
}
void ShowStruct(Car tmp)
{
	if (tmp.ID == 1)
		cout << left << setw(14) << tmp.Color << setw(14) << tmp.Model << setw(8) << tmp.Num.NumInt << "\n";
	else
		cout << left << setw(14) << tmp.Color << setw(14) << tmp.Model << setw(8) << tmp.Num.NumChar << "\n";
}
void Print(Car* arr, int length)
{
	for (int i = 0; i < length; i++)
	{
		ShowStruct(arr[i]);
	}
}
Car Edit(Car New)
{
	cout << "\n\n Editing:\n";
	New = Input();
	cout << "\n Car is edited.\n";
	return New;
}
void Search(Car* arr, int length, bool canEdit)
{
	bool f = 0;
	int choice;
	cout<< " What is number of auto?\n"
		" 1 - digits; 2 - letters; -> ";
	choice = _getch();
	if (choice == 1)
	{
		int findInt;
		cout << "\n Enter number: ";
		cin >> findInt;
		for (int i = 0; i < length; i++)
		{
			if (arr[i].Num.NumInt == findInt)
			{
				f = 1;
				Header();
				ShowStruct(arr[i]);
				if (canEdit == 1)
					arr[i] = Edit(arr[i]);
			}			
		}
	}
	else
	{
		char str[9];
		cout << "\n Enter number: ";
		gets_s(str);
		for (int i = 0; i < length; i++)
		{
			if (_stricmp(arr[i].Num.NumChar, str) == 0)
			{
				f = 1;
				Header();
				ShowStruct(arr[i]);
				if (canEdit == 1)
					arr[i] = Edit(arr[i]);
			}
		}
	}
	if (f == 0)
		cout << " Car is not found.\n";
}








Задание 2. Разработать структуру «Живая сущность»
(скорость передвижения, тип (птица, скот, человек), цвет,
характеристика (для птицы — скорость полета, вещественное число, для скота — парнокопытное, логическая
переменная, для человека — уровень IQ, целая переменная).
Рекомендации: характеристику реализовать как объединение, тип реализовать как перечислимый тип данных.
Создать экземпляр структуры «Живая сущность»
и реализовать для него следующие функции:
■ Ввод информации;
■ Печать информации.
Создать массив из 10 экземпляров структуры «Живая
сущность» и реализовать для него следующие функции:
■ Редактировать данные;
■ Печать всего списка;
■ Поиск по характеристике.








#include <iostream>
#include <conio.h>
#include <iomanip>
using namespace std;
union Haract
{
	float Speed;
	bool kop;
	int IQ;
};
enum Type { Ptica = 1, Skot, Human };
struct Alive
{
	char Name[15];
	Type T;
	char Color[15];
	Haract H;
	int Id; //для редактирования нужно уникальное поле
};
Alive Input();
Alive* Add(Alive*, int&);
void Header();
void ShowStruct(Alive);
void Print(Alive*, int);
void Search_Har(Alive*, int);
Alive Edit(Alive);
void Search_Id(Alive*, int);
int main()
{
	Alive* arr = nullptr;
	int length = 0;
	char ch;
	do
	{
		system("cls");
		cout << " Menu\n"
			" 1 - Add new sushnost\n"
			" 2 - Print all sushnosti\n"
			" 3 - Search for haracter\n"
			" 4 - Edit\n"
			" 0 - Exit\n"
			" Your choice: ";
		ch = _getch();
		switch (ch)
		{
		case '1': system("cls");
			arr = Add(arr, length);
			cout << " Sushnost is added.\n";
			system("pause");
			break;
		case '2': system("cls");
			if (length > 0)
			{
				Header();
				Print(arr, length);
			}
			else
				cout << " There is nothing.\n";
			system("pause");
			break;
		case '3': system("cls");
			Search_Har(arr, length);
			system("pause");
			break;
		case '4': system("cls");
			Search_Id(arr, length);
			system("pause");
			break;
		}
	} while (ch != '0');
	free(arr);
}
Alive Input()
{
	Alive tmp;
	int choice;
	cout << " 1 - Ptica; 2 - Skot; 3 - Human;\n"
		" Choice sushnost: ";
	choice = _getch();
	cout << "\n Enter name: ";
	gets_s(tmp.Name);
	cout << " Enter color: ";
	gets_s(tmp.Color);
	cout << " Enter unique Id: ";
	cin >> tmp.Id;
	switch (choice)
	{
	case '1': tmp.T = Ptica;
		cout << " Enter speed: ";
		cin>>tmp.H.Speed;
		cin.ignore();
		break;
	case '2': tmp.T = Skot;
		cout << " 1 - parnokopitnoe; 0 - neparnokopitnoe;\n"
		" Your choice: ";
		cin >> tmp.H.kop;
		cin.ignore();
		break;
	case '3': tmp.T = Human;
		cout << " Enter IQ: ";
		cin >> tmp.H.IQ;
		cin.ignore();
		break;
	}
	return tmp;
}
Alive* Add(Alive* arr, int& length)
{
	arr = (Alive*)realloc(arr, (length + 1) * sizeof(Alive));
	arr[length] = Input();
	length++;
	return arr;
}
void Header()
{
	cout << left << setw(14) << "Name" << setw(14) << "Id" << setw(14) << "Color" << setw(14) << "Type" << setw(16) << "Haracter" << "\n";
	for (int i = 0; i < 14*4+16; i++)
	{
		cout << "-";
	}
	cout << "\n";
}
void ShowStruct(Alive tmp)
{
	cout << left << setw(14) << tmp.Name << setw(14) << tmp.Id << setw(14) << tmp.Color;
	if (tmp.T == Ptica)
		cout << setw(14) << "Ptica" << "speed: " << tmp.H.Speed;
	else if (tmp.T == Skot)
	{
		cout << setw(14) << "Skot";
		(tmp.H.kop == 1) ? cout << "parnokopitnoe" : cout << "neparnokopitnoe";
	}	
	else if (tmp.T == Human)
		cout << setw(14) << "Human" << "IQ: " << tmp.H.IQ;
	cout << "\n";
}
void Print(Alive* arr, int length)
{
	for (int i = 0; i < length; i++)
	{
		ShowStruct(arr[i]);
	}
	cout << "\n";
}
void Search_Har(Alive* arr, int length)
{
	bool f = 0;
	float s;
	bool k;
	int I;
	int choice;
	cout << " 1 - Ptica; 2 - Skot; 3 - Human;\n"
		" Choice sushnost: ";
	choice = _getch();
	switch (choice)
	{
	case '1': cout << "\n Enter speed: ";
		cin >> s;
		cin.ignore();
		for (int i = 0; i < length; i++)
		{
			if (arr[i].H.Speed == s && arr[i].T == Ptica)
			{				
				ShowStruct(arr[i]);
				f = 1;				
			}	
		}		
		break;
	case '2': cout << "\n Enter haracter kopit:\n"
		" 1 - parnokopitnoe; 0 - neparnokopitnoe;\n"
		" Your choice: ";
		cin >> k;
		cin.ignore();
		for (int i = 0; i < length; i++)
		{
			if (arr[i].H.kop == k && arr[i].T == Skot)
			{
				ShowStruct(arr[i]);
				f = 1;
			}
		}	
		break;
	case '3': cout << "\n Enter IQ: ";
		cin >> I;
		cin.ignore();
		for (int i = 0; i < length; i++)
		{
			if (arr[i].H.IQ == I && arr[i].T == Human)
			{
				ShowStruct(arr[i]);
				f = 1;
			}
		}
		
		break;
	}
	if(f == 0)
		cout << " Sushnost is not found.\n";
}
Alive Edit(Alive New)
{
	cout << "\n\n Editing:\n";
	New = Input();
	cout << "\n Sushnost is edited.\n";
	return New;
}
void Search_Id(Alive* arr, int length)
{
	bool f = 0;
	int key;
	cout << " Enter Id: ";
	cin >> key;
	cin.ignore();
	for (int i = 0; i < length; i++)
	{
		if (arr[i].Id == key)
		{
			Header();
			ShowStruct(arr[i]);
			arr[i] = Edit(arr[i]);
			f = 1;
		}
	}
	if(f == 0)
		cout << " Not found.\n";
}




Задание 1. Реализовать структуру «Стиральная машинка»
(фирма, цвет, ширина, длина, высота, мощность, скорость
отжима, температура нагрева). Создайте экземпляр структуры и проиллюстрируйте работу с ним.



#include <iostream>
#include <iomanip>
using namespace std;
struct Washer
{
	char Brand[15];
	char Color[15];
	float Width;
	float Length;
	float Height;
	float Power;
	float Speed;
	float Temperature;
};
Washer Input();
void Show(Washer);
int main()
{
	Washer machine = Input();
	cout << "\n\n";
	Show(machine);
}
Washer Input()
{
	Washer tmp;
	cout << " Enter brand of washer: ";
	gets_s(tmp.Brand);
	cout << " Enter color of washer: ";
	gets_s(tmp.Color);
	cout << " Enter width of washer: ";
	cin >> tmp.Width;
	cout << " Enter length of washer: ";
	cin >> tmp.Length;
	cout << " Enter height of washer: ";
	cin >> tmp.Height;
	cout << " Enter power of washer: ";
	cin >> tmp.Power;
	cout << " Enter speed of otjim of washer: ";
	cin >> tmp.Speed;
	cout << " Enter max temperature of water of washer: ";
	cin >> tmp.Temperature;
	return tmp;
}
void Show(Washer tmp)
{
	cout << left << setw(14) << tmp.Brand << setw(14) << tmp.Color << "\t" << tmp.Width << "\t" << tmp.Length << "\t"
		<< tmp.Height << "\t" << tmp.Power << "\t" << tmp.Speed << "\t" << tmp.Temperature << "\n";
}






Задание 2. Реализовать структуру «Утюг» (фирма, модель,
цвет, минимальная температура, максимальная температура, подача пара да/нет, мощность). Создайте экземпляр
структуры и проиллюстрируйте работу с ним.






#include <iostream>
#include <iomanip>
using namespace std;
struct Iron
{
	char Brand[15];
	char Model[10];
	char Color[15];
	float Min_Temperature;
	float Max_Temperature;
	char Vapor[4];
	float Power;
};
Iron Input();
void Show(Iron);
int main()
{
	Iron Utug = Input();
	cout << "\n\n";
	Show(Utug);
}
Iron Input()
{
	Iron tmp;
	cout << " Enter brand of iron: ";
	gets_s(tmp.Brand);
	cout << " Enter model of iron: ";
	gets_s(tmp.Model);
	cout << " Enter color of iron: ";
	gets_s(tmp.Color);
	cout << " Enter min temperature of iron: ";
	cin >> tmp.Min_Temperature;
	cout << " Enter max temperature of iron: ";
	cin >> tmp.Max_Temperature;
	cin.ignore();
	cout << " Is vapor? Write yes or no: ";
	gets_s(tmp.Vapor);
	cout << " Enter power of iron: ";
	cin >> tmp.Power;
	return tmp;
}
void Show(Iron tmp)
{
	cout << left << setw(14) << tmp.Brand << setw(9) << tmp.Model << setw(14) << tmp.Color << setw(9)
		<< tmp.Min_Temperature << setw(9) << tmp.Max_Temperature << setw(9) << tmp.Vapor << setw(9) << tmp.Power <<  "\n";
}







Задание 3. Реализовать структуру «Бойлер» (фирма, цвет,
мощность, объем, температура нагрева). Создайте экземпляр структуры и проиллюстрируйте работу с ним.




#include <iostream>
#include <iomanip>
using namespace std;
struct Boiler
{
	char Brand[15];
	char Color[15];
	float Power;
	float Volume;
	float Temperature;
};
Boiler Input();
void Show(Boiler);
int main()
{
	Boiler bak = Input();
	cout << "\n\n";
	Show(bak);
}
Boiler Input()
{
	Boiler tmp;
	cout << " Enter brand of boiler: ";
	gets_s(tmp.Brand);
	cout << " Enter color of boiler: ";
	gets_s(tmp.Color);
	cout << " Enter power of boiler: ";
	cin >> tmp.Power;
	cout << " Enter volume of boiler: ";
	cin >> tmp.Volume;
	cout << " Enter max temperature of boiler: ";
	cin >> tmp.Temperature;
	return tmp;
}
void Show(Boiler tmp)
{
	cout << left << setw(14) << tmp.Brand << setw(14) << tmp.Color << "\t"
		<< tmp.Power << "\t" << tmp.Volume << "\t" << tmp.Temperature <<"\n";
}






Задание 4. Разработать структуру, которая описывает
животное (название, класс, кличка). Создать функции
для работы с этой структурой:
■ Заполнение объекта;
■ Вывод на экран данных об объекте;
■ Функция «Подать голос».




#include <iostream>
#include <iomanip>
using namespace std;
struct Animal
{
	char Name[15];
	char Class[15];
	char Nickname[15];
};
Animal Input();
void Show(Animal);
void Golos(Animal);
int main()
{
	Animal Jiv = Input();
	cout << "\n\n";
	Show(Jiv);
	Golos(Jiv);
}
Animal Input()
{
	Animal tmp;
	cout << " Enter name of animal: ";
	gets_s(tmp.Name);
	cout << " Enter class of animal (dog, cat, cow): ";
	gets_s(tmp.Class);
	cout << " Enter nickname of animal: ";
	gets_s(tmp.Nickname);
	return tmp;
}
void Show(Animal tmp)
{
	cout << left << setw(14) << tmp.Name << setw(14) << tmp.Class << setw(14) << tmp.Nickname <<"\n\n";
}
void Golos(Animal tmp)
{
	if (_stricmp(tmp.Class, "dog") == 0)
		cout << "gav gav\n\n";
	else if (_stricmp(tmp.Class, "cat") == 0)
		cout << "may may\n\n";
	else if (_stricmp(tmp.Class, "cow") == 0)
		cout << "muuu muuu\n\n";
	else
		cout << "dai edu\n\n";
}






Задание 1. Создайте объединение, состоящее из целого
числа и массива символов.
Напишите следующие функции:
■ Ввести целое число;
■ Просмотреть все байты числа;
■ Просмотреть выбранный байт числа;
■ Вывод байтов числа в двоичном и шестнадцатеричном виде.





#include <iostream>
#include <conio.h>
using namespace std;
union Digit
{
	int num;
	unsigned char str[4];
};
Digit Vvod();
void Show_all(Digit);
void Show_ind(Digit);
void Systems(Digit, int);
int main()
{
	Digit N = Vvod();
	char ch;
	do
	{
		system("cls");
		cout << " Menu:\n"
			" 1 - See all bytes\n"
			" 2 - See selected byte\n"
			" 3 - See bytes in binary wiew\n"
			" 4 - See bytes in 16 wiew\n"
			" 0 - Exit\n"
			" Write your choice: ";
		ch = _getch();
		switch (ch)
		{
		case '1': system("cls");
			Show_all(N);
			system("pause");
			break;
		case '2': system("cls");
			Show_ind(N);
			system("pause");
			break;
		case '3': system("cls");
			Systems(N, 2);
			system("pause");
			break;
		case '4': system("cls");
			Systems(N, 16);
			system("pause");
			break;
		}
	} while (ch != '0');
}
Digit Vvod()
{
	Digit tmp;
	cout << " Enter whool number: ";
	cin >> tmp.num;
	return tmp;
}
void Show_all(Digit N)
{
	for (int i = 0; i < 4; i++)
	{
		cout << (int)N.str[i] << "\t";
	}
	cout << "\n";
}
void Show_ind(Digit N)
{
	int ind;
	cout << " Select byte (1-4): ";
	cin >> ind;
	cout << (int)N.str[ind - 1] << "\n";
}
void Systems(Digit N, int tmp)
{
	char s[9];
	for (int i = 0; i < 4; i++)
	{
		_itoa_s(N.str[i], s, tmp);
		cout << s << "\t";
	}
	cout << "\n";
}






Задание 2. Реализовать 4-х байтовую целую переменную,
к которой можно обращаться и как к знаковому целому,
и как беззнаковому целому, без явного преобразования
типов. Для этого используйте объединение





#include <iostream>
using namespace std;
union Digit
{
	int x;
	unsigned y;
};
int main()
{
	Digit N;
	bool ch;
	cout << " 1: int -> unsigned\n"
		" 0: unsigned -> int\n"
		" Write your choice: ";
	cin >> ch;
	if (ch == 1)
	{
		cout << " Enter number: ";
		cin >> N.x;
		cout << "\n" << N.y << "\n";
	}	
	else
	{
		cout << " Enter number: ";
		cin >> N.y;
		cout << "\n" << N.x << "\n";
	}		
}




Задание 3. Создайте объединение, состоящее из целого
числа и массива логических переменных. Напишите следующие функции:
■ Ввести целое число;
■ Посчитать сколько нулевых байтов у числа;
■ Вывод информации о байтах числа (нулевой, не нулевой).






#include <iostream>
using namespace std;
union Digit
{
	int num;
	bool ch[4];
};
Digit Vvod();
void KolNull(Digit);
void IsNull(Digit);
int main()
{
	Digit N = Vvod();
	KolNull(N);
	IsNull(N);
}
Digit Vvod()
{
	Digit tmp;
	cout << " Enter whool number: ";
	cin >> tmp.num;
	return tmp;
}
void KolNull(Digit N)
{
	cout << "\n";
	int count = 0;
	for (int i = 0; i < 4; i++)
	{
		if (N.ch[i] == 0)
			count++;
	}
	cout << " Amount of Zero Bytes - " << count << "\n\n";
}
void IsNull(Digit N)
{
	for (int i = 0; i < 4; i++)
	{
		if (N.ch[i] == 0)
			cout << "NULL\t";
		else
			cout << "notNULL\t\t";
	}
	cout << "\n";
}





//1.Используя один и тот же идентификатор объявить цифровой и символьный массивы.
//Для цифрового массива определить количество повторений каждого числа.Для символьного массива 
//найти позицию и значение символа по заданному коду символа.Использовать условную компиляцию.

//function.h
#ifdef INTEGER
void Rand_Int(int*, int);
void Print_Int(int*, int);
void Repeat_Int(int*, int);
#define Type int
#define Rand Rand_Int
#define Print Print_Int
#endif

#ifdef CHAR
void Rand_Char(char*, int);
void Print_Char(char*, int);
void Cod(char*, int, int);
#define Type char
#define Rand Rand_Char
#define Print Print_Char
#endif


//prog.cpp
#include<iostream>
#include<time.h>
using namespace std;
#define CHAR//INTEGER//
#include"function.h"
int main()
{
	srand(time(0));
	const int n = 10;
	Type mas[n];
	Rand(mas, n);
	Print(mas, n);
#ifdef INTEGER
	Repeat_Int(mas, n);
#endif
#ifdef CHAR
	int key;
	cout << " Enter value (65..75): ";
	cin >> key;
	Cod(mas, n, key);
#endif
}


//function.cpp
#include<iostream>
using namespace std;
void Rand_Int(int* mas, int n)
{
	for (int i = 0; i < n; i++)
	{
		mas[i] = rand() % 25;
	}
}
void Print_Int(int* mas, int n)
{
	for (int i = 0; i < n; i++)
	{
		cout << mas[i] << "\t";
	}
	cout << "\n";
}
void Repeat_Int(int* mas, int n)
{
	for (int i = 0; i < n; i++)
	{
		int kol = 1;
		for (int j = i + 1; j < n; j++)
		{
			if (mas[i] == mas[j])
				kol++;
		}
		int f = 0;
		for (int k = 0; k < i; k++)
		{
			if (mas[k] == mas[i])
				f = 1;
		}
		if (f == 0)
			cout << mas[i] << ":" << kol << "\n";
	}
}




void Rand_Char(char* mas, int n)
{
	for (int i = 0; i < n; i++)
	{
		mas[i] = char(rand() % (75 + 1 - 65) + 65);
	}
}
void Print_Char(char* mas, int n)
{
	for (int i = 0; i < n; i++)
	{
		cout << mas[i] << "\t";
	}
	cout << "\n";
}
void Cod(char* mas, int n, int key)
{
	bool f = 0;
	for (int i = 0; i < n; i++)
	{
		if (int(mas[i]) == key)
		{
			cout << " Pos: " << i << "\n";
			cout << " Vol: " << mas[i] << "\n";
			f = 1;
			break;
		}
	}
	if (f == 0)
		cout << " Takoi bukvi net\n";
}





//2.Проверить вводимые с клавиатуры числа на чётность и положительность.Оформить в
//виде макросов определение чётности, положительности.С помощью условной компиляции 
//разделить процессы определения чётности и положительности
//чисел.

#include<iostream>
using namespace std;
#define zad2//zad1//
#ifdef zad1
#define Even(x) ((x % 2 == 0) ? "chetny" : "nechetny")
#define func Even
#endif
#ifdef zad2
#define Bolshe_menshe(x) ((x > 0) ? "num > 0" : "num < 0")
#define func Bolshe_menshe
#endif
int main()
{
	int a;
	cout << " Enter num ";
	cin >> a;
	cout << func(a) << "\n";
}







//3.Используя один и тот же идентификатор объявить цифровой и символьный массивы.
//Для цифрового массива найти значение максимального элемента.Для символьного
//массива найти количество слов(слова разделяются пробелами).Использовать условную компиляцию.



//function.h
#ifdef INTEGER
void Rand_Int(int*, int);
void Print_Int(int*, int);
int Search_Max_Int(int*, int);
#define Type int
#define Rand Rand_Int
#define Print Print_Int
#endif

#ifdef CHAR
void Kol_slov();
#endif




//prog.cpp
#include<iostream>
#include<time.h>
using namespace std;
#define CHAR//INTEGER//
#include"function.h"
int main()
{
#ifdef INTEGER
	srand(time(0));
	const int n = 10;
	Type mas[n];
	Rand(mas, n);
	Print(mas, n);
	cout << " Max: " << Search_Max_Int(mas, n) << "\n";
#endif
#ifdef CHAR
	Kol_slov();
#endif
}




//function.cpp
#include<iostream>
using namespace std;
void Rand_Int(int* mas, int n)
{
	for (int i = 0; i < n; i++)
	{
		mas[i] = rand() % 25;
	}
}
void Print_Int(int* mas, int n)
{
	for (int i = 0; i < n; i++)
	{
		cout << mas[i] << "\t";
	}
	cout << "\n";
}
int Search_Max_Int(int* mas, int n)
{
	int max = mas[0];
	for (int i = 1; i < n; i++)
	{
		if (mas[i] > max)
			max = mas[i];
	}
	return max;
}
void Kol_slov()
{
	char str[100];
	gets_s(str);
	int Length = strlen(str);
	int count = 0;
	for (int i = 0; i < Length; i++)
	{
		if (str[i] == ' ' && str[i + 1] != ' ' || str[i] == '\t')
			count++;
		else if (str[i] == '-' && str[i + 1] == ' ')
			count--;
	}
	cout << "\n Amount of words: " << count + 1 << "\n";
}





//4. Задать макрос вычисления периметра эллипса по известным радиусам a и b.

#include<iostream>
using namespace std;
#define Perimetr(a, b) 4*((3.14*a*b + (a-b))/(a+b))
int main()
{
	double a, b;
	cout << " Enter a, b (with space): ";
	cin >> a >> b;
	cout << "\n Perimetr: " << Perimetr(a, b) << "\n";
}







//5. Используя условную компиляцию вычислить значение переменной.Функции max, min и 
//возведение в степень выполнить 
//в виде макросов.

#include<iostream>
using namespace std;
#define A 9
#define Sqr(c) (c)*(c)
#define Max(a, b) ((a > b) ? a : b)
#define Min(a, b) ((a < b) ? a : b)
int main()
{
	int x, y, z;
	cout << " Enter x, y, z (with space)";
	cin >> x >> y >> z;

#if A < 5 && A > 0
	int a = Sqr(x) + y + z;
	int b = x * y * z;
	cout << " Max: " << Max(a, b);


#else 
	int a = Sqr(x) + (x + z) * (x + z);
	int b = x * y;
	cout << " Min: " << Min(a, b);
#endif
}



6 .Используя условную компиляцию вычислить значение переменной. Функции max, min, взятие
 модуля и возведение в 
степень выполнить в виде макросов.




#include<iostream>
using namespace std;
#define A 4
#define MyPow(a, b) pow((a), b) 
#define Abs(c) abs(c)
#define Max(a, b) ((a > b) ? a : b)
#define Min(a, b) ((a < b) ? a : b)
int main()
{
	int x, y, z;
	cout << " Enter x, y, z (with space)";
	cin >> x >> y >> z;

#if A < 3 && A > 0
	int a = abs(x) + abs(y) + abs(z);
	int b = MyPow(x, 3);
	cout << " Max: " << Max(a, b);
#endif

#if A > 3
	int a = 2 * x + y;
	int b = MyPow((2 * y - z), 2);
	cout << " Min: " << Min(a, b);
#endif
}




7. Используя условную компиляцию вычислить значение переменной. Функции max, min, взятие м
одуля и возведение в степень 
выполнить в виде макросов.





#include<iostream>
using namespace std;
#define A 2
#define MyPow(a, b) pow((a), b) 
#define Abs(c) abs(c)
#define Max(a, b) ((a > b) ? a : b)
#define Min(a, b) ((a < b) ? a : b)
int main()
{
	int x, y, z;
	cout << " Enter x, y, z (with space)";
	cin >> x >> y >> z;

#if A < 10 && A > 5
	cout << " Value: " << Min(x, z) * Max(x + z, x * z) << "\n";
#else
	cout << " Value: " << MyPow(Max(Abs(x-z), z), 2) << "\n";
#endif
}





8. Используя условную компиляцию вычислить значение переменной. Функции max, min, взятие модуля, 
возведение в степень, извлечение корня выполнить
 в виде макросов.





#include<iostream>
using namespace std;
#define A 2
#define MyPow(a, b) pow((a), b) 
#define Abs(c) abs(c)
#define Max(a, b) ((a > b) ? a : b)
#define Min(a, b) ((a < b) ? a : b)
int main()
{
	int x, y, z;
	cout << " Enter x, y, z (with space)";
	cin >> x >> y >> z;

#if A == 1
	int a = MyPow((x - y), 2);
	int b = Abs(x - y);
	cout << " Max: " << Max(a, b);


#else 
	int a = x + MyPow(y, 2);
	int b = sqrt(x + y);
	cout << " Min: " << Min(a, b);
#endif
}





Задание 1. Описать структуру Student (фамилия, группа,
успеваемость (массив из 5 int)). Создать массив студентов
и написать программу, позволяющую:
■ Динамически изменять размер массива;
■ Выводить список отличников (>75% отличных оценок);
■ Выводить список двоечников (>50% оценок 2 и 3).




#include<iostream>
#include<conio.h>
#include <iomanip>
using namespace std;
struct Student
{
	char Surname[15];
	char Group[10];
	int Marks[5];
};
Student Input();
Student* Add(Student*, int&);
void Show_One(Student);
void Print_Good(Student*, int);
void Print_Bad(Student*, int);
int main()
{
	Student* arr = nullptr;
	int size = 0;
	char ch;
	do
	{
		system("cls");
		cout << " Add student - 1\n"
			" Show list of excellent students - 2\n"
			" Show list of bad students - 3\n"
			" Exit - 0\n"
			" your choice ";
		ch = _getch();
		system("cls");
		switch (ch)
		{	
		case '1': 
			arr = Add(arr, size);
			cout << " Create completed\n";
			break;
		case '2': 
			Print_Good(arr, size);
			break;
		case '3': 
			Print_Bad(arr, size);
			break;	
		}
		system("pause");
	}while (ch != '0');
	free(arr);
}
Student Input()
{
	Student tmp;
	cout << " Enter surname: ";
	cin >> tmp.Surname;
	cout << " Enter group: ";
	cin >> tmp.Group;
	for (int i = 0; i < 5; i++)
	{
		cout << " Enter mark "<<i+1<<": ";
		cin >> tmp.Marks[i];
	}
	return tmp;
}
Student* Add(Student* arr, int& size)
{
	arr = (Student*)realloc(arr, (size + 1) * sizeof(Student));
	arr[size] = Input();
	size++;
	return arr;
}
void Show_One(Student tmp)
{
	cout << left << setw(14) << tmp.Surname << setw(14) << tmp.Group;
	for (int i = 0; i < 5; i++)
	{
		cout  << setw(4) << tmp.Marks[i];
	}
	cout << "\n";
}
void Print_Good(Student* arr, int size)
{
	int count;
	for (int i = 0; i < size; i++)
	{
		count = 0;
		for (int j = 0; j < 5; j++)
		{
			if (arr[i].Marks[j] == 5)
				count++;
		}
		if(count >= 4)
			Show_One(arr[i]);
	}
}
void Print_Bad(Student* arr, int size)
{
	int count;
	for (int i = 0; i < size; i++)
	{
		count = 0;
		for (int j = 0; j < 5; j++)
		{
			if (arr[i].Marks[j] < 4)
				count++;
		}
		if (count > 2)
			Show_One(arr[i]);
	}
}






Задание 2. Описать структуру Man (Фамилия, Имя, Возраст, Дата рождения). Создать массив, предусмотреть:
■ Вывод информации с сортировкой по фамилии или
имени;
■ Вывод списка именинников месяца с указанием даты
рождения;
■ Изменение размеров массива при добавлении и удалении записей;
■ Поиск по фамилии и имени;
■ Редактирование записи.





#include<iostream>
#include<conio.h>
#include <iomanip>
using namespace std;
struct Date
{
	int Day;
	int Month;
	int Year;
};
struct Man
{
	char Name[15];
	char Surname[15];
	int Age;
	Date D;
};
Man Input();
Man* Add(Man*, int&);
void Show_One(Man);
void Print_All(Man*, int);
void Header();
Man* Delete_Man(Man*, int&, char*);
void Sort_Name(Man*, int);
void Sort_Surname(Man*, int);
void Birthdays(Man*, int, int);
void Search_Name(Man*, int, char*);
void Search_Surname(Man*, int, char*);
void Edit(Man*, int, char*, char*);
int main()
{
	setlocale(LC_ALL, "ru");
	Man* arr = nullptr;
	int size = 0;
	char ch;
	char str[15];
	int key;
	do
	{
		system("cls");
		cout << " MЕНЮ.\n"
			" Добавить - 1\n"
			" Удалить - 2\n"
			" Сортировать - 3\n"
			" Список именинников - 4\n"
			" Найти - 5\n"
			" Редактировать - 6\n"
			" Показать всех - 7\n"
			" Выйти - 0\n"
			" Ваш выбор: ";
		ch = _getch();
		system("cls");
		switch (ch)
		{	
		case '1': 
			arr = Add(arr, size);
			cout << " Create completed\n";
			break;
		case '2':
			cout << " Enter name: ";
			cin >> str;
			arr = Delete_Man(arr, size, str);
			break;
		case '3':
			cout << " Сортировать по имени - 1\n"
				" Сортировать по фамилии - 2\n"
				" Ваш выбор: ";
			cin >> key;
			if (key == 1)
				Sort_Name(arr, size);
			else
				Sort_Surname(arr, size);
			cout << " Sort completed\n";
			break;
		case '4':
			cout << " Enter month: ";
			cin >> key;
			Birthdays(arr, size, key);
			break;
		case '5':
			cout << " Найти по имени - 1\n"
				" Найти по фамилии - 2\n"
				" Ваш выбор: ";
			cin >> key;
			if (key == 1)
			{
				cout << " Enter Name: ";
				cin >> str;
				Search_Name(arr, size, str);
			}
			else
			{
				cout << " Enter Surname: ";
				cin >> str;
				Search_Surname(arr, size, str);
			}
			break;
		case '6':
			cout << " Enter Name: ";
			cin >> str;
			char str2[15];
			cout << " Enter Surname: ";
			cin >> str2;
			Edit(arr, size, str, str2);		
			break;
		case '7': 
			if (size > 0)
			{
				Header();
				Print_All(arr, size);
			}
			else
				cout << " В базе нет людей.\n";
			break;
		}
		system("pause");
	}while (ch != '0');
	free(arr);
}
Man Input()
{
	Man tmp;
	cout << " Enter Name: ";
	cin >> tmp.Name;
	cout << " Enter surname: ";
	cin >> tmp.Surname;
	cout << " Enter age: ";
	cin >> tmp.Age;
	cout << " Date of Birth\n Enter day: ";
	cin >> tmp.D.Day;
	cout << " Enter month: ";
	cin >> tmp.D.Month;
	cout << " Enter year: ";
	cin >> tmp.D.Year;
	return tmp;
}
Man* Add(Man* arr, int& size)
{
	arr = (Man*)realloc(arr, (size + 1) * sizeof(Man));
	arr[size] = Input();
	size++;
	return arr;
}
void Header()
{
	cout << left << setw(17) << "Name" << setw(17) << "Surname" << setw(10) << "Age"
		<< setw(10) << "Day" << setw(10) << "Month" << setw(10) << "Year" << "\n";
}
void Show_One(Man tmp)
{
	cout << left << setw(17) << tmp.Name << setw(17) << tmp.Surname << setw(10) << tmp.Age
		<< setw(10) << tmp.D.Day << setw(10) << tmp.D.Month << setw(10) << tmp.D.Year << "\n";
}
void Print_All(Man* arr, int size)
{
	for (int i = 0; i < size; i++)
	{
		Show_One(arr[i]);
	}
}
Man* Delete_Man(Man* arr, int& size, char* str)
{
	int f = 0;
	for (int i = 0; i < size; i++)
	{
		if (!_stricmp(arr[i].Name, str))
		{
			for (int j = i; j < size - 1; j++)
			{
				arr[j] = arr[j + 1];
			}
			arr = (Man*)realloc(arr, (size - 1) * sizeof(Man));
			size--;
			i--;
			f = 1;
		}
	}
	if (f == 0)
		cout << " There is no such name\n";
	else
		cout << " Name is deleted\n";
	return arr;
}
void Sort_Name(Man* arr, int size)
{
	for (int i = 0; i < size; i++)
	{
		for (int j = size - 1; j > i; j--)
		{
			if (_stricmp(arr[j].Name, arr[j - 1].Name) < 0)
			{
				Man tmp = arr[j];
				arr[j] = arr[j - 1];
				arr[j - 1] = tmp;
			}
		}
	}
}
void Sort_Surname(Man* arr, int size)
{
	for (int i = 0; i < size; i++)
	{
		for (int j = size - 1; j > i; j--)
		{
			if (_stricmp(arr[j].Surname, arr[j - 1].Surname) < 0)
			{
				Man tmp = arr[j];
				arr[j] = arr[j - 1];
				arr[j - 1] = tmp;
			}
		}
	}
}
void Birthdays(Man* arr, int size, int month)
{
	bool f = 0;
	bool once = 0;
	for (int i = 0; i < size; i++)
	{
		if (arr[i].D.Month == month)
		{
			if (once == 0)
				Header();
			Show_One(arr[i]);
			once = 1;
			f = 1;
		}			
	}
	if (f == 0)
		cout << " There are no birthdays in this month\n";
}
void Search_Name(Man* arr, int size, char* str)
{
	bool f = 0;
	bool once = 0;
	for (int i = 0; i < size; i++)
	{
		if (!_stricmp(arr[i].Name, str))
		{
			if (once == 0)
				Header();
			Show_One(arr[i]);
			once = 1;
			f = 1;
		}
	}
	if (f == 0)
		cout << " There are no such names\n";
}
void Search_Surname(Man* arr, int size, char* str)
{
	bool f = 0;
	bool once = 0;
	for (int i = 0; i < size; i++)
	{
		if (!_stricmp(arr[i].Surname, str))
		{
			if (once == 0)
				Header();
			Show_One(arr[i]);
			once = 1;
			f = 1;
		}
	}
	if (f == 0)
		cout << " There are no such surnames\n";
}
void Edit(Man* arr, int size, char* name, char* surname)
{
	bool f = 0;
	for (int i = 0; i < size; i++)
	{
		if (!_stricmp(arr[i].Name, name) && !_stricmp(arr[i].Surname, surname))
		{
			Header();
			Show_One(arr[i]);
			f = 1;
			cout << "\n Enter new man:\n";
			arr[i] = Input();
			cout << " Edit completed\n";
			break;
		}
	}
	if (f == 0)
		cout << " There are no such mans\n";
}






Задание 1.
Создать проект в котором
1. Cоздать три файла: function.h, function.cpp, prog.cpp.
2. В файле function.cpp необходимо написать следующие
функции для работы с массивом данных:
a) функцию для заполнения массива случайными значениями;
b) функцию для вывода значений массива на консоль ;
c) функцию для поиска минимального элемента;
d)функцию для поиска максимального элемента;
e) функцию для сортировки;
f) функцию для редактирования значения массива.
Данные функции необходимо написать для работы
с массивом целых, действительных и символьных
значений. (Для каждого типа написать отдельную
функцию).
3. В файле function.h нужно:
a) описать прототипы всех функций;
b) сделать проверку определена ли константа, указывающая на тип данных (#ifdef INTEGER);
c) создать обобщающие имена функции, которым будет определена функция соответствующего типа в 
зависимости от константы, указанной в файле prog.
cpp (# define show ShowInt).
4. В файле prog.cpp нужно:
a) в функции main вызвать все функции через переозначеные (обобщенные) имена из файла function.h
(show());
b) определить константу, которая указывает какой тип
данных будет использоваться. Например INTEGER —
целые данные, CHAR — символьные DOUBLE —
настоящие (#define INTEGER).
Имя функциям нужно давать так , чтобы они отвечали своей сути . Например функция для вывода значений массива целых чисел на консоль — ShowArrayInt().
А, когда переопределяем функцию с помощью #define то
нужно давать общее имя. Например #define ShowArray
ShowArrayInt.




//function.h
#ifdef INTEGER
void Rand_Int(int*, int);
void Print_Int(int*, int);
int Search_Min_Int(int*, int);
int Search_Max_Int(int*, int);
void Sort_Int(int*, int);
void Edit_Int(int*, int, int, int);
#define Type int
#define Rand Rand_Int
#define Print Print_Int
#define Search_Min Search_Min_Int
#define Search_Max Search_Max_Int
#define Sort Sort_Int
#define Edit Edit_Int
#endif

#ifdef DOUBLE
void Rand_Double(double*, int);
void Print_Double(double*, int);
double Search_Min_Double(double*, int);
double Search_Max_Double(double*, int);
void Sort_Double(double*, int);
void Edit_Double(double*, int, int, double);
#define Type double
#define Rand Rand_Double
#define Print Print_Double
#define Search_Min Search_Min_Double
#define Search_Max Search_Max_Double
#define Sort Sort_Double
#define Edit Edit_Double
#endif

#ifdef CHAR
void Rand_Char(char*, int);
void Print_Char(char*, int);
char Search_Min_Char(char*, int);
char Search_Max_Char(char*, int);
void Sort_Char(char*, int);
void Edit_Char(char*, int, int, char);
#define Type char
#define Rand Rand_Char
#define Print Print_Char
#define Search_Min Search_Min_Char
#define Search_Max Search_Max_Char
#define Sort Sort_Char
#define Edit Edit_Char
#endif




//prog.cpp
#include<iostream>
#include<time.h>
using namespace std;
#define INTEGER//DOUBLE//CHAR//
#include"function.h"
int main()
{
	srand(time(0));
	const int n = 5;
	Type mas[n];
	Rand(mas, n);
	Print(mas, n);
	cout << "\n Min = " << Search_Min(mas, n) << "\n";
	cout << " Max = " << Search_Max(mas, n) << "\n";
	cout << "\n Sorted array:\n";
	Sort(mas, n);
	Print(mas, n);
	int index;
	cout << "\n Enter index to change (start with 1): ";
	cin >> index;
	index--;
	Type value;
	cout << " Enter new value: ";
	cin >> value;
	Edit(mas, n, index, value);
	Print(mas, n);
}



//function.cpp
#include<iostream>
using namespace std;
void Rand_Int(int* mas, int n)
{
	for (int i = 0; i < n; i++)
	{
		mas[i] = rand() % 25;
	}
}
void Print_Int(int* mas, int n)
{
	for (int i = 0; i < n; i++)
	{
		cout << mas[i] << "\t";
	}
	cout << "\n";
}
int Search_Min_Int(int* mas, int n)
{
	int min = mas[0];
	for (int i = 1; i < n; i++)
	{
		if (mas[i] < min)
			min = mas[i];
	}
	return min;
}
int Search_Max_Int(int* mas, int n)
{
	int max = mas[0];
	for (int i = 1; i < n; i++)
	{
		if (mas[i] > max)
			max = mas[i];
	}
	return max;
}
void Sort_Int(int* mas, int n)
{
	for (int i = 0; i < n - 1; i++)
	{
		for (int j = n - 1; j > i; j--)
		{
			if (mas[j] < mas[j - 1])
			{
				int tmp = mas[j];
				mas[j] = mas[j - 1];
				mas[j - 1] = tmp;
			}
		}
	}
}
void Edit_Int(int* mas, int n, int index, int value)
{
	while (!(index < n && index >= 0))
	{
		cout << " Enter correct index: ";
		cin >> index;
		index--;
	}
	mas[index] = value;
}





void Rand_Double(double* mas, int n)
{
	for (int i = 0; i < n; i++)
	{
		mas[i] = rand() / 32767.0 * 25;
	}
}
void Print_Double(double* mas, int n)
{
	for (int i = 0; i < n; i++)
	{
		cout << mas[i] << "    ";
	}
	cout << "\n";
}
double Search_Min_Double(double* mas, int n)
{
	double min = mas[0];
	for (int i = 1; i < n; i++)
	{
		if (mas[i] < min)
			min = mas[i];
	}
	return min;
}
double Search_Max_Double(double* mas, int n)
{
	double max = mas[0];
	for (int i = 1; i < n; i++)
	{
		if (mas[i] > max)
			max = mas[i];
	}
	return max;
}
void Sort_Double(double* mas, int n)
{
	for (int i = 0; i < n - 1; i++)
	{
		for (int j = n - 1; j > i; j--)
		{
			if (mas[j] < mas[j - 1])
			{
				double tmp = mas[j];
				mas[j] = mas[j - 1];
				mas[j - 1] = tmp;
			}
		}
	}
}
void Edit_Double(double* mas, int n, int index, double value)
{
	while (!(index < n && index >= 0))
	{
		cout << " Enter correct index: ";
		cin >> index;
		index--;
	}
	mas[index] = value;
}





void Rand_Char(char* mas, int n)
{
	for (int i = 0; i < n; i++)
	{
		mas[i] = char(rand() % (90 + 1 - 65) + 65);//A..Z
	}
}
void Print_Char(char* mas, int n)
{
	for (int i = 0; i < n; i++)
	{
		cout << mas[i] << "\t";
	}
	cout << "\n";
}
char Search_Min_Char(char* mas, int n)
{
	char min = mas[0];
	for (int i = 1; i < n; i++)
	{
		if (mas[i] < min)
			min = mas[i];
	}
	return min;
}
char Search_Max_Char(char* mas, int n)
{
	char max = mas[0];
	for (int i = 1; i < n; i++)
	{
		if (mas[i] > max)
			max = mas[i];
	}
	return max;
}
void Sort_Char(char* mas, int n)
{
	for (int i = 0; i < n - 1; i++)
	{
		for (int j = n - 1; j > i; j--)
		{
			if (mas[j] < mas[j - 1])
			{
				char tmp = mas[j];
				mas[j] = mas[j - 1];
				mas[j - 1] = tmp;
			}
		}
	}
}
void Edit_Char(char* mas, int n, int index, char value)
{
	while (!(index < n && index >= 0))
	{
		cout << " Enter correct index: ";
		cin >> index;
		index--;
	}
	mas[index] = value;
}




Задание 1. Реализуйте структуру, которая хранит ФИО
студента и 10 битовых полей. Каждое поле — это оценка
(сдал/не сдал).
Создайте один экземпляр этой структуры и реализуйте
для него следующие действия:
■ Заполнить структуру;
■ Вывод информации;
■ Печать среднего балла.
Создайте массив экземпляров этой структуры и реализуйте для него следующие действия:
■ Добавить студента;
■ Проставить оценки студенту;
■ Вывод списка студентов;
■ Печать оценок конкретного студента;
■ Печать должников.




#include<iostream>
#include<conio.h>
#include <iomanip>
using namespace std;
struct Student
{
	char Fio[30];
	int Predmet1 : 1;
	int Predmet2 : 1;
	int Predmet3 : 1;
	int Predmet4 : 1;
	int Predmet5 : 1;
	int Predmet6 : 1;
	int Predmet7 : 1;
	int Predmet8 : 1;
	int Predmet9 : 1;
	int Predmet10 : 1;
	int Average;
};
Student Input();
Student* Add(Student*, int&);
void Show_One(Student);
void Print_All(Student*, int);
void Find_One(Student*, int, char*);
void Find_Bad(Student*, int, char*);
int main()
{
	srand(time(0));
	Student* arr = nullptr;
	int size = 0;
	char ch;
	do
	{
		system("cls");
		cout << " Add student - 1\n"
			" Show list of all students - 2\n"
			" Find a student - 3\n"
			" Find bad students - 4\n"
			" Exit - 0\n"
			" your choice ";
		ch = _getch();
		system("cls");
		switch (ch)
		{
		case '1':
			arr = Add(arr, size);
			cout << " Create completed\n";
			break;
		case '2':
			if (size > 0)
				Print_All(arr, size);
			else
				cout << " not found.\n";
			break;
		case '3':
			char str[30];
			cout << " Vvedite hotya bi 7 pervix simvolov fio studenta: ";
			gets_s(str);
			Find_One(arr, size, str);
		case '4':
			Find_Bad(arr, size, str);
			break;
		}
		system("pause");
	} while (ch != '0');
	free(arr);
}
Student Input()
{
	Student tmp;
	cout << " Enter FIO: ";
	gets_s(tmp.Fio);
	tmp.Predmet1 = rand() % 2;
	tmp.Predmet2 = rand() % 2;
	tmp.Predmet3 = rand() % 2;
	tmp.Predmet4 = rand() % 2;
	tmp.Predmet5 = rand() % 2;
	tmp.Predmet6 = rand() % 2;
	tmp.Predmet7 = rand() % 2;
	tmp.Predmet8 = rand() % 2;
	tmp.Predmet9 = rand() % 2;
	tmp.Predmet10 = rand() % 2;
	tmp.Average = tmp.Predmet1 + tmp.Predmet2 + tmp.Predmet3 + tmp.Predmet4 + tmp.Predmet5
		+ tmp.Predmet6 + tmp.Predmet7 + tmp.Predmet8 + tmp.Predmet9 + tmp.Predmet10;
	return tmp;
}
Student* Add(Student* arr, int& size)
{
	arr = (Student*)realloc(arr, (size + 1) * sizeof(Student));
	arr[size] = Input();
	size++;
	return arr;
}
void Show_One(Student tmp)
{
	cout << left << setw(35) << tmp.Fio << setw(3) << abs(tmp.Predmet1) << setw(3) << abs(tmp.Predmet2)
		<< setw(3) << abs(tmp.Predmet3) << setw(3) << abs(tmp.Predmet4) << setw(3) << abs(tmp.Predmet5)
		<< setw(3) << abs(tmp.Predmet6) << setw(3) << abs(tmp.Predmet7) << setw(3) << abs(tmp.Predmet8)
		<< setw(3) << abs(tmp.Predmet9) << setw(3) << abs(tmp.Predmet10) 
		<< "Average: "<< abs(tmp.Average) << "\n";
	
}
void Print_All(Student* arr, int size)
{
	for (int i = 0; i < size; i++)
	{
		Show_One(arr[i]);
	}
}
void Find_One(Student* arr, int size, char* str)
{
	bool f = 0;
	for (int i = 0; i < size; i++)
	{
		
		if (!_strnicmp(arr[i].Fio, str, 7))
		{
			Show_One(arr[i]);
			f = 1;
			break;
		}
	}	
	if (f == 0)
		cout << " not found.\n";
}
void Find_Bad(Student* arr, int size, char* str)
{
	bool f = 0;
	for (int i = 0; i < size; i++)
	{

		if (abs(arr[i].Average) < 6)
		{
			Show_One(arr[i]);
			f = 1;
		}
	}
	if (f == 0)
		cout << " not found.\n";
}






Задание 1. С помощью директивы #define написать следующие макросы:
■ Нахождение меньшего из двух чисел;
■ Нахождение большего из двух чисел;
■ Возведение числа в квадрат;
■ Возведение числа в степень;
■ Проверка числа на четность;
■ Проверка числа на нечетность.



#include<iostream>
using namespace std;
#define Min(x, y) ((x < y) ? x : y)
#define Max(x, y) ((x > y) ? x : y)
#define Sqr(x) (x)*(x)
#define MyPow(x, y) pow(x, y)
#define Even(x) ((x % 2 == 0) ? "chetny" : "nechetny")
int main() 
{
	cout << " Min: " << Min(7, 5) << "\n";
	cout << " Max: " << Max(9, 8) << "\n";
	cout << " Sqr: " << Sqr(3) << "\n";
	cout << " Pow: " << MyPow(3, 3) << "\n";
	cout << Even(5) << "\n";
}





Задание 1. Дано два текстовых файла. Выяснить, совпадают ли их строки. 
Если нет, то вывести несовпадающую строку из каждого файла.




#include<iostream>
using namespace std;
int main()
{
	FILE* pf1;
	fopen_s(&pf1, "Doc1.txt", "rt");
	FILE* pf2;
	fopen_s(&pf2, "Doc2.txt", "rt");
	if (pf1 != nullptr && pf2 != nullptr)
	{
		char str1[100];
		char str2[100];
		cout << " Don't match in first file:\n";
		while (!feof(pf1))
		{
			bool f = 0;
			fgets(str1, 100, pf1);
			while (!feof(pf2))
			{
				fgets(str2, 100, pf2);
				if (!strcmp(str1, str2))
				{
					f = 1;
					break;
				}
			}
			if(f == 0)
				cout << str1;
			rewind(pf2);
		}

		cout << "\n\n Don't match in second file:\n";
		rewind(pf1);
		while (!feof(pf2))
		{
			bool f = 0;
			fgets(str2, 100, pf2);
			while (!feof(pf1))
			{
				fgets(str1, 100, pf1);
				if (!strcmp(str1, str2))
				{
					f = 1;
					break;
				}
			}
			if(f == 0)
				cout << str2;
			rewind(pf1);
		}
		fclose(pf1);
		fclose(pf2);
	}
	else
		cout << " Error\n";
}


Задание 2. Дан текстовый файл. Необходимо создать новый файл и записать в него 
следующую статистику по исходному файлу:
■ Количество символов;
■ Количество строк;
■ Количество гласных букв;
■ Количество согласных букв;
■ Количество цифр.





#include<iostream>
using namespace std;
int main()
{
	setlocale(LC_ALL, "ru");
	FILE* pf1;
	fopen_s(&pf1, "Doc1.txt", "rt");
	FILE* pf2;
	fopen_s(&pf2, "DOc2.txt", "wt");
	if (pf1 != nullptr && pf2 != nullptr)
	{
		int Kol_Ost = 0, Kol_Str = 0, Kol_Glassnix = 0, Kol_Soglassnix = 0, Kol_Num = 0;
		char ch;
		char str[] = "AEIOUYaeiouy";
		bool One_Str = 0;
		while (!feof(pf1))
		{
			ch = fgetc(pf1);
			if (ch == '\n')
				Kol_Str++;
			else if (strchr(str, ch) != 0)
				Kol_Glassnix++;
			else if (isalpha(ch) != 0)
				Kol_Soglassnix++;
			else if (isdigit(ch) != 0)
				Kol_Num++;
			else
			{
				if (One_Str == 0)
				{
					Kol_Str++;
					One_Str = 1;
				}
				if (ch != EOF)
					Kol_Ost++;
			}				
		}

		char text1[30] = "Количество символов: ";
		char num1[5] = "";
		_itoa_s(Kol_Ost + Kol_Soglassnix + Kol_Glassnix + Kol_Num, num1, 10);
		strcat_s(text1, num1);
		fputs(text1, pf2);
		fputc('\n', pf2);

		char text2[30] = "Количество строк: ";
		char num2[5] = "";
		_itoa_s(Kol_Str, num2, 10);
		strcat_s(text2, num2);
		fputs(text2, pf2);
		fputc('\n', pf2);
		
		char text3[35] = "Количество гласных букв: ";
		char num3[5] = "";
		_itoa_s(Kol_Glassnix, num3, 10);
		strcat_s(text3, num3);
		fputs(text3, pf2);
		fputc('\n', pf2);

		char text4[35] = "Количество согласных букв: ";
		char num4[5] = "";
		_itoa_s(Kol_Soglassnix, num4, 10);
		strcat_s(text4, num4);
		fputs(text4, pf2);
		fputc('\n', pf2);

		char text5[30] = "Количество цифр: ";
		char num5[5] = "";
		_itoa_s(Kol_Num, num5, 10);
		strcat_s(text5, num5);
		fputs(text5, pf2);
		fputc('\n', pf2);

		fclose(pf1);
		fclose(pf2);
	}
	else
		cout << " Error\n";
}





Задание 3. Шифр Цезаря — один из древнейших шифров. При шифровании каждый 
символ заменяется другим, отстоящим от него в алфавите на фиксированное число позиций.
Пример
■ Шифрование с использованием ключа: 3.
■ Оригинальный текст: Съешь же ещё этих мягких
французских булок, да выпей чаю.
■ Шифрованный текст: Фэзыя йз зьи ахлш пвёнлш чугрщцкфнлш дцосн, жг еютзм ъгб.
■ Дан текстовый файл. Зашифровать его, используя шифр Цезаря. Результат записать в другой файл.





#include<iostream>
#include <Windows.h>
using namespace std;
int main()
{
	setlocale(LC_ALL, "ru");
	FILE* pf1;
	fopen_s(&pf1, "Doc1.txt", "rt");
	FILE* pf2;
	fopen_s(&pf2, "Doc2.txt", "wt");
	char ch;
	int key;
	cout << " Enter key for shifr: ";
	cin >> key;
	if (pf1 != nullptr && pf2 != nullptr)
	{
		while ((ch = fgetc(pf1)) != EOF)
		{
			if (ch == 'X' && key > 2)
			{
				ch = (key - 3) + 65;
			}
			else if (ch == 'Y' && key > 1)
			{
				ch = (key - 2) + 65;
			}
			else if (ch == 'Z' && key > 0)
			{
				ch = (key - 1) + 65;
			}

			else if (ch == 'x' && key > 2)
			{
				ch = (key - 3) + 97;
			}
			else if (ch == 'y' && key > 1)
			{
				ch = (key - 2) + 97;
			}
			else if (ch == 'z' && key > 0)
			{
				ch = (key - 1) + 97;
			}

			else if (isalpha(ch) != 0)
				ch += key;

			fputc(ch, pf2);
		}
		fclose(pf1);
		fclose(pf2);	
	}
	else
		cout << " Error.\n";
}





Задание 1. Дан текстовый файл. Удалить из него последнюю строку. Результат записать в другой файл.





#include<iostream>
#include <Windows.h>
using namespace std;
int main()
{
	setlocale(LC_ALL, "ru");
	FILE* pf1;
	fopen_s(&pf1, "Doc1.txt", "rt");
	FILE* pf2;
	fopen_s(&pf2, "Doc2.txt", "wt");
	if (pf1 != nullptr && pf2 != nullptr)
	{
		int Kol_str_pf1 = 0;
		char str[100];
		while (!feof(pf1))
		{
			fgets(str, 100, pf1);
			Kol_str_pf1++;
		}
		Kol_str_pf1--;

		rewind(pf1);
		int Kol_str_pf2 = 0;
		while (!feof(pf1))
		{
			if (Kol_str_pf2 < Kol_str_pf1)
			{
				fgets(str, 100, pf1);
				fputs(str, pf2);
				Kol_str_pf2++;
			}
			else
				break;
		}
		fclose(pf1);
		fclose(pf2);	
	}
	else
		cout << " Error.\n";
}





Задание 2. Дан текстовый файл. Найти длину самой длинной строки.





#include<iostream>
using namespace std;
int main()
{
	setlocale(LC_ALL, "ru");
	// сначала дозапишем в конец последней строки \n, иначе последнюю строку считает не правильно  
	FILE* pf0;
	fopen_s(&pf0, "Doc1.txt", "at");
	if (pf0 != nullptr)
	{
		fputc('\n', pf0);
		fclose(pf0);
	}
	else
		cout << " Error.\n";


	FILE* pf1;
	fopen_s(&pf1, "Doc1.txt", "rt");
	if (pf1 != nullptr)
	{
		char str1[100];
		int longest = 0;
		fgets(str1, 100, pf1);
		longest = strlen(str1) - 1;
		char str2[100];
		char str3[100];
		while (!feof(pf1))
		{
			fgets(str2, 100, pf1);
			
			if ((strlen(str2) - 1) > longest)
			{
				strcpy_s(str3, str2);
				longest = strlen(str2) - 1;
			}
		}
		cout << str3;
		cout << "\n Kol-vo simvolov: " << longest << "\n";

		fclose(pf1);
	}
	else
		cout << " Error.\n";
}





Задание 3. Дан текстовый файл. Посчитать сколько раз в нем встречается заданное пользователем слово.





#include<iostream>
using namespace std;
int main()
{
	setlocale(LC_ALL, "ru");
	FILE* pf1;
	fopen_s(&pf1, "Doc1.txt", "rt");
	if (pf1 != nullptr)
	{
		char str_check[20];
		cout << " Enter word: ";
		cin >> str_check;
		char str_text[20] = "";
		int count = 0;
		int length = 0;
		while (!feof(pf1))
		{
			fscanf_s(pf1, "%s", str_text, 20);
			length = strlen(str_check);
			if (!_strnicmp(str_check, str_text, length))
				count++;
		}
		cout << " kol-vo takix slov: " << count;
		fclose(pf1);
	}
	else
		cout << " Error.\n";
}





Задание 1. Дан текстовый файл. Необходимо создать новый файл, в который 
переписать из исходного файла все слова, состоящие не менее чем из семи букв.




#include<iostream>
using namespace std;
int main()
{
	setlocale(LC_ALL, "ru");
	FILE* pf1;
	fopen_s(&pf1, "Doc1.txt", "rt");
	FILE* pf2;
	fopen_s(&pf2, "Doc2.txt", "wt");
	if (pf1 != nullptr && pf2 != nullptr)
	{
		char str_text[20] = "";
		int length = 0;
		while (!feof(pf1))
		{
			char str_tmp[20] = "";
			fscanf_s(pf1, "%s", str_text, 20);
			// отделяем знаки 
			length = strlen(str_text);			
			for (int i = 0; i < length; i++)
			{
				if (isalpha(str_text[i]))
					str_tmp[i] = str_text[i];
			}
			length = strlen(str_tmp);
			if (length > 6)
				fprintf_s(pf2, "%s\n", str_tmp);			
		}

		fclose(pf1);
		fclose(pf2);
	}
	else
		cout << " Error.\n";
}




Задание 2. Дан текстовый файл. Необходимо переписать его строки в другой файл. 
Порядок строк во втором файле должен совпадать с порядком строк в заданном файле.





#include<iostream>
using namespace std;
int main()
{
	setlocale(LC_ALL, "ru");
	FILE* pf1;
	fopen_s(&pf1, "Doc1.txt", "rt");
	FILE* pf2;
	fopen_s(&pf2, "Doc2.txt", "wt");
	if (pf1 != nullptr && pf2 != nullptr)
	{
		char str[100];
		while (!feof(pf1))
		{
			fgets(str, 100, pf1);
			fputs(str, pf2);
		}
		fclose(pf1);
		fclose(pf2);
	}
	else
		cout << " Error.\n";
}




Задание 3. Дан текстовый файл. Необходимо переписать его строки в другой файл. Порядок строк 
во втором файле должен быть обратным по отношению к порядку строк в заданном файле.





#define _CRT_SECURE_NO_WARNINGS
#include<iostream>
using namespace std;
char** Create2D(int row, int col);
int main()
{
	//начала дозапишем в конец последней строки \n, что бы записать в массив последнюю строку со \n
	FILE* pf0;
	fopen_s(&pf0, "Doc1.txt", "at");
	if (pf0 != nullptr)
	{
		fputc('\n', pf0);
		fclose(pf0);
	}
	else
		cout << " Error.\n";


	FILE* pf1;
	fopen_s(&pf1, "Doc1.txt", "rt");
	FILE* pf2;
	fopen_s(&pf2, "Doc2.txt", "wt");
	if (pf1 != nullptr && pf2 != nullptr)
	{
		char ch;
		int Kol_Str = 0;
		while ((ch = fgetc(pf1)) != EOF)
		{
			if (ch == '\n')
				Kol_Str++;
		}
		
		rewind(pf1);
		char str[100] = "";
		char** arr = Create2D(Kol_Str, 100);
		for (int i = 0; i < Kol_Str; i++)
		{
			fgets(str, 100, pf1);
			strcpy(arr[i], str);
		}
		for (int i = Kol_Str - 1; i >= 0; i--)
		{
			if (arr[i][0] == '\n') // избавимся от пустых строк, при повторных запусках программы
				continue;
			fputs(arr[i], pf2);
		}
	}
	else
		cout << " Error.\n";
}
char** Create2D(int row, int col)
{
	char** arr = (char**)malloc(row * sizeof(char*));
	for (int i = 0; i < row; i++)
	{
		arr[i] = (char*)malloc(col * sizeof(char));
	}
	return arr;
}







Задание 4. Дан текстовый файл. Добавить в него строку из двенадцати черточек (------------), 
поместив ее после последней из строк, в которых нет пробела. Если таких строк нет, то новая 
строка должна быть добавлена после всех строк имеющегося файла. Результат записать в другой файл.






#define _CRT_SECURE_NO_WARNINGS
#include<iostream>
using namespace std;
int main()
{
	setlocale(LC_ALL, "ru");
	FILE* pf1;
	fopen_s(&pf1, "Doc1.txt", "rt");
	FILE* pf2;
	fopen_s(&pf2, "Doc2.txt", "wt");
	if (pf1 != nullptr && pf2 != nullptr)
	{
		char ins[13] = "------------";
		char str[100];
		int count = 0;
		char str_tmp[100];
		while (!feof(pf1))
		{
			fgets(str, 100, pf1);
			bool f = 0;
			int length = strlen(str);
			for (int i = 0; i < length; i++)
			{
				if (str[i] == ' ')
					f = 1;
			}
			if (f == 0)
			{
				count++;
				strcpy(str_tmp, str);
			}
		}
		rewind(pf1);
		if (count == 0)
		{
			while (!feof(pf1))
			{
				fgets(str, 100, pf1);
				fputs(str, pf2);
			}
			fputc('\n', pf2);
			fputs(ins, pf2);
		}
		else
		{
			while (!feof(pf1))
			{
				fgets(str, 100, pf1);
				if (!strcmp(str, str_tmp))
				{
					fputs(str, pf2);
					fputs(ins, pf2);
					fputc('\n', pf2);
				}
				else
					fputs(str, pf2);
			}
		}
			
		fclose(pf1);
		fclose(pf2);
	}
	else
		cout << " Error.\n";
}






Задание 1. Дан текстовый файл. Подсчитать количество слов, начинающихся
 с символа, который задаёт пользователь.







#define _CRT_SECURE_NO_WARNINGS
#include<iostream>
using namespace std;
int main()
{
	setlocale(LC_ALL, "ru");
	FILE* pf1;
	fopen_s(&pf1, "Doc1.txt", "rt");
	
	if (pf1 != nullptr)
	{
		char key;
		cout << " Enter symbol: ";
		cin >> key;
		char str[20] = "";
		char ch;
		int count = 0;
		while ((ch = fgetc(pf1)) != EOF)
		{
			if (ch == key)
			{
				while ((ch = fgetc(pf1)) != EOF)
				{
					fscanf_s(pf1, "%s", str, 20);
					count++;
				}
			}
		}

		cout << " Kol slov: " << count << "\n";

		fclose(pf1);
	}
	else
		cout << " Error.\n";
}




Задание 2. Дан текстовый файл. Переписать в другой файл все его строки с заменой в них 
символа 0 на символ 1 и наоборот.




#include<iostream>
using namespace std;
int main()
{
	setlocale(LC_ALL, "ru");
	FILE* pf1;
	fopen_s(&pf1, "Doc1.txt", "rt");
	FILE* pf2;
	fopen_s(&pf2, "Doc2.txt", "wt");
	char ch;
	if (pf1 != nullptr && pf2 != nullptr)
	{
		while ((ch = fgetc(pf1)) != EOF)
		{
			if (ch == '0')
				ch = '1';
			else if (ch == '1')
				ch = '0';

			fputc(ch, pf2);
		}
		fclose(pf1);
		fclose(pf2);
	}
	else
		cout << " Error.\n";
}




Задание 3. Дан массив строк. Записать их в файл, расположив каждый элемент массива 
на отдельной строке с сохранением порядка.




#include<iostream>
using namespace std;
int main()
{
	setlocale(LC_ALL, "ru");
	FILE* pf2;
	fopen_s(&pf2, "Doc2.txt", "wt");
	char ch;
	if (pf2 != nullptr)
	{
		char arr[6][20] = { "Alona", "Lena", "Masha", "Angelika", "Vera", "Ola" };
		for (int i = 0; i < 6; i++)
		{
			fputs(arr[i], pf2);
			fputc('\n', pf2);
		}
		fclose(pf2);
	}
	else
		cout << " Error.\n";
}





Задание 4. Дан текстовый файл. Подсчитать количество символов в нём.






#include<iostream>
using namespace std;
int main()
{
	FILE* pf1;
	fopen_s(&pf1, "Doc1.txt", "rt");
	if (pf1 != nullptr)
	{
		char ch;
		int Kol_Simv = 0;
		while ((ch = fgetc(pf1)) != EOF)
		{
			if (ch == '\n')
				continue;
			Kol_Simv++;
		}
		cout << " Kol simvolov: " << Kol_Simv << "\n";
		fclose(pf1);
	}
	else
	{
		cout << "Error.\n";
	}
}





Задание 5. Дан текстовый файл. Подсчитать количество строк в нём.





#include<iostream>
using namespace std;
int main()
{
	FILE* pf1;
	fopen_s(&pf1, "Doc1.txt", "rt");
	if (pf1 != nullptr)
	{
		char ch;
		int Kol_Str = 0;
		int count_all = 0;
		while ((ch = fgetc(pf1)) != EOF)
		{
			count_all++;
			if (ch == '\n')
				Kol_Str++;
		}
		if (count_all > 0)
			Kol_Str++;
		cout << " Kol strok: " << Kol_Str << "\n";
		fclose(pf1);
	}
	else
	{
		cout << "Error.\n";
	}
}
